// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRunningQueriesParams creates a new GetRunningQueriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRunningQueriesParams() *GetRunningQueriesParams {
	return &GetRunningQueriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRunningQueriesParamsWithTimeout creates a new GetRunningQueriesParams object
// with the ability to set a timeout on a request.
func NewGetRunningQueriesParamsWithTimeout(timeout time.Duration) *GetRunningQueriesParams {
	return &GetRunningQueriesParams{
		timeout: timeout,
	}
}

// NewGetRunningQueriesParamsWithContext creates a new GetRunningQueriesParams object
// with the ability to set a context for a request.
func NewGetRunningQueriesParamsWithContext(ctx context.Context) *GetRunningQueriesParams {
	return &GetRunningQueriesParams{
		Context: ctx,
	}
}

// NewGetRunningQueriesParamsWithHTTPClient creates a new GetRunningQueriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRunningQueriesParamsWithHTTPClient(client *http.Client) *GetRunningQueriesParams {
	return &GetRunningQueriesParams{
		HTTPClient: client,
	}
}

/*
GetRunningQueriesParams contains all the parameters to send to the API endpoint

	for the get running queries operation.

	Typically these are written to a http.Request.
*/
type GetRunningQueriesParams struct {

	/* TimeoutMs.

	   Timeout for brokers to return running queries

	   Format: int32
	   Default: 3000
	*/
	TimeoutMs *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get running queries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRunningQueriesParams) WithDefaults() *GetRunningQueriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get running queries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRunningQueriesParams) SetDefaults() {
	var (
		timeoutMsDefault = int32(3000)
	)

	val := GetRunningQueriesParams{
		TimeoutMs: &timeoutMsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get running queries params
func (o *GetRunningQueriesParams) WithTimeout(timeout time.Duration) *GetRunningQueriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get running queries params
func (o *GetRunningQueriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get running queries params
func (o *GetRunningQueriesParams) WithContext(ctx context.Context) *GetRunningQueriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get running queries params
func (o *GetRunningQueriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get running queries params
func (o *GetRunningQueriesParams) WithHTTPClient(client *http.Client) *GetRunningQueriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get running queries params
func (o *GetRunningQueriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTimeoutMs adds the timeoutMs to the get running queries params
func (o *GetRunningQueriesParams) WithTimeoutMs(timeoutMs *int32) *GetRunningQueriesParams {
	o.SetTimeoutMs(timeoutMs)
	return o
}

// SetTimeoutMs adds the timeoutMs to the get running queries params
func (o *GetRunningQueriesParams) SetTimeoutMs(timeoutMs *int32) {
	o.TimeoutMs = timeoutMs
}

// WriteToRequest writes these params to a swagger request
func (o *GetRunningQueriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.TimeoutMs != nil {

		// query param timeoutMs
		var qrTimeoutMs int32

		if o.TimeoutMs != nil {
			qrTimeoutMs = *o.TimeoutMs
		}
		qTimeoutMs := swag.FormatInt32(qrTimeoutMs)
		if qTimeoutMs != "" {

			if err := r.SetQueryParam("timeoutMs", qTimeoutMs); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
