// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cluster API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cluster API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteClusterConfig(params *DeleteClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterConfigOK, error)

	GetClusterInfo(params *GetClusterInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterInfoOK, error)

	GetSegmentDebugInfo(params *GetSegmentDebugInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentDebugInfoOK, error)

	GetTableDebugInfo(params *GetTableDebugInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableDebugInfoOK, error)

	ListClusterConfigs(params *ListClusterConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListClusterConfigsOK, error)

	UpdateClusterConfig(params *UpdateClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteClusterConfig deletes cluster configuration
*/
func (a *Client) DeleteClusterConfig(params *DeleteClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClusterConfig",
		Method:             "DELETE",
		PathPattern:        "/cluster/configs/{configName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterInfo gets cluster info

Get cluster Info
*/
func (a *Client) GetClusterInfo(params *GetClusterInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterInfo",
		Method:             "GET",
		PathPattern:        "/cluster/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSegmentDebugInfo gets debug information for segment

Debug information for segment.
*/
func (a *Client) GetSegmentDebugInfo(params *GetSegmentDebugInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentDebugInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentDebugInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSegmentDebugInfo",
		Method:             "GET",
		PathPattern:        "/debug/segments/{tableName}/{segmentName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSegmentDebugInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentDebugInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegmentDebugInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTableDebugInfo gets debug information for table

Debug information for table.
*/
func (a *Client) GetTableDebugInfo(params *GetTableDebugInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableDebugInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableDebugInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTableDebugInfo",
		Method:             "GET",
		PathPattern:        "/debug/tables/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTableDebugInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableDebugInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableDebugInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListClusterConfigs lists cluster configurations

List cluster level configurations
*/
func (a *Client) ListClusterConfigs(params *ListClusterConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListClusterConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listClusterConfigs",
		Method:             "GET",
		PathPattern:        "/cluster/configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClusterConfigsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClusterConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClusterConfigs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateClusterConfig updates cluster configuration
*/
func (a *Client) UpdateClusterConfig(params *UpdateClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateClusterConfig",
		Method:             "POST",
		PathPattern:        "/cluster/configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateClusterConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
