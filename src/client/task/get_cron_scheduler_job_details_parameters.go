// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetCronSchedulerJobDetailsParams creates a new GetCronSchedulerJobDetailsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCronSchedulerJobDetailsParams() *GetCronSchedulerJobDetailsParams {
	return &GetCronSchedulerJobDetailsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCronSchedulerJobDetailsParamsWithTimeout creates a new GetCronSchedulerJobDetailsParams object
// with the ability to set a timeout on a request.
func NewGetCronSchedulerJobDetailsParamsWithTimeout(timeout time.Duration) *GetCronSchedulerJobDetailsParams {
	return &GetCronSchedulerJobDetailsParams{
		timeout: timeout,
	}
}

// NewGetCronSchedulerJobDetailsParamsWithContext creates a new GetCronSchedulerJobDetailsParams object
// with the ability to set a context for a request.
func NewGetCronSchedulerJobDetailsParamsWithContext(ctx context.Context) *GetCronSchedulerJobDetailsParams {
	return &GetCronSchedulerJobDetailsParams{
		Context: ctx,
	}
}

// NewGetCronSchedulerJobDetailsParamsWithHTTPClient creates a new GetCronSchedulerJobDetailsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCronSchedulerJobDetailsParamsWithHTTPClient(client *http.Client) *GetCronSchedulerJobDetailsParams {
	return &GetCronSchedulerJobDetailsParams{
		HTTPClient: client,
	}
}

/*
GetCronSchedulerJobDetailsParams contains all the parameters to send to the API endpoint

	for the get cron scheduler job details operation.

	Typically these are written to a http.Request.
*/
type GetCronSchedulerJobDetailsParams struct {

	/* TableName.

	   Table name (with type suffix)
	*/
	TableName *string

	/* TaskType.

	   Task type
	*/
	TaskType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get cron scheduler job details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCronSchedulerJobDetailsParams) WithDefaults() *GetCronSchedulerJobDetailsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get cron scheduler job details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCronSchedulerJobDetailsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get cron scheduler job details params
func (o *GetCronSchedulerJobDetailsParams) WithTimeout(timeout time.Duration) *GetCronSchedulerJobDetailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cron scheduler job details params
func (o *GetCronSchedulerJobDetailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cron scheduler job details params
func (o *GetCronSchedulerJobDetailsParams) WithContext(ctx context.Context) *GetCronSchedulerJobDetailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cron scheduler job details params
func (o *GetCronSchedulerJobDetailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cron scheduler job details params
func (o *GetCronSchedulerJobDetailsParams) WithHTTPClient(client *http.Client) *GetCronSchedulerJobDetailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cron scheduler job details params
func (o *GetCronSchedulerJobDetailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTableName adds the tableName to the get cron scheduler job details params
func (o *GetCronSchedulerJobDetailsParams) WithTableName(tableName *string) *GetCronSchedulerJobDetailsParams {
	o.SetTableName(tableName)
	return o
}

// SetTableName adds the tableName to the get cron scheduler job details params
func (o *GetCronSchedulerJobDetailsParams) SetTableName(tableName *string) {
	o.TableName = tableName
}

// WithTaskType adds the taskType to the get cron scheduler job details params
func (o *GetCronSchedulerJobDetailsParams) WithTaskType(taskType *string) *GetCronSchedulerJobDetailsParams {
	o.SetTaskType(taskType)
	return o
}

// SetTaskType adds the taskType to the get cron scheduler job details params
func (o *GetCronSchedulerJobDetailsParams) SetTaskType(taskType *string) {
	o.TaskType = taskType
}

// WriteToRequest writes these params to a swagger request
func (o *GetCronSchedulerJobDetailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.TableName != nil {

		// query param tableName
		var qrTableName string

		if o.TableName != nil {
			qrTableName = *o.TableName
		}
		qTableName := qrTableName
		if qTableName != "" {

			if err := r.SetQueryParam("tableName", qTableName); err != nil {
				return err
			}
		}
	}

	if o.TaskType != nil {

		// query param taskType
		var qrTaskType string

		if o.TaskType != nil {
			qrTaskType = *o.TaskType
		}
		qTaskType := qrTaskType
		if qTaskType != "" {

			if err := r.SetQueryParam("taskType", qTaskType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
