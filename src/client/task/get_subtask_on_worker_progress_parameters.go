// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSubtaskOnWorkerProgressParams creates a new GetSubtaskOnWorkerProgressParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSubtaskOnWorkerProgressParams() *GetSubtaskOnWorkerProgressParams {
	return &GetSubtaskOnWorkerProgressParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSubtaskOnWorkerProgressParamsWithTimeout creates a new GetSubtaskOnWorkerProgressParams object
// with the ability to set a timeout on a request.
func NewGetSubtaskOnWorkerProgressParamsWithTimeout(timeout time.Duration) *GetSubtaskOnWorkerProgressParams {
	return &GetSubtaskOnWorkerProgressParams{
		timeout: timeout,
	}
}

// NewGetSubtaskOnWorkerProgressParamsWithContext creates a new GetSubtaskOnWorkerProgressParams object
// with the ability to set a context for a request.
func NewGetSubtaskOnWorkerProgressParamsWithContext(ctx context.Context) *GetSubtaskOnWorkerProgressParams {
	return &GetSubtaskOnWorkerProgressParams{
		Context: ctx,
	}
}

// NewGetSubtaskOnWorkerProgressParamsWithHTTPClient creates a new GetSubtaskOnWorkerProgressParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSubtaskOnWorkerProgressParamsWithHTTPClient(client *http.Client) *GetSubtaskOnWorkerProgressParams {
	return &GetSubtaskOnWorkerProgressParams{
		HTTPClient: client,
	}
}

/*
GetSubtaskOnWorkerProgressParams contains all the parameters to send to the API endpoint

	for the get subtask on worker progress operation.

	Typically these are written to a http.Request.
*/
type GetSubtaskOnWorkerProgressParams struct {

	/* MinionWorkerIds.

	   Minion worker IDs separated by comma
	*/
	MinionWorkerIds *string

	/* SubTaskState.

	   Subtask state (UNKNOWN,IN_PROGRESS,SUCCEEDED,CANCELLED,ERROR)
	*/
	SubTaskState string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get subtask on worker progress params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSubtaskOnWorkerProgressParams) WithDefaults() *GetSubtaskOnWorkerProgressParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get subtask on worker progress params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSubtaskOnWorkerProgressParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get subtask on worker progress params
func (o *GetSubtaskOnWorkerProgressParams) WithTimeout(timeout time.Duration) *GetSubtaskOnWorkerProgressParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get subtask on worker progress params
func (o *GetSubtaskOnWorkerProgressParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get subtask on worker progress params
func (o *GetSubtaskOnWorkerProgressParams) WithContext(ctx context.Context) *GetSubtaskOnWorkerProgressParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get subtask on worker progress params
func (o *GetSubtaskOnWorkerProgressParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get subtask on worker progress params
func (o *GetSubtaskOnWorkerProgressParams) WithHTTPClient(client *http.Client) *GetSubtaskOnWorkerProgressParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get subtask on worker progress params
func (o *GetSubtaskOnWorkerProgressParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMinionWorkerIds adds the minionWorkerIds to the get subtask on worker progress params
func (o *GetSubtaskOnWorkerProgressParams) WithMinionWorkerIds(minionWorkerIds *string) *GetSubtaskOnWorkerProgressParams {
	o.SetMinionWorkerIds(minionWorkerIds)
	return o
}

// SetMinionWorkerIds adds the minionWorkerIds to the get subtask on worker progress params
func (o *GetSubtaskOnWorkerProgressParams) SetMinionWorkerIds(minionWorkerIds *string) {
	o.MinionWorkerIds = minionWorkerIds
}

// WithSubTaskState adds the subTaskState to the get subtask on worker progress params
func (o *GetSubtaskOnWorkerProgressParams) WithSubTaskState(subTaskState string) *GetSubtaskOnWorkerProgressParams {
	o.SetSubTaskState(subTaskState)
	return o
}

// SetSubTaskState adds the subTaskState to the get subtask on worker progress params
func (o *GetSubtaskOnWorkerProgressParams) SetSubTaskState(subTaskState string) {
	o.SubTaskState = subTaskState
}

// WriteToRequest writes these params to a swagger request
func (o *GetSubtaskOnWorkerProgressParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MinionWorkerIds != nil {

		// query param minionWorkerIds
		var qrMinionWorkerIds string

		if o.MinionWorkerIds != nil {
			qrMinionWorkerIds = *o.MinionWorkerIds
		}
		qMinionWorkerIds := qrMinionWorkerIds
		if qMinionWorkerIds != "" {

			if err := r.SetQueryParam("minionWorkerIds", qMinionWorkerIds); err != nil {
				return err
			}
		}
	}

	// query param subTaskState
	qrSubTaskState := o.SubTaskState
	qSubTaskState := qrSubTaskState
	if qSubTaskState != "" {

		if err := r.SetQueryParam("subTaskState", qSubTaskState); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
