// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSubtaskConfigsParams creates a new GetSubtaskConfigsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSubtaskConfigsParams() *GetSubtaskConfigsParams {
	return &GetSubtaskConfigsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSubtaskConfigsParamsWithTimeout creates a new GetSubtaskConfigsParams object
// with the ability to set a timeout on a request.
func NewGetSubtaskConfigsParamsWithTimeout(timeout time.Duration) *GetSubtaskConfigsParams {
	return &GetSubtaskConfigsParams{
		timeout: timeout,
	}
}

// NewGetSubtaskConfigsParamsWithContext creates a new GetSubtaskConfigsParams object
// with the ability to set a context for a request.
func NewGetSubtaskConfigsParamsWithContext(ctx context.Context) *GetSubtaskConfigsParams {
	return &GetSubtaskConfigsParams{
		Context: ctx,
	}
}

// NewGetSubtaskConfigsParamsWithHTTPClient creates a new GetSubtaskConfigsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSubtaskConfigsParamsWithHTTPClient(client *http.Client) *GetSubtaskConfigsParams {
	return &GetSubtaskConfigsParams{
		HTTPClient: client,
	}
}

/*
GetSubtaskConfigsParams contains all the parameters to send to the API endpoint

	for the get subtask configs operation.

	Typically these are written to a http.Request.
*/
type GetSubtaskConfigsParams struct {

	/* SubtaskNames.

	   Sub task names separated by comma
	*/
	SubtaskNames *string

	/* TaskName.

	   Task name
	*/
	TaskName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get subtask configs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSubtaskConfigsParams) WithDefaults() *GetSubtaskConfigsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get subtask configs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSubtaskConfigsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get subtask configs params
func (o *GetSubtaskConfigsParams) WithTimeout(timeout time.Duration) *GetSubtaskConfigsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get subtask configs params
func (o *GetSubtaskConfigsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get subtask configs params
func (o *GetSubtaskConfigsParams) WithContext(ctx context.Context) *GetSubtaskConfigsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get subtask configs params
func (o *GetSubtaskConfigsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get subtask configs params
func (o *GetSubtaskConfigsParams) WithHTTPClient(client *http.Client) *GetSubtaskConfigsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get subtask configs params
func (o *GetSubtaskConfigsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSubtaskNames adds the subtaskNames to the get subtask configs params
func (o *GetSubtaskConfigsParams) WithSubtaskNames(subtaskNames *string) *GetSubtaskConfigsParams {
	o.SetSubtaskNames(subtaskNames)
	return o
}

// SetSubtaskNames adds the subtaskNames to the get subtask configs params
func (o *GetSubtaskConfigsParams) SetSubtaskNames(subtaskNames *string) {
	o.SubtaskNames = subtaskNames
}

// WithTaskName adds the taskName to the get subtask configs params
func (o *GetSubtaskConfigsParams) WithTaskName(taskName string) *GetSubtaskConfigsParams {
	o.SetTaskName(taskName)
	return o
}

// SetTaskName adds the taskName to the get subtask configs params
func (o *GetSubtaskConfigsParams) SetTaskName(taskName string) {
	o.TaskName = taskName
}

// WriteToRequest writes these params to a swagger request
func (o *GetSubtaskConfigsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SubtaskNames != nil {

		// query param subtaskNames
		var qrSubtaskNames string

		if o.SubtaskNames != nil {
			qrSubtaskNames = *o.SubtaskNames
		}
		qSubtaskNames := qrSubtaskNames
		if qSubtaskNames != "" {

			if err := r.SetQueryParam("subtaskNames", qSubtaskNames); err != nil {
				return err
			}
		}
	}

	// path param taskName
	if err := r.SetPathParam("taskName", o.TaskName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
