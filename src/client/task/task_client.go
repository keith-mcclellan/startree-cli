// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new task API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for task API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CleanUpTasks(params *CleanUpTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CleanUpTasksOK, error)

	CleanUpTasksDeprecated(params *CleanUpTasksDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CleanUpTasksDeprecatedOK, error)

	DeleteTask(params *DeleteTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTaskOK, error)

	DeleteTaskMetadataByTable(params *DeleteTaskMetadataByTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTaskMetadataByTableOK, error)

	DeleteTaskQueue(params *DeleteTaskQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTaskQueueOK, error)

	DeleteTasks(params *DeleteTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTasksOK, error)

	ExecuteAdhocTask(params *ExecuteAdhocTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetCronSchedulerInformation(params *GetCronSchedulerInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCronSchedulerInformationOK, error)

	GetCronSchedulerJobDetails(params *GetCronSchedulerJobDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCronSchedulerJobDetailsOK, error)

	GetCronSchedulerJobKeys(params *GetCronSchedulerJobKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCronSchedulerJobKeysOK, error)

	GetSubtaskConfigs(params *GetSubtaskConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubtaskConfigsOK, error)

	GetSubtaskOnWorkerProgress(params *GetSubtaskOnWorkerProgressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubtaskOnWorkerProgressOK, error)

	GetSubtaskProgress(params *GetSubtaskProgressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubtaskProgressOK, error)

	GetSubtaskStates(params *GetSubtaskStatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubtaskStatesOK, error)

	GetTaskConfig(params *GetTaskConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskConfigOK, error)

	GetTaskConfigs(params *GetTaskConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskConfigsOK, error)

	GetTaskConfigsDeprecated(params *GetTaskConfigsDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskConfigsDeprecatedOK, error)

	GetTaskCounts(params *GetTaskCountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskCountsOK, error)

	GetTaskDebugInfo(params *GetTaskDebugInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskDebugInfoOK, error)

	GetTaskGenerationDebugInto(params *GetTaskGenerationDebugIntoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskGenerationDebugIntoOK, error)

	GetTaskMetadataByTable(params *GetTaskMetadataByTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskMetadataByTableOK, error)

	GetTaskQueueState(params *GetTaskQueueStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskQueueStateOK, error)

	GetTaskQueueStateDeprecated(params *GetTaskQueueStateDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskQueueStateDeprecatedOK, error)

	GetTaskQueues(params *GetTaskQueuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskQueuesOK, error)

	GetTaskState(params *GetTaskStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskStateOK, error)

	GetTaskStateDeprecated(params *GetTaskStateDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskStateDeprecatedOK, error)

	GetTaskStates(params *GetTaskStatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskStatesOK, error)

	GetTaskStatesByTable(params *GetTaskStatesByTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskStatesByTableOK, error)

	GetTaskStatesDeprecated(params *GetTaskStatesDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskStatesDeprecatedOK, error)

	GetTasks(params *GetTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTasksOK, error)

	GetTasksDebugInfo(params *GetTasksDebugInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTasksDebugInfoOK, error)

	GetTasksDebugInfo1(params *GetTasksDebugInfo1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTasksDebugInfo1OK, error)

	GetTasksDeprecated(params *GetTasksDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTasksDeprecatedOK, error)

	ListTaskTypes(params *ListTaskTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTaskTypesOK, error)

	ResumeTasks(params *ResumeTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumeTasksOK, error)

	ScheduleTasks(params *ScheduleTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ScheduleTasksOK, error)

	ScheduleTasksDeprecated(params *ScheduleTasksDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ScheduleTasksDeprecatedOK, error)

	StopTasks(params *StopTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopTasksOK, error)

	ToggleTaskQueueState(params *ToggleTaskQueueStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ToggleTaskQueueStateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CleanUpTasks cleans up finished tasks c o m p l e t e d f a i l e d for the given task type
*/
func (a *Client) CleanUpTasks(params *CleanUpTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CleanUpTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCleanUpTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cleanUpTasks",
		Method:             "PUT",
		PathPattern:        "/tasks/{taskType}/cleanup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CleanUpTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CleanUpTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cleanUpTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CleanUpTasksDeprecated cleans up finished tasks c o m p l e t e d f a i l e d for the given task type deprecated
*/
func (a *Client) CleanUpTasksDeprecated(params *CleanUpTasksDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CleanUpTasksDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCleanUpTasksDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cleanUpTasksDeprecated",
		Method:             "PUT",
		PathPattern:        "/tasks/cleanuptasks/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CleanUpTasksDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CleanUpTasksDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cleanUpTasksDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTask deletes a single task given its task name
*/
func (a *Client) DeleteTask(params *DeleteTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTask",
		Method:             "DELETE",
		PathPattern:        "/tasks/task/{taskName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTaskMetadataByTable deletes task metadata for the given task type and table
*/
func (a *Client) DeleteTaskMetadataByTable(params *DeleteTaskMetadataByTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTaskMetadataByTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskMetadataByTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTaskMetadataByTable",
		Method:             "DELETE",
		PathPattern:        "/tasks/{taskType}/{tableNameWithType}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTaskMetadataByTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTaskMetadataByTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTaskMetadataByTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTaskQueue deletes a task queue deprecated
*/
func (a *Client) DeleteTaskQueue(params *DeleteTaskQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTaskQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTaskQueue",
		Method:             "DELETE",
		PathPattern:        "/tasks/taskqueue/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTaskQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTaskQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTaskQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTasks deletes all tasks as well as the task queue for the given task type
*/
func (a *Client) DeleteTasks(params *DeleteTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTasks",
		Method:             "DELETE",
		PathPattern:        "/tasks/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteAdhocTask executes a task on minion
*/
func (a *Client) ExecuteAdhocTask(params *ExecuteAdhocTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteAdhocTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "executeAdhocTask",
		Method:             "POST",
		PathPattern:        "/tasks/execute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteAdhocTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetCronSchedulerInformation fetches cron scheduler information
*/
func (a *Client) GetCronSchedulerInformation(params *GetCronSchedulerInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCronSchedulerInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCronSchedulerInformationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCronSchedulerInformation",
		Method:             "GET",
		PathPattern:        "/tasks/scheduler/information",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCronSchedulerInformationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCronSchedulerInformationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCronSchedulerInformation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCronSchedulerJobDetails fetches cron scheduler job keys
*/
func (a *Client) GetCronSchedulerJobDetails(params *GetCronSchedulerJobDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCronSchedulerJobDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCronSchedulerJobDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCronSchedulerJobDetails",
		Method:             "GET",
		PathPattern:        "/tasks/scheduler/jobDetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCronSchedulerJobDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCronSchedulerJobDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCronSchedulerJobDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCronSchedulerJobKeys fetches cron scheduler job keys
*/
func (a *Client) GetCronSchedulerJobKeys(params *GetCronSchedulerJobKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCronSchedulerJobKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCronSchedulerJobKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCronSchedulerJobKeys",
		Method:             "GET",
		PathPattern:        "/tasks/scheduler/jobKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCronSchedulerJobKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCronSchedulerJobKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCronSchedulerJobKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubtaskConfigs gets the configs of specified sub tasks for the given task
*/
func (a *Client) GetSubtaskConfigs(params *GetSubtaskConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubtaskConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubtaskConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubtaskConfigs",
		Method:             "GET",
		PathPattern:        "/tasks/subtask/{taskName}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSubtaskConfigsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubtaskConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubtaskConfigs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubtaskOnWorkerProgress gets progress of all subtasks with specified state tracked by minion worker in memory
*/
func (a *Client) GetSubtaskOnWorkerProgress(params *GetSubtaskOnWorkerProgressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubtaskOnWorkerProgressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubtaskOnWorkerProgressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubtaskOnWorkerProgress",
		Method:             "GET",
		PathPattern:        "/tasks/subtask/workers/progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSubtaskOnWorkerProgressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubtaskOnWorkerProgressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubtaskOnWorkerProgress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubtaskProgress gets progress of specified sub tasks for the given task tracked by minion worker in memory
*/
func (a *Client) GetSubtaskProgress(params *GetSubtaskProgressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubtaskProgressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubtaskProgressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubtaskProgress",
		Method:             "GET",
		PathPattern:        "/tasks/subtask/{taskName}/progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSubtaskProgressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubtaskProgressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubtaskProgress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubtaskStates gets the states of all the sub tasks for the given task
*/
func (a *Client) GetSubtaskStates(params *GetSubtaskStatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubtaskStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubtaskStatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubtaskStates",
		Method:             "GET",
		PathPattern:        "/tasks/subtask/{taskName}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSubtaskStatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubtaskStatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubtaskStates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskConfig gets the task runtime config for the given task
*/
func (a *Client) GetTaskConfig(params *GetTaskConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskConfig",
		Method:             "GET",
		PathPattern:        "/tasks/task/{taskName}/runtime/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskConfigs gets the task config a list of child task configs for the given task
*/
func (a *Client) GetTaskConfigs(params *GetTaskConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskConfigs",
		Method:             "GET",
		PathPattern:        "/tasks/task/{taskName}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskConfigsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskConfigs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskConfigsDeprecated gets the task config a list of child task configs for the given task deprecated
*/
func (a *Client) GetTaskConfigsDeprecated(params *GetTaskConfigsDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskConfigsDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskConfigsDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskConfigsDeprecated",
		Method:             "GET",
		PathPattern:        "/tasks/taskconfig/{taskName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskConfigsDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskConfigsDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskConfigsDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskCounts fetches count of sub tasks for each of the tasks for the given task type
*/
func (a *Client) GetTaskCounts(params *GetTaskCountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskCountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskCountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskCounts",
		Method:             "GET",
		PathPattern:        "/tasks/{taskType}/taskcounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskCountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskCountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskCounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskDebugInfo fetches information for the given task name
*/
func (a *Client) GetTaskDebugInfo(params *GetTaskDebugInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskDebugInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskDebugInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskDebugInfo",
		Method:             "GET",
		PathPattern:        "/tasks/task/{taskName}/debug",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskDebugInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskDebugInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskDebugInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskGenerationDebugInto fetches task generation information for the recent runs of the given task for the given table
*/
func (a *Client) GetTaskGenerationDebugInto(params *GetTaskGenerationDebugIntoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskGenerationDebugIntoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskGenerationDebugIntoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskGenerationDebugInto",
		Method:             "GET",
		PathPattern:        "/tasks/generator/{tableNameWithType}/{taskType}/debug",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskGenerationDebugIntoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskGenerationDebugIntoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskGenerationDebugInto: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskMetadataByTable gets task metadata for the given task type and table
*/
func (a *Client) GetTaskMetadataByTable(params *GetTaskMetadataByTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskMetadataByTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskMetadataByTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskMetadataByTable",
		Method:             "GET",
		PathPattern:        "/tasks/{taskType}/{tableNameWithType}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskMetadataByTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskMetadataByTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskMetadataByTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskQueueState gets the state task queue state for the given task type
*/
func (a *Client) GetTaskQueueState(params *GetTaskQueueStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskQueueStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskQueueStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskQueueState",
		Method:             "GET",
		PathPattern:        "/tasks/{taskType}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskQueueStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskQueueStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskQueueState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskQueueStateDeprecated gets the state task queue state for the given task type deprecated
*/
func (a *Client) GetTaskQueueStateDeprecated(params *GetTaskQueueStateDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskQueueStateDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskQueueStateDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskQueueStateDeprecated",
		Method:             "GET",
		PathPattern:        "/tasks/taskqueuestate/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskQueueStateDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskQueueStateDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskQueueStateDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskQueues lists all task queues deprecated
*/
func (a *Client) GetTaskQueues(params *GetTaskQueuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskQueuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskQueuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskQueues",
		Method:             "GET",
		PathPattern:        "/tasks/taskqueues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskQueuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskQueuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskQueues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskState gets the task state for the given task
*/
func (a *Client) GetTaskState(params *GetTaskStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskState",
		Method:             "GET",
		PathPattern:        "/tasks/task/{taskName}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskStateDeprecated gets the task state for the given task deprecated
*/
func (a *Client) GetTaskStateDeprecated(params *GetTaskStateDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskStateDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskStateDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskStateDeprecated",
		Method:             "GET",
		PathPattern:        "/tasks/taskstate/{taskName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskStateDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskStateDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskStateDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskStates gets a map from task to task state for the given task type
*/
func (a *Client) GetTaskStates(params *GetTaskStatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskStatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskStates",
		Method:             "GET",
		PathPattern:        "/tasks/{taskType}/taskstates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskStatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskStatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskStates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskStatesByTable lists all tasks for the given task type
*/
func (a *Client) GetTaskStatesByTable(params *GetTaskStatesByTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskStatesByTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskStatesByTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskStatesByTable",
		Method:             "GET",
		PathPattern:        "/tasks/{taskType}/{tableNameWithType}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskStatesByTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskStatesByTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskStatesByTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskStatesDeprecated gets a map from task to task state for the given task type deprecated
*/
func (a *Client) GetTaskStatesDeprecated(params *GetTaskStatesDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskStatesDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskStatesDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskStatesDeprecated",
		Method:             "GET",
		PathPattern:        "/tasks/taskstates/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskStatesDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskStatesDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskStatesDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTasks lists all tasks for the given task type
*/
func (a *Client) GetTasks(params *GetTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTasks",
		Method:             "GET",
		PathPattern:        "/tasks/{taskType}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTasksDebugInfo fetches information for all the tasks for the given task type
*/
func (a *Client) GetTasksDebugInfo(params *GetTasksDebugInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTasksDebugInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksDebugInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTasksDebugInfo",
		Method:             "GET",
		PathPattern:        "/tasks/{taskType}/debug",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTasksDebugInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksDebugInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTasksDebugInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTasksDebugInfo1 fetches information for all the tasks for the given task type and table
*/
func (a *Client) GetTasksDebugInfo1(params *GetTasksDebugInfo1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTasksDebugInfo1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksDebugInfo1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTasksDebugInfo_1",
		Method:             "GET",
		PathPattern:        "/tasks/{taskType}/{tableNameWithType}/debug",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTasksDebugInfo1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksDebugInfo1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTasksDebugInfo_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTasksDeprecated lists all tasks for the given task type deprecated
*/
func (a *Client) GetTasksDeprecated(params *GetTasksDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTasksDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTasksDeprecated",
		Method:             "GET",
		PathPattern:        "/tasks/tasks/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTasksDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTasksDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTaskTypes lists all task types
*/
func (a *Client) ListTaskTypes(params *ListTaskTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTaskTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTaskTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTaskTypes",
		Method:             "GET",
		PathPattern:        "/tasks/tasktypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTaskTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTaskTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTaskTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResumeTasks resumes all stopped tasks as well as the task queue for the given task type
*/
func (a *Client) ResumeTasks(params *ResumeTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumeTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resumeTasks",
		Method:             "PUT",
		PathPattern:        "/tasks/{taskType}/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResumeTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resumeTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ScheduleTasks schedules tasks and return a map from task type to task name scheduled
*/
func (a *Client) ScheduleTasks(params *ScheduleTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ScheduleTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "scheduleTasks",
		Method:             "POST",
		PathPattern:        "/tasks/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduleTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for scheduleTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ScheduleTasksDeprecated schedules tasks deprecated
*/
func (a *Client) ScheduleTasksDeprecated(params *ScheduleTasksDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ScheduleTasksDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleTasksDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "scheduleTasksDeprecated",
		Method:             "PUT",
		PathPattern:        "/tasks/scheduletasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduleTasksDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleTasksDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for scheduleTasksDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopTasks stops all running pending tasks as well as the task queue for the given task type
*/
func (a *Client) StopTasks(params *StopTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopTasks",
		Method:             "PUT",
		PathPattern:        "/tasks/{taskType}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ToggleTaskQueueState stops resume a task queue deprecated
*/
func (a *Client) ToggleTaskQueueState(params *ToggleTaskQueueStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ToggleTaskQueueStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewToggleTaskQueueStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "toggleTaskQueueState",
		Method:             "PUT",
		PathPattern:        "/tasks/taskqueue/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ToggleTaskQueueStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ToggleTaskQueueStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for toggleTaskQueueState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
