// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTaskGenerationDebugIntoParams creates a new GetTaskGenerationDebugIntoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTaskGenerationDebugIntoParams() *GetTaskGenerationDebugIntoParams {
	return &GetTaskGenerationDebugIntoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTaskGenerationDebugIntoParamsWithTimeout creates a new GetTaskGenerationDebugIntoParams object
// with the ability to set a timeout on a request.
func NewGetTaskGenerationDebugIntoParamsWithTimeout(timeout time.Duration) *GetTaskGenerationDebugIntoParams {
	return &GetTaskGenerationDebugIntoParams{
		timeout: timeout,
	}
}

// NewGetTaskGenerationDebugIntoParamsWithContext creates a new GetTaskGenerationDebugIntoParams object
// with the ability to set a context for a request.
func NewGetTaskGenerationDebugIntoParamsWithContext(ctx context.Context) *GetTaskGenerationDebugIntoParams {
	return &GetTaskGenerationDebugIntoParams{
		Context: ctx,
	}
}

// NewGetTaskGenerationDebugIntoParamsWithHTTPClient creates a new GetTaskGenerationDebugIntoParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTaskGenerationDebugIntoParamsWithHTTPClient(client *http.Client) *GetTaskGenerationDebugIntoParams {
	return &GetTaskGenerationDebugIntoParams{
		HTTPClient: client,
	}
}

/*
GetTaskGenerationDebugIntoParams contains all the parameters to send to the API endpoint

	for the get task generation debug into operation.

	Typically these are written to a http.Request.
*/
type GetTaskGenerationDebugIntoParams struct {

	/* LocalOnly.

	   Whether to only lookup local cache for logs
	*/
	LocalOnly *bool

	/* TableNameWithType.

	   Table name with type
	*/
	TableNameWithType string

	/* TaskType.

	   Task type
	*/
	TaskType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get task generation debug into params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTaskGenerationDebugIntoParams) WithDefaults() *GetTaskGenerationDebugIntoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get task generation debug into params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTaskGenerationDebugIntoParams) SetDefaults() {
	var (
		localOnlyDefault = bool(false)
	)

	val := GetTaskGenerationDebugIntoParams{
		LocalOnly: &localOnlyDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get task generation debug into params
func (o *GetTaskGenerationDebugIntoParams) WithTimeout(timeout time.Duration) *GetTaskGenerationDebugIntoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get task generation debug into params
func (o *GetTaskGenerationDebugIntoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get task generation debug into params
func (o *GetTaskGenerationDebugIntoParams) WithContext(ctx context.Context) *GetTaskGenerationDebugIntoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get task generation debug into params
func (o *GetTaskGenerationDebugIntoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get task generation debug into params
func (o *GetTaskGenerationDebugIntoParams) WithHTTPClient(client *http.Client) *GetTaskGenerationDebugIntoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get task generation debug into params
func (o *GetTaskGenerationDebugIntoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLocalOnly adds the localOnly to the get task generation debug into params
func (o *GetTaskGenerationDebugIntoParams) WithLocalOnly(localOnly *bool) *GetTaskGenerationDebugIntoParams {
	o.SetLocalOnly(localOnly)
	return o
}

// SetLocalOnly adds the localOnly to the get task generation debug into params
func (o *GetTaskGenerationDebugIntoParams) SetLocalOnly(localOnly *bool) {
	o.LocalOnly = localOnly
}

// WithTableNameWithType adds the tableNameWithType to the get task generation debug into params
func (o *GetTaskGenerationDebugIntoParams) WithTableNameWithType(tableNameWithType string) *GetTaskGenerationDebugIntoParams {
	o.SetTableNameWithType(tableNameWithType)
	return o
}

// SetTableNameWithType adds the tableNameWithType to the get task generation debug into params
func (o *GetTaskGenerationDebugIntoParams) SetTableNameWithType(tableNameWithType string) {
	o.TableNameWithType = tableNameWithType
}

// WithTaskType adds the taskType to the get task generation debug into params
func (o *GetTaskGenerationDebugIntoParams) WithTaskType(taskType string) *GetTaskGenerationDebugIntoParams {
	o.SetTaskType(taskType)
	return o
}

// SetTaskType adds the taskType to the get task generation debug into params
func (o *GetTaskGenerationDebugIntoParams) SetTaskType(taskType string) {
	o.TaskType = taskType
}

// WriteToRequest writes these params to a swagger request
func (o *GetTaskGenerationDebugIntoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LocalOnly != nil {

		// query param localOnly
		var qrLocalOnly bool

		if o.LocalOnly != nil {
			qrLocalOnly = *o.LocalOnly
		}
		qLocalOnly := swag.FormatBool(qrLocalOnly)
		if qLocalOnly != "" {

			if err := r.SetQueryParam("localOnly", qLocalOnly); err != nil {
				return err
			}
		}
	}

	// path param tableNameWithType
	if err := r.SetPathParam("tableNameWithType", o.TableNameWithType); err != nil {
		return err
	}

	// path param taskType
	if err := r.SetPathParam("taskType", o.TaskType); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
