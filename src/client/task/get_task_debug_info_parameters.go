// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTaskDebugInfoParams creates a new GetTaskDebugInfoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTaskDebugInfoParams() *GetTaskDebugInfoParams {
	return &GetTaskDebugInfoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTaskDebugInfoParamsWithTimeout creates a new GetTaskDebugInfoParams object
// with the ability to set a timeout on a request.
func NewGetTaskDebugInfoParamsWithTimeout(timeout time.Duration) *GetTaskDebugInfoParams {
	return &GetTaskDebugInfoParams{
		timeout: timeout,
	}
}

// NewGetTaskDebugInfoParamsWithContext creates a new GetTaskDebugInfoParams object
// with the ability to set a context for a request.
func NewGetTaskDebugInfoParamsWithContext(ctx context.Context) *GetTaskDebugInfoParams {
	return &GetTaskDebugInfoParams{
		Context: ctx,
	}
}

// NewGetTaskDebugInfoParamsWithHTTPClient creates a new GetTaskDebugInfoParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTaskDebugInfoParamsWithHTTPClient(client *http.Client) *GetTaskDebugInfoParams {
	return &GetTaskDebugInfoParams{
		HTTPClient: client,
	}
}

/*
GetTaskDebugInfoParams contains all the parameters to send to the API endpoint

	for the get task debug info operation.

	Typically these are written to a http.Request.
*/
type GetTaskDebugInfoParams struct {

	/* TaskName.

	   Task name
	*/
	TaskName string

	/* Verbosity.

	   verbosity (Prints information for the given task name.By default, only prints subtask details for running and error tasks. Value of > 0 prints subtask details for all tasks)

	   Format: int32
	*/
	Verbosity *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get task debug info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTaskDebugInfoParams) WithDefaults() *GetTaskDebugInfoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get task debug info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTaskDebugInfoParams) SetDefaults() {
	var (
		verbosityDefault = int32(0)
	)

	val := GetTaskDebugInfoParams{
		Verbosity: &verbosityDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get task debug info params
func (o *GetTaskDebugInfoParams) WithTimeout(timeout time.Duration) *GetTaskDebugInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get task debug info params
func (o *GetTaskDebugInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get task debug info params
func (o *GetTaskDebugInfoParams) WithContext(ctx context.Context) *GetTaskDebugInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get task debug info params
func (o *GetTaskDebugInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get task debug info params
func (o *GetTaskDebugInfoParams) WithHTTPClient(client *http.Client) *GetTaskDebugInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get task debug info params
func (o *GetTaskDebugInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTaskName adds the taskName to the get task debug info params
func (o *GetTaskDebugInfoParams) WithTaskName(taskName string) *GetTaskDebugInfoParams {
	o.SetTaskName(taskName)
	return o
}

// SetTaskName adds the taskName to the get task debug info params
func (o *GetTaskDebugInfoParams) SetTaskName(taskName string) {
	o.TaskName = taskName
}

// WithVerbosity adds the verbosity to the get task debug info params
func (o *GetTaskDebugInfoParams) WithVerbosity(verbosity *int32) *GetTaskDebugInfoParams {
	o.SetVerbosity(verbosity)
	return o
}

// SetVerbosity adds the verbosity to the get task debug info params
func (o *GetTaskDebugInfoParams) SetVerbosity(verbosity *int32) {
	o.Verbosity = verbosity
}

// WriteToRequest writes these params to a swagger request
func (o *GetTaskDebugInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param taskName
	if err := r.SetPathParam("taskName", o.TaskName); err != nil {
		return err
	}

	if o.Verbosity != nil {

		// query param verbosity
		var qrVerbosity int32

		if o.Verbosity != nil {
			qrVerbosity = *o.Verbosity
		}
		qVerbosity := swag.FormatInt32(qrVerbosity)
		if qVerbosity != "" {

			if err := r.SetQueryParam("verbosity", qVerbosity); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
