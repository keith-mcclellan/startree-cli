// Code generated by go-swagger; DO NOT EDIT.

package tenant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListInstanceOrToggleTenantStateParams creates a new ListInstanceOrToggleTenantStateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListInstanceOrToggleTenantStateParams() *ListInstanceOrToggleTenantStateParams {
	return &ListInstanceOrToggleTenantStateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListInstanceOrToggleTenantStateParamsWithTimeout creates a new ListInstanceOrToggleTenantStateParams object
// with the ability to set a timeout on a request.
func NewListInstanceOrToggleTenantStateParamsWithTimeout(timeout time.Duration) *ListInstanceOrToggleTenantStateParams {
	return &ListInstanceOrToggleTenantStateParams{
		timeout: timeout,
	}
}

// NewListInstanceOrToggleTenantStateParamsWithContext creates a new ListInstanceOrToggleTenantStateParams object
// with the ability to set a context for a request.
func NewListInstanceOrToggleTenantStateParamsWithContext(ctx context.Context) *ListInstanceOrToggleTenantStateParams {
	return &ListInstanceOrToggleTenantStateParams{
		Context: ctx,
	}
}

// NewListInstanceOrToggleTenantStateParamsWithHTTPClient creates a new ListInstanceOrToggleTenantStateParams object
// with the ability to set a custom HTTPClient for a request.
func NewListInstanceOrToggleTenantStateParamsWithHTTPClient(client *http.Client) *ListInstanceOrToggleTenantStateParams {
	return &ListInstanceOrToggleTenantStateParams{
		HTTPClient: client,
	}
}

/*
ListInstanceOrToggleTenantStateParams contains all the parameters to send to the API endpoint

	for the list instance or toggle tenant state operation.

	Typically these are written to a http.Request.
*/
type ListInstanceOrToggleTenantStateParams struct {

	/* State.

	   state
	*/
	State *string

	/* TableType.

	   Table type (offline|realtime)
	*/
	TableType *string

	/* TenantName.

	   Tenant name
	*/
	TenantName string

	/* Type.

	   Tenant type (server|broker)
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list instance or toggle tenant state params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListInstanceOrToggleTenantStateParams) WithDefaults() *ListInstanceOrToggleTenantStateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list instance or toggle tenant state params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListInstanceOrToggleTenantStateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) WithTimeout(timeout time.Duration) *ListInstanceOrToggleTenantStateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) WithContext(ctx context.Context) *ListInstanceOrToggleTenantStateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) WithHTTPClient(client *http.Client) *ListInstanceOrToggleTenantStateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithState adds the state to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) WithState(state *string) *ListInstanceOrToggleTenantStateParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) SetState(state *string) {
	o.State = state
}

// WithTableType adds the tableType to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) WithTableType(tableType *string) *ListInstanceOrToggleTenantStateParams {
	o.SetTableType(tableType)
	return o
}

// SetTableType adds the tableType to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) SetTableType(tableType *string) {
	o.TableType = tableType
}

// WithTenantName adds the tenantName to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) WithTenantName(tenantName string) *ListInstanceOrToggleTenantStateParams {
	o.SetTenantName(tenantName)
	return o
}

// SetTenantName adds the tenantName to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) SetTenantName(tenantName string) {
	o.TenantName = tenantName
}

// WithType adds the typeVar to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) WithType(typeVar *string) *ListInstanceOrToggleTenantStateParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the list instance or toggle tenant state params
func (o *ListInstanceOrToggleTenantStateParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *ListInstanceOrToggleTenantStateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.TableType != nil {

		// query param tableType
		var qrTableType string

		if o.TableType != nil {
			qrTableType = *o.TableType
		}
		qTableType := qrTableType
		if qTableType != "" {

			if err := r.SetQueryParam("tableType", qTableType); err != nil {
				return err
			}
		}
	}

	// path param tenantName
	if err := r.SetPathParam("tenantName", o.TenantName); err != nil {
		return err
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
