// Code generated by go-swagger; DO NOT EDIT.

package segment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewReloadSegmentParams creates a new ReloadSegmentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewReloadSegmentParams() *ReloadSegmentParams {
	return &ReloadSegmentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewReloadSegmentParamsWithTimeout creates a new ReloadSegmentParams object
// with the ability to set a timeout on a request.
func NewReloadSegmentParamsWithTimeout(timeout time.Duration) *ReloadSegmentParams {
	return &ReloadSegmentParams{
		timeout: timeout,
	}
}

// NewReloadSegmentParamsWithContext creates a new ReloadSegmentParams object
// with the ability to set a context for a request.
func NewReloadSegmentParamsWithContext(ctx context.Context) *ReloadSegmentParams {
	return &ReloadSegmentParams{
		Context: ctx,
	}
}

// NewReloadSegmentParamsWithHTTPClient creates a new ReloadSegmentParams object
// with the ability to set a custom HTTPClient for a request.
func NewReloadSegmentParamsWithHTTPClient(client *http.Client) *ReloadSegmentParams {
	return &ReloadSegmentParams{
		HTTPClient: client,
	}
}

/*
ReloadSegmentParams contains all the parameters to send to the API endpoint

	for the reload segment operation.

	Typically these are written to a http.Request.
*/
type ReloadSegmentParams struct {

	/* ForceDownload.

	   Whether to force server to download segment
	*/
	ForceDownload *bool

	/* SegmentName.

	   Name of the segment
	*/
	SegmentName string

	/* TableName.

	   Name of the table
	*/
	TableName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the reload segment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReloadSegmentParams) WithDefaults() *ReloadSegmentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the reload segment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReloadSegmentParams) SetDefaults() {
	var (
		forceDownloadDefault = bool(false)
	)

	val := ReloadSegmentParams{
		ForceDownload: &forceDownloadDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the reload segment params
func (o *ReloadSegmentParams) WithTimeout(timeout time.Duration) *ReloadSegmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the reload segment params
func (o *ReloadSegmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the reload segment params
func (o *ReloadSegmentParams) WithContext(ctx context.Context) *ReloadSegmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the reload segment params
func (o *ReloadSegmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the reload segment params
func (o *ReloadSegmentParams) WithHTTPClient(client *http.Client) *ReloadSegmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the reload segment params
func (o *ReloadSegmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForceDownload adds the forceDownload to the reload segment params
func (o *ReloadSegmentParams) WithForceDownload(forceDownload *bool) *ReloadSegmentParams {
	o.SetForceDownload(forceDownload)
	return o
}

// SetForceDownload adds the forceDownload to the reload segment params
func (o *ReloadSegmentParams) SetForceDownload(forceDownload *bool) {
	o.ForceDownload = forceDownload
}

// WithSegmentName adds the segmentName to the reload segment params
func (o *ReloadSegmentParams) WithSegmentName(segmentName string) *ReloadSegmentParams {
	o.SetSegmentName(segmentName)
	return o
}

// SetSegmentName adds the segmentName to the reload segment params
func (o *ReloadSegmentParams) SetSegmentName(segmentName string) {
	o.SegmentName = segmentName
}

// WithTableName adds the tableName to the reload segment params
func (o *ReloadSegmentParams) WithTableName(tableName string) *ReloadSegmentParams {
	o.SetTableName(tableName)
	return o
}

// SetTableName adds the tableName to the reload segment params
func (o *ReloadSegmentParams) SetTableName(tableName string) {
	o.TableName = tableName
}

// WriteToRequest writes these params to a swagger request
func (o *ReloadSegmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ForceDownload != nil {

		// query param forceDownload
		var qrForceDownload bool

		if o.ForceDownload != nil {
			qrForceDownload = *o.ForceDownload
		}
		qForceDownload := swag.FormatBool(qrForceDownload)
		if qForceDownload != "" {

			if err := r.SetQueryParam("forceDownload", qForceDownload); err != nil {
				return err
			}
		}
	}

	// path param segmentName
	if err := r.SetPathParam("segmentName", o.SegmentName); err != nil {
		return err
	}

	// path param tableName
	if err := r.SetPathParam("tableName", o.TableName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
