// Code generated by go-swagger; DO NOT EDIT.

package segment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UploadSegmentAsMultiPartV2Reader is a Reader for the UploadSegmentAsMultiPartV2 structure.
type UploadSegmentAsMultiPartV2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadSegmentAsMultiPartV2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadSegmentAsMultiPartV2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadSegmentAsMultiPartV2BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadSegmentAsMultiPartV2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUploadSegmentAsMultiPartV2Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewUploadSegmentAsMultiPartV2Gone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUploadSegmentAsMultiPartV2PreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadSegmentAsMultiPartV2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUploadSegmentAsMultiPartV2OK creates a UploadSegmentAsMultiPartV2OK with default headers values
func NewUploadSegmentAsMultiPartV2OK() *UploadSegmentAsMultiPartV2OK {
	return &UploadSegmentAsMultiPartV2OK{}
}

/*
UploadSegmentAsMultiPartV2OK describes a response with status code 200, with default header values.

Successfully uploaded segment
*/
type UploadSegmentAsMultiPartV2OK struct {
}

// IsSuccess returns true when this upload segment as multi part v2 o k response has a 2xx status code
func (o *UploadSegmentAsMultiPartV2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload segment as multi part v2 o k response has a 3xx status code
func (o *UploadSegmentAsMultiPartV2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part v2 o k response has a 4xx status code
func (o *UploadSegmentAsMultiPartV2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload segment as multi part v2 o k response has a 5xx status code
func (o *UploadSegmentAsMultiPartV2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this upload segment as multi part v2 o k response a status code equal to that given
func (o *UploadSegmentAsMultiPartV2OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upload segment as multi part v2 o k response
func (o *UploadSegmentAsMultiPartV2OK) Code() int {
	return 200
}

func (o *UploadSegmentAsMultiPartV2OK) Error() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2OK ", 200)
}

func (o *UploadSegmentAsMultiPartV2OK) String() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2OK ", 200)
}

func (o *UploadSegmentAsMultiPartV2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadSegmentAsMultiPartV2BadRequest creates a UploadSegmentAsMultiPartV2BadRequest with default headers values
func NewUploadSegmentAsMultiPartV2BadRequest() *UploadSegmentAsMultiPartV2BadRequest {
	return &UploadSegmentAsMultiPartV2BadRequest{}
}

/*
UploadSegmentAsMultiPartV2BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UploadSegmentAsMultiPartV2BadRequest struct {
}

// IsSuccess returns true when this upload segment as multi part v2 bad request response has a 2xx status code
func (o *UploadSegmentAsMultiPartV2BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload segment as multi part v2 bad request response has a 3xx status code
func (o *UploadSegmentAsMultiPartV2BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part v2 bad request response has a 4xx status code
func (o *UploadSegmentAsMultiPartV2BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload segment as multi part v2 bad request response has a 5xx status code
func (o *UploadSegmentAsMultiPartV2BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upload segment as multi part v2 bad request response a status code equal to that given
func (o *UploadSegmentAsMultiPartV2BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upload segment as multi part v2 bad request response
func (o *UploadSegmentAsMultiPartV2BadRequest) Code() int {
	return 400
}

func (o *UploadSegmentAsMultiPartV2BadRequest) Error() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2BadRequest ", 400)
}

func (o *UploadSegmentAsMultiPartV2BadRequest) String() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2BadRequest ", 400)
}

func (o *UploadSegmentAsMultiPartV2BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadSegmentAsMultiPartV2Forbidden creates a UploadSegmentAsMultiPartV2Forbidden with default headers values
func NewUploadSegmentAsMultiPartV2Forbidden() *UploadSegmentAsMultiPartV2Forbidden {
	return &UploadSegmentAsMultiPartV2Forbidden{}
}

/*
UploadSegmentAsMultiPartV2Forbidden describes a response with status code 403, with default header values.

Segment validation fails
*/
type UploadSegmentAsMultiPartV2Forbidden struct {
}

// IsSuccess returns true when this upload segment as multi part v2 forbidden response has a 2xx status code
func (o *UploadSegmentAsMultiPartV2Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload segment as multi part v2 forbidden response has a 3xx status code
func (o *UploadSegmentAsMultiPartV2Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part v2 forbidden response has a 4xx status code
func (o *UploadSegmentAsMultiPartV2Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload segment as multi part v2 forbidden response has a 5xx status code
func (o *UploadSegmentAsMultiPartV2Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this upload segment as multi part v2 forbidden response a status code equal to that given
func (o *UploadSegmentAsMultiPartV2Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the upload segment as multi part v2 forbidden response
func (o *UploadSegmentAsMultiPartV2Forbidden) Code() int {
	return 403
}

func (o *UploadSegmentAsMultiPartV2Forbidden) Error() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2Forbidden ", 403)
}

func (o *UploadSegmentAsMultiPartV2Forbidden) String() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2Forbidden ", 403)
}

func (o *UploadSegmentAsMultiPartV2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadSegmentAsMultiPartV2Conflict creates a UploadSegmentAsMultiPartV2Conflict with default headers values
func NewUploadSegmentAsMultiPartV2Conflict() *UploadSegmentAsMultiPartV2Conflict {
	return &UploadSegmentAsMultiPartV2Conflict{}
}

/*
UploadSegmentAsMultiPartV2Conflict describes a response with status code 409, with default header values.

Segment already exists or another parallel push in progress
*/
type UploadSegmentAsMultiPartV2Conflict struct {
}

// IsSuccess returns true when this upload segment as multi part v2 conflict response has a 2xx status code
func (o *UploadSegmentAsMultiPartV2Conflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload segment as multi part v2 conflict response has a 3xx status code
func (o *UploadSegmentAsMultiPartV2Conflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part v2 conflict response has a 4xx status code
func (o *UploadSegmentAsMultiPartV2Conflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload segment as multi part v2 conflict response has a 5xx status code
func (o *UploadSegmentAsMultiPartV2Conflict) IsServerError() bool {
	return false
}

// IsCode returns true when this upload segment as multi part v2 conflict response a status code equal to that given
func (o *UploadSegmentAsMultiPartV2Conflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the upload segment as multi part v2 conflict response
func (o *UploadSegmentAsMultiPartV2Conflict) Code() int {
	return 409
}

func (o *UploadSegmentAsMultiPartV2Conflict) Error() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2Conflict ", 409)
}

func (o *UploadSegmentAsMultiPartV2Conflict) String() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2Conflict ", 409)
}

func (o *UploadSegmentAsMultiPartV2Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadSegmentAsMultiPartV2Gone creates a UploadSegmentAsMultiPartV2Gone with default headers values
func NewUploadSegmentAsMultiPartV2Gone() *UploadSegmentAsMultiPartV2Gone {
	return &UploadSegmentAsMultiPartV2Gone{}
}

/*
UploadSegmentAsMultiPartV2Gone describes a response with status code 410, with default header values.

Segment to refresh does not exist
*/
type UploadSegmentAsMultiPartV2Gone struct {
}

// IsSuccess returns true when this upload segment as multi part v2 gone response has a 2xx status code
func (o *UploadSegmentAsMultiPartV2Gone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload segment as multi part v2 gone response has a 3xx status code
func (o *UploadSegmentAsMultiPartV2Gone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part v2 gone response has a 4xx status code
func (o *UploadSegmentAsMultiPartV2Gone) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload segment as multi part v2 gone response has a 5xx status code
func (o *UploadSegmentAsMultiPartV2Gone) IsServerError() bool {
	return false
}

// IsCode returns true when this upload segment as multi part v2 gone response a status code equal to that given
func (o *UploadSegmentAsMultiPartV2Gone) IsCode(code int) bool {
	return code == 410
}

// Code gets the status code for the upload segment as multi part v2 gone response
func (o *UploadSegmentAsMultiPartV2Gone) Code() int {
	return 410
}

func (o *UploadSegmentAsMultiPartV2Gone) Error() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2Gone ", 410)
}

func (o *UploadSegmentAsMultiPartV2Gone) String() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2Gone ", 410)
}

func (o *UploadSegmentAsMultiPartV2Gone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadSegmentAsMultiPartV2PreconditionFailed creates a UploadSegmentAsMultiPartV2PreconditionFailed with default headers values
func NewUploadSegmentAsMultiPartV2PreconditionFailed() *UploadSegmentAsMultiPartV2PreconditionFailed {
	return &UploadSegmentAsMultiPartV2PreconditionFailed{}
}

/*
UploadSegmentAsMultiPartV2PreconditionFailed describes a response with status code 412, with default header values.

CRC check fails
*/
type UploadSegmentAsMultiPartV2PreconditionFailed struct {
}

// IsSuccess returns true when this upload segment as multi part v2 precondition failed response has a 2xx status code
func (o *UploadSegmentAsMultiPartV2PreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload segment as multi part v2 precondition failed response has a 3xx status code
func (o *UploadSegmentAsMultiPartV2PreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part v2 precondition failed response has a 4xx status code
func (o *UploadSegmentAsMultiPartV2PreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload segment as multi part v2 precondition failed response has a 5xx status code
func (o *UploadSegmentAsMultiPartV2PreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this upload segment as multi part v2 precondition failed response a status code equal to that given
func (o *UploadSegmentAsMultiPartV2PreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the upload segment as multi part v2 precondition failed response
func (o *UploadSegmentAsMultiPartV2PreconditionFailed) Code() int {
	return 412
}

func (o *UploadSegmentAsMultiPartV2PreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2PreconditionFailed ", 412)
}

func (o *UploadSegmentAsMultiPartV2PreconditionFailed) String() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2PreconditionFailed ", 412)
}

func (o *UploadSegmentAsMultiPartV2PreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadSegmentAsMultiPartV2InternalServerError creates a UploadSegmentAsMultiPartV2InternalServerError with default headers values
func NewUploadSegmentAsMultiPartV2InternalServerError() *UploadSegmentAsMultiPartV2InternalServerError {
	return &UploadSegmentAsMultiPartV2InternalServerError{}
}

/*
UploadSegmentAsMultiPartV2InternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type UploadSegmentAsMultiPartV2InternalServerError struct {
}

// IsSuccess returns true when this upload segment as multi part v2 internal server error response has a 2xx status code
func (o *UploadSegmentAsMultiPartV2InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload segment as multi part v2 internal server error response has a 3xx status code
func (o *UploadSegmentAsMultiPartV2InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part v2 internal server error response has a 4xx status code
func (o *UploadSegmentAsMultiPartV2InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload segment as multi part v2 internal server error response has a 5xx status code
func (o *UploadSegmentAsMultiPartV2InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upload segment as multi part v2 internal server error response a status code equal to that given
func (o *UploadSegmentAsMultiPartV2InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the upload segment as multi part v2 internal server error response
func (o *UploadSegmentAsMultiPartV2InternalServerError) Code() int {
	return 500
}

func (o *UploadSegmentAsMultiPartV2InternalServerError) Error() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2InternalServerError ", 500)
}

func (o *UploadSegmentAsMultiPartV2InternalServerError) String() string {
	return fmt.Sprintf("[POST /v2/segments][%d] uploadSegmentAsMultiPartV2InternalServerError ", 500)
}

func (o *UploadSegmentAsMultiPartV2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
