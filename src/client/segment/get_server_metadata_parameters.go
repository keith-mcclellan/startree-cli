// Code generated by go-swagger; DO NOT EDIT.

package segment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetServerMetadataParams creates a new GetServerMetadataParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetServerMetadataParams() *GetServerMetadataParams {
	return &GetServerMetadataParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetServerMetadataParamsWithTimeout creates a new GetServerMetadataParams object
// with the ability to set a timeout on a request.
func NewGetServerMetadataParamsWithTimeout(timeout time.Duration) *GetServerMetadataParams {
	return &GetServerMetadataParams{
		timeout: timeout,
	}
}

// NewGetServerMetadataParamsWithContext creates a new GetServerMetadataParams object
// with the ability to set a context for a request.
func NewGetServerMetadataParamsWithContext(ctx context.Context) *GetServerMetadataParams {
	return &GetServerMetadataParams{
		Context: ctx,
	}
}

// NewGetServerMetadataParamsWithHTTPClient creates a new GetServerMetadataParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetServerMetadataParamsWithHTTPClient(client *http.Client) *GetServerMetadataParams {
	return &GetServerMetadataParams{
		HTTPClient: client,
	}
}

/*
GetServerMetadataParams contains all the parameters to send to the API endpoint

	for the get server metadata operation.

	Typically these are written to a http.Request.
*/
type GetServerMetadataParams struct {

	/* Columns.

	   Columns name
	*/
	Columns []string

	/* TableName.

	   Name of the table
	*/
	TableName string

	/* Type.

	   OFFLINE|REALTIME
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get server metadata params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetServerMetadataParams) WithDefaults() *GetServerMetadataParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get server metadata params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetServerMetadataParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get server metadata params
func (o *GetServerMetadataParams) WithTimeout(timeout time.Duration) *GetServerMetadataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get server metadata params
func (o *GetServerMetadataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get server metadata params
func (o *GetServerMetadataParams) WithContext(ctx context.Context) *GetServerMetadataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get server metadata params
func (o *GetServerMetadataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get server metadata params
func (o *GetServerMetadataParams) WithHTTPClient(client *http.Client) *GetServerMetadataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get server metadata params
func (o *GetServerMetadataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithColumns adds the columns to the get server metadata params
func (o *GetServerMetadataParams) WithColumns(columns []string) *GetServerMetadataParams {
	o.SetColumns(columns)
	return o
}

// SetColumns adds the columns to the get server metadata params
func (o *GetServerMetadataParams) SetColumns(columns []string) {
	o.Columns = columns
}

// WithTableName adds the tableName to the get server metadata params
func (o *GetServerMetadataParams) WithTableName(tableName string) *GetServerMetadataParams {
	o.SetTableName(tableName)
	return o
}

// SetTableName adds the tableName to the get server metadata params
func (o *GetServerMetadataParams) SetTableName(tableName string) {
	o.TableName = tableName
}

// WithType adds the typeVar to the get server metadata params
func (o *GetServerMetadataParams) WithType(typeVar *string) *GetServerMetadataParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get server metadata params
func (o *GetServerMetadataParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetServerMetadataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Columns != nil {

		// binding items for columns
		joinedColumns := o.bindParamColumns(reg)

		// query array param columns
		if err := r.SetQueryParam("columns", joinedColumns...); err != nil {
			return err
		}
	}

	// path param tableName
	if err := r.SetPathParam("tableName", o.TableName); err != nil {
		return err
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetServerMetadata binds the parameter columns
func (o *GetServerMetadataParams) bindParamColumns(formats strfmt.Registry) []string {
	columnsIR := o.Columns

	var columnsIC []string
	for _, columnsIIR := range columnsIR { // explode []string

		columnsIIV := columnsIIR // string as string
		columnsIC = append(columnsIC, columnsIIV)
	}

	// items.CollectionFormat: "multi"
	columnsIS := swag.JoinByFormat(columnsIC, "multi")

	return columnsIS
}
