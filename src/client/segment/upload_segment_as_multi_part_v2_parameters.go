// Code generated by go-swagger; DO NOT EDIT.

package segment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"startree.ai/cli/models"
)

// NewUploadSegmentAsMultiPartV2Params creates a new UploadSegmentAsMultiPartV2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadSegmentAsMultiPartV2Params() *UploadSegmentAsMultiPartV2Params {
	return &UploadSegmentAsMultiPartV2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadSegmentAsMultiPartV2ParamsWithTimeout creates a new UploadSegmentAsMultiPartV2Params object
// with the ability to set a timeout on a request.
func NewUploadSegmentAsMultiPartV2ParamsWithTimeout(timeout time.Duration) *UploadSegmentAsMultiPartV2Params {
	return &UploadSegmentAsMultiPartV2Params{
		timeout: timeout,
	}
}

// NewUploadSegmentAsMultiPartV2ParamsWithContext creates a new UploadSegmentAsMultiPartV2Params object
// with the ability to set a context for a request.
func NewUploadSegmentAsMultiPartV2ParamsWithContext(ctx context.Context) *UploadSegmentAsMultiPartV2Params {
	return &UploadSegmentAsMultiPartV2Params{
		Context: ctx,
	}
}

// NewUploadSegmentAsMultiPartV2ParamsWithHTTPClient creates a new UploadSegmentAsMultiPartV2Params object
// with the ability to set a custom HTTPClient for a request.
func NewUploadSegmentAsMultiPartV2ParamsWithHTTPClient(client *http.Client) *UploadSegmentAsMultiPartV2Params {
	return &UploadSegmentAsMultiPartV2Params{
		HTTPClient: client,
	}
}

/*
UploadSegmentAsMultiPartV2Params contains all the parameters to send to the API endpoint

	for the upload segment as multi part v2 operation.

	Typically these are written to a http.Request.
*/
type UploadSegmentAsMultiPartV2Params struct {

	/* AllowRefresh.

	   Whether to refresh if the segment already exists

	   Default: true
	*/
	AllowRefresh *bool

	// Body.
	Body *models.FormDataMultiPart

	/* EnableParallelPushProtection.

	   Whether to enable parallel push protection
	*/
	EnableParallelPushProtection *bool

	/* TableName.

	   Name of the table
	*/
	TableName *string

	/* TableType.

	   Type of the table

	   Default: "OFFLINE"
	*/
	TableType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload segment as multi part v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadSegmentAsMultiPartV2Params) WithDefaults() *UploadSegmentAsMultiPartV2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload segment as multi part v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadSegmentAsMultiPartV2Params) SetDefaults() {
	var (
		allowRefreshDefault = bool(true)

		enableParallelPushProtectionDefault = bool(false)

		tableTypeDefault = string("OFFLINE")
	)

	val := UploadSegmentAsMultiPartV2Params{
		AllowRefresh:                 &allowRefreshDefault,
		EnableParallelPushProtection: &enableParallelPushProtectionDefault,
		TableType:                    &tableTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) WithTimeout(timeout time.Duration) *UploadSegmentAsMultiPartV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) WithContext(ctx context.Context) *UploadSegmentAsMultiPartV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) WithHTTPClient(client *http.Client) *UploadSegmentAsMultiPartV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowRefresh adds the allowRefresh to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) WithAllowRefresh(allowRefresh *bool) *UploadSegmentAsMultiPartV2Params {
	o.SetAllowRefresh(allowRefresh)
	return o
}

// SetAllowRefresh adds the allowRefresh to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) SetAllowRefresh(allowRefresh *bool) {
	o.AllowRefresh = allowRefresh
}

// WithBody adds the body to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) WithBody(body *models.FormDataMultiPart) *UploadSegmentAsMultiPartV2Params {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) SetBody(body *models.FormDataMultiPart) {
	o.Body = body
}

// WithEnableParallelPushProtection adds the enableParallelPushProtection to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) WithEnableParallelPushProtection(enableParallelPushProtection *bool) *UploadSegmentAsMultiPartV2Params {
	o.SetEnableParallelPushProtection(enableParallelPushProtection)
	return o
}

// SetEnableParallelPushProtection adds the enableParallelPushProtection to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) SetEnableParallelPushProtection(enableParallelPushProtection *bool) {
	o.EnableParallelPushProtection = enableParallelPushProtection
}

// WithTableName adds the tableName to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) WithTableName(tableName *string) *UploadSegmentAsMultiPartV2Params {
	o.SetTableName(tableName)
	return o
}

// SetTableName adds the tableName to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) SetTableName(tableName *string) {
	o.TableName = tableName
}

// WithTableType adds the tableType to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) WithTableType(tableType *string) *UploadSegmentAsMultiPartV2Params {
	o.SetTableType(tableType)
	return o
}

// SetTableType adds the tableType to the upload segment as multi part v2 params
func (o *UploadSegmentAsMultiPartV2Params) SetTableType(tableType *string) {
	o.TableType = tableType
}

// WriteToRequest writes these params to a swagger request
func (o *UploadSegmentAsMultiPartV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowRefresh != nil {

		// query param allowRefresh
		var qrAllowRefresh bool

		if o.AllowRefresh != nil {
			qrAllowRefresh = *o.AllowRefresh
		}
		qAllowRefresh := swag.FormatBool(qrAllowRefresh)
		if qAllowRefresh != "" {

			if err := r.SetQueryParam("allowRefresh", qAllowRefresh); err != nil {
				return err
			}
		}
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.EnableParallelPushProtection != nil {

		// query param enableParallelPushProtection
		var qrEnableParallelPushProtection bool

		if o.EnableParallelPushProtection != nil {
			qrEnableParallelPushProtection = *o.EnableParallelPushProtection
		}
		qEnableParallelPushProtection := swag.FormatBool(qrEnableParallelPushProtection)
		if qEnableParallelPushProtection != "" {

			if err := r.SetQueryParam("enableParallelPushProtection", qEnableParallelPushProtection); err != nil {
				return err
			}
		}
	}

	if o.TableName != nil {

		// query param tableName
		var qrTableName string

		if o.TableName != nil {
			qrTableName = *o.TableName
		}
		qTableName := qrTableName
		if qTableName != "" {

			if err := r.SetQueryParam("tableName", qTableName); err != nil {
				return err
			}
		}
	}

	if o.TableType != nil {

		// query param tableType
		var qrTableType string

		if o.TableType != nil {
			qrTableType = *o.TableType
		}
		qTableType := qrTableType
		if qTableType != "" {

			if err := r.SetQueryParam("tableType", qTableType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
