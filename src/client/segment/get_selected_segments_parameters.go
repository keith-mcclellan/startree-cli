// Code generated by go-swagger; DO NOT EDIT.

package segment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSelectedSegmentsParams creates a new GetSelectedSegmentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSelectedSegmentsParams() *GetSelectedSegmentsParams {
	return &GetSelectedSegmentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSelectedSegmentsParamsWithTimeout creates a new GetSelectedSegmentsParams object
// with the ability to set a timeout on a request.
func NewGetSelectedSegmentsParamsWithTimeout(timeout time.Duration) *GetSelectedSegmentsParams {
	return &GetSelectedSegmentsParams{
		timeout: timeout,
	}
}

// NewGetSelectedSegmentsParamsWithContext creates a new GetSelectedSegmentsParams object
// with the ability to set a context for a request.
func NewGetSelectedSegmentsParamsWithContext(ctx context.Context) *GetSelectedSegmentsParams {
	return &GetSelectedSegmentsParams{
		Context: ctx,
	}
}

// NewGetSelectedSegmentsParamsWithHTTPClient creates a new GetSelectedSegmentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSelectedSegmentsParamsWithHTTPClient(client *http.Client) *GetSelectedSegmentsParams {
	return &GetSelectedSegmentsParams{
		HTTPClient: client,
	}
}

/*
GetSelectedSegmentsParams contains all the parameters to send to the API endpoint

	for the get selected segments operation.

	Typically these are written to a http.Request.
*/
type GetSelectedSegmentsParams struct {

	/* EndTimestamp.

	   End timestamp (exclusive)
	*/
	EndTimestamp *string

	/* ExcludeOverlapping.

	   Whether to exclude the segments overlapping with the timestamps, false by default
	*/
	ExcludeOverlapping *bool

	/* StartTimestamp.

	   Start timestamp (inclusive)
	*/
	StartTimestamp *string

	/* TableName.

	   Name of the table
	*/
	TableName string

	/* Type.

	   OFFLINE|REALTIME
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get selected segments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSelectedSegmentsParams) WithDefaults() *GetSelectedSegmentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get selected segments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSelectedSegmentsParams) SetDefaults() {
	var (
		excludeOverlappingDefault = bool(false)
	)

	val := GetSelectedSegmentsParams{
		ExcludeOverlapping: &excludeOverlappingDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get selected segments params
func (o *GetSelectedSegmentsParams) WithTimeout(timeout time.Duration) *GetSelectedSegmentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get selected segments params
func (o *GetSelectedSegmentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get selected segments params
func (o *GetSelectedSegmentsParams) WithContext(ctx context.Context) *GetSelectedSegmentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get selected segments params
func (o *GetSelectedSegmentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get selected segments params
func (o *GetSelectedSegmentsParams) WithHTTPClient(client *http.Client) *GetSelectedSegmentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get selected segments params
func (o *GetSelectedSegmentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTimestamp adds the endTimestamp to the get selected segments params
func (o *GetSelectedSegmentsParams) WithEndTimestamp(endTimestamp *string) *GetSelectedSegmentsParams {
	o.SetEndTimestamp(endTimestamp)
	return o
}

// SetEndTimestamp adds the endTimestamp to the get selected segments params
func (o *GetSelectedSegmentsParams) SetEndTimestamp(endTimestamp *string) {
	o.EndTimestamp = endTimestamp
}

// WithExcludeOverlapping adds the excludeOverlapping to the get selected segments params
func (o *GetSelectedSegmentsParams) WithExcludeOverlapping(excludeOverlapping *bool) *GetSelectedSegmentsParams {
	o.SetExcludeOverlapping(excludeOverlapping)
	return o
}

// SetExcludeOverlapping adds the excludeOverlapping to the get selected segments params
func (o *GetSelectedSegmentsParams) SetExcludeOverlapping(excludeOverlapping *bool) {
	o.ExcludeOverlapping = excludeOverlapping
}

// WithStartTimestamp adds the startTimestamp to the get selected segments params
func (o *GetSelectedSegmentsParams) WithStartTimestamp(startTimestamp *string) *GetSelectedSegmentsParams {
	o.SetStartTimestamp(startTimestamp)
	return o
}

// SetStartTimestamp adds the startTimestamp to the get selected segments params
func (o *GetSelectedSegmentsParams) SetStartTimestamp(startTimestamp *string) {
	o.StartTimestamp = startTimestamp
}

// WithTableName adds the tableName to the get selected segments params
func (o *GetSelectedSegmentsParams) WithTableName(tableName string) *GetSelectedSegmentsParams {
	o.SetTableName(tableName)
	return o
}

// SetTableName adds the tableName to the get selected segments params
func (o *GetSelectedSegmentsParams) SetTableName(tableName string) {
	o.TableName = tableName
}

// WithType adds the typeVar to the get selected segments params
func (o *GetSelectedSegmentsParams) WithType(typeVar *string) *GetSelectedSegmentsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get selected segments params
func (o *GetSelectedSegmentsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetSelectedSegmentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndTimestamp != nil {

		// query param endTimestamp
		var qrEndTimestamp string

		if o.EndTimestamp != nil {
			qrEndTimestamp = *o.EndTimestamp
		}
		qEndTimestamp := qrEndTimestamp
		if qEndTimestamp != "" {

			if err := r.SetQueryParam("endTimestamp", qEndTimestamp); err != nil {
				return err
			}
		}
	}

	if o.ExcludeOverlapping != nil {

		// query param excludeOverlapping
		var qrExcludeOverlapping bool

		if o.ExcludeOverlapping != nil {
			qrExcludeOverlapping = *o.ExcludeOverlapping
		}
		qExcludeOverlapping := swag.FormatBool(qrExcludeOverlapping)
		if qExcludeOverlapping != "" {

			if err := r.SetQueryParam("excludeOverlapping", qExcludeOverlapping); err != nil {
				return err
			}
		}
	}

	if o.StartTimestamp != nil {

		// query param startTimestamp
		var qrStartTimestamp string

		if o.StartTimestamp != nil {
			qrStartTimestamp = *o.StartTimestamp
		}
		qStartTimestamp := qrStartTimestamp
		if qStartTimestamp != "" {

			if err := r.SetQueryParam("startTimestamp", qStartTimestamp); err != nil {
				return err
			}
		}
	}

	// path param tableName
	if err := r.SetPathParam("tableName", o.TableName); err != nil {
		return err
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
