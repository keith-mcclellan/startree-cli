// Code generated by go-swagger; DO NOT EDIT.

package segment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UploadSegmentAsMultiPartReader is a Reader for the UploadSegmentAsMultiPart structure.
type UploadSegmentAsMultiPartReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadSegmentAsMultiPartReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadSegmentAsMultiPartOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadSegmentAsMultiPartBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadSegmentAsMultiPartForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUploadSegmentAsMultiPartConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewUploadSegmentAsMultiPartGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUploadSegmentAsMultiPartPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadSegmentAsMultiPartInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUploadSegmentAsMultiPartOK creates a UploadSegmentAsMultiPartOK with default headers values
func NewUploadSegmentAsMultiPartOK() *UploadSegmentAsMultiPartOK {
	return &UploadSegmentAsMultiPartOK{}
}

/*
UploadSegmentAsMultiPartOK describes a response with status code 200, with default header values.

Successfully uploaded segment
*/
type UploadSegmentAsMultiPartOK struct {
}

// IsSuccess returns true when this upload segment as multi part o k response has a 2xx status code
func (o *UploadSegmentAsMultiPartOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload segment as multi part o k response has a 3xx status code
func (o *UploadSegmentAsMultiPartOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part o k response has a 4xx status code
func (o *UploadSegmentAsMultiPartOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload segment as multi part o k response has a 5xx status code
func (o *UploadSegmentAsMultiPartOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upload segment as multi part o k response a status code equal to that given
func (o *UploadSegmentAsMultiPartOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upload segment as multi part o k response
func (o *UploadSegmentAsMultiPartOK) Code() int {
	return 200
}

func (o *UploadSegmentAsMultiPartOK) Error() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartOK ", 200)
}

func (o *UploadSegmentAsMultiPartOK) String() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartOK ", 200)
}

func (o *UploadSegmentAsMultiPartOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadSegmentAsMultiPartBadRequest creates a UploadSegmentAsMultiPartBadRequest with default headers values
func NewUploadSegmentAsMultiPartBadRequest() *UploadSegmentAsMultiPartBadRequest {
	return &UploadSegmentAsMultiPartBadRequest{}
}

/*
UploadSegmentAsMultiPartBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UploadSegmentAsMultiPartBadRequest struct {
}

// IsSuccess returns true when this upload segment as multi part bad request response has a 2xx status code
func (o *UploadSegmentAsMultiPartBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload segment as multi part bad request response has a 3xx status code
func (o *UploadSegmentAsMultiPartBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part bad request response has a 4xx status code
func (o *UploadSegmentAsMultiPartBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload segment as multi part bad request response has a 5xx status code
func (o *UploadSegmentAsMultiPartBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upload segment as multi part bad request response a status code equal to that given
func (o *UploadSegmentAsMultiPartBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upload segment as multi part bad request response
func (o *UploadSegmentAsMultiPartBadRequest) Code() int {
	return 400
}

func (o *UploadSegmentAsMultiPartBadRequest) Error() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartBadRequest ", 400)
}

func (o *UploadSegmentAsMultiPartBadRequest) String() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartBadRequest ", 400)
}

func (o *UploadSegmentAsMultiPartBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadSegmentAsMultiPartForbidden creates a UploadSegmentAsMultiPartForbidden with default headers values
func NewUploadSegmentAsMultiPartForbidden() *UploadSegmentAsMultiPartForbidden {
	return &UploadSegmentAsMultiPartForbidden{}
}

/*
UploadSegmentAsMultiPartForbidden describes a response with status code 403, with default header values.

Segment validation fails
*/
type UploadSegmentAsMultiPartForbidden struct {
}

// IsSuccess returns true when this upload segment as multi part forbidden response has a 2xx status code
func (o *UploadSegmentAsMultiPartForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload segment as multi part forbidden response has a 3xx status code
func (o *UploadSegmentAsMultiPartForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part forbidden response has a 4xx status code
func (o *UploadSegmentAsMultiPartForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload segment as multi part forbidden response has a 5xx status code
func (o *UploadSegmentAsMultiPartForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this upload segment as multi part forbidden response a status code equal to that given
func (o *UploadSegmentAsMultiPartForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the upload segment as multi part forbidden response
func (o *UploadSegmentAsMultiPartForbidden) Code() int {
	return 403
}

func (o *UploadSegmentAsMultiPartForbidden) Error() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartForbidden ", 403)
}

func (o *UploadSegmentAsMultiPartForbidden) String() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartForbidden ", 403)
}

func (o *UploadSegmentAsMultiPartForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadSegmentAsMultiPartConflict creates a UploadSegmentAsMultiPartConflict with default headers values
func NewUploadSegmentAsMultiPartConflict() *UploadSegmentAsMultiPartConflict {
	return &UploadSegmentAsMultiPartConflict{}
}

/*
UploadSegmentAsMultiPartConflict describes a response with status code 409, with default header values.

Segment already exists or another parallel push in progress
*/
type UploadSegmentAsMultiPartConflict struct {
}

// IsSuccess returns true when this upload segment as multi part conflict response has a 2xx status code
func (o *UploadSegmentAsMultiPartConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload segment as multi part conflict response has a 3xx status code
func (o *UploadSegmentAsMultiPartConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part conflict response has a 4xx status code
func (o *UploadSegmentAsMultiPartConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload segment as multi part conflict response has a 5xx status code
func (o *UploadSegmentAsMultiPartConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this upload segment as multi part conflict response a status code equal to that given
func (o *UploadSegmentAsMultiPartConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the upload segment as multi part conflict response
func (o *UploadSegmentAsMultiPartConflict) Code() int {
	return 409
}

func (o *UploadSegmentAsMultiPartConflict) Error() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartConflict ", 409)
}

func (o *UploadSegmentAsMultiPartConflict) String() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartConflict ", 409)
}

func (o *UploadSegmentAsMultiPartConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadSegmentAsMultiPartGone creates a UploadSegmentAsMultiPartGone with default headers values
func NewUploadSegmentAsMultiPartGone() *UploadSegmentAsMultiPartGone {
	return &UploadSegmentAsMultiPartGone{}
}

/*
UploadSegmentAsMultiPartGone describes a response with status code 410, with default header values.

Segment to refresh does not exist
*/
type UploadSegmentAsMultiPartGone struct {
}

// IsSuccess returns true when this upload segment as multi part gone response has a 2xx status code
func (o *UploadSegmentAsMultiPartGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload segment as multi part gone response has a 3xx status code
func (o *UploadSegmentAsMultiPartGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part gone response has a 4xx status code
func (o *UploadSegmentAsMultiPartGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload segment as multi part gone response has a 5xx status code
func (o *UploadSegmentAsMultiPartGone) IsServerError() bool {
	return false
}

// IsCode returns true when this upload segment as multi part gone response a status code equal to that given
func (o *UploadSegmentAsMultiPartGone) IsCode(code int) bool {
	return code == 410
}

// Code gets the status code for the upload segment as multi part gone response
func (o *UploadSegmentAsMultiPartGone) Code() int {
	return 410
}

func (o *UploadSegmentAsMultiPartGone) Error() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartGone ", 410)
}

func (o *UploadSegmentAsMultiPartGone) String() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartGone ", 410)
}

func (o *UploadSegmentAsMultiPartGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadSegmentAsMultiPartPreconditionFailed creates a UploadSegmentAsMultiPartPreconditionFailed with default headers values
func NewUploadSegmentAsMultiPartPreconditionFailed() *UploadSegmentAsMultiPartPreconditionFailed {
	return &UploadSegmentAsMultiPartPreconditionFailed{}
}

/*
UploadSegmentAsMultiPartPreconditionFailed describes a response with status code 412, with default header values.

CRC check fails
*/
type UploadSegmentAsMultiPartPreconditionFailed struct {
}

// IsSuccess returns true when this upload segment as multi part precondition failed response has a 2xx status code
func (o *UploadSegmentAsMultiPartPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload segment as multi part precondition failed response has a 3xx status code
func (o *UploadSegmentAsMultiPartPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part precondition failed response has a 4xx status code
func (o *UploadSegmentAsMultiPartPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload segment as multi part precondition failed response has a 5xx status code
func (o *UploadSegmentAsMultiPartPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this upload segment as multi part precondition failed response a status code equal to that given
func (o *UploadSegmentAsMultiPartPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the upload segment as multi part precondition failed response
func (o *UploadSegmentAsMultiPartPreconditionFailed) Code() int {
	return 412
}

func (o *UploadSegmentAsMultiPartPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartPreconditionFailed ", 412)
}

func (o *UploadSegmentAsMultiPartPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartPreconditionFailed ", 412)
}

func (o *UploadSegmentAsMultiPartPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadSegmentAsMultiPartInternalServerError creates a UploadSegmentAsMultiPartInternalServerError with default headers values
func NewUploadSegmentAsMultiPartInternalServerError() *UploadSegmentAsMultiPartInternalServerError {
	return &UploadSegmentAsMultiPartInternalServerError{}
}

/*
UploadSegmentAsMultiPartInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type UploadSegmentAsMultiPartInternalServerError struct {
}

// IsSuccess returns true when this upload segment as multi part internal server error response has a 2xx status code
func (o *UploadSegmentAsMultiPartInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload segment as multi part internal server error response has a 3xx status code
func (o *UploadSegmentAsMultiPartInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload segment as multi part internal server error response has a 4xx status code
func (o *UploadSegmentAsMultiPartInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload segment as multi part internal server error response has a 5xx status code
func (o *UploadSegmentAsMultiPartInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upload segment as multi part internal server error response a status code equal to that given
func (o *UploadSegmentAsMultiPartInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the upload segment as multi part internal server error response
func (o *UploadSegmentAsMultiPartInternalServerError) Code() int {
	return 500
}

func (o *UploadSegmentAsMultiPartInternalServerError) Error() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartInternalServerError ", 500)
}

func (o *UploadSegmentAsMultiPartInternalServerError) String() string {
	return fmt.Sprintf("[POST /segments][%d] uploadSegmentAsMultiPartInternalServerError ", 500)
}

func (o *UploadSegmentAsMultiPartInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
