// Code generated by go-swagger; DO NOT EDIT.

package segment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRevertReplaceSegmentsParams creates a new RevertReplaceSegmentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRevertReplaceSegmentsParams() *RevertReplaceSegmentsParams {
	return &RevertReplaceSegmentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRevertReplaceSegmentsParamsWithTimeout creates a new RevertReplaceSegmentsParams object
// with the ability to set a timeout on a request.
func NewRevertReplaceSegmentsParamsWithTimeout(timeout time.Duration) *RevertReplaceSegmentsParams {
	return &RevertReplaceSegmentsParams{
		timeout: timeout,
	}
}

// NewRevertReplaceSegmentsParamsWithContext creates a new RevertReplaceSegmentsParams object
// with the ability to set a context for a request.
func NewRevertReplaceSegmentsParamsWithContext(ctx context.Context) *RevertReplaceSegmentsParams {
	return &RevertReplaceSegmentsParams{
		Context: ctx,
	}
}

// NewRevertReplaceSegmentsParamsWithHTTPClient creates a new RevertReplaceSegmentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewRevertReplaceSegmentsParamsWithHTTPClient(client *http.Client) *RevertReplaceSegmentsParams {
	return &RevertReplaceSegmentsParams{
		HTTPClient: client,
	}
}

/*
RevertReplaceSegmentsParams contains all the parameters to send to the API endpoint

	for the revert replace segments operation.

	Typically these are written to a http.Request.
*/
type RevertReplaceSegmentsParams struct {

	/* ForceRevert.

	   Force revert in case the user knows that the lineage entry is interrupted
	*/
	ForceRevert *bool

	/* SegmentLineageEntryID.

	   Segment lineage entry id to revert
	*/
	SegmentLineageEntryID string

	/* TableName.

	   Name of the table
	*/
	TableName string

	/* Type.

	   OFFLINE|REALTIME
	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the revert replace segments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RevertReplaceSegmentsParams) WithDefaults() *RevertReplaceSegmentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the revert replace segments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RevertReplaceSegmentsParams) SetDefaults() {
	var (
		forceRevertDefault = bool(false)
	)

	val := RevertReplaceSegmentsParams{
		ForceRevert: &forceRevertDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the revert replace segments params
func (o *RevertReplaceSegmentsParams) WithTimeout(timeout time.Duration) *RevertReplaceSegmentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the revert replace segments params
func (o *RevertReplaceSegmentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the revert replace segments params
func (o *RevertReplaceSegmentsParams) WithContext(ctx context.Context) *RevertReplaceSegmentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the revert replace segments params
func (o *RevertReplaceSegmentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the revert replace segments params
func (o *RevertReplaceSegmentsParams) WithHTTPClient(client *http.Client) *RevertReplaceSegmentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the revert replace segments params
func (o *RevertReplaceSegmentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForceRevert adds the forceRevert to the revert replace segments params
func (o *RevertReplaceSegmentsParams) WithForceRevert(forceRevert *bool) *RevertReplaceSegmentsParams {
	o.SetForceRevert(forceRevert)
	return o
}

// SetForceRevert adds the forceRevert to the revert replace segments params
func (o *RevertReplaceSegmentsParams) SetForceRevert(forceRevert *bool) {
	o.ForceRevert = forceRevert
}

// WithSegmentLineageEntryID adds the segmentLineageEntryID to the revert replace segments params
func (o *RevertReplaceSegmentsParams) WithSegmentLineageEntryID(segmentLineageEntryID string) *RevertReplaceSegmentsParams {
	o.SetSegmentLineageEntryID(segmentLineageEntryID)
	return o
}

// SetSegmentLineageEntryID adds the segmentLineageEntryId to the revert replace segments params
func (o *RevertReplaceSegmentsParams) SetSegmentLineageEntryID(segmentLineageEntryID string) {
	o.SegmentLineageEntryID = segmentLineageEntryID
}

// WithTableName adds the tableName to the revert replace segments params
func (o *RevertReplaceSegmentsParams) WithTableName(tableName string) *RevertReplaceSegmentsParams {
	o.SetTableName(tableName)
	return o
}

// SetTableName adds the tableName to the revert replace segments params
func (o *RevertReplaceSegmentsParams) SetTableName(tableName string) {
	o.TableName = tableName
}

// WithType adds the typeVar to the revert replace segments params
func (o *RevertReplaceSegmentsParams) WithType(typeVar string) *RevertReplaceSegmentsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the revert replace segments params
func (o *RevertReplaceSegmentsParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *RevertReplaceSegmentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ForceRevert != nil {

		// query param forceRevert
		var qrForceRevert bool

		if o.ForceRevert != nil {
			qrForceRevert = *o.ForceRevert
		}
		qForceRevert := swag.FormatBool(qrForceRevert)
		if qForceRevert != "" {

			if err := r.SetQueryParam("forceRevert", qForceRevert); err != nil {
				return err
			}
		}
	}

	// query param segmentLineageEntryId
	qrSegmentLineageEntryID := o.SegmentLineageEntryID
	qSegmentLineageEntryID := qrSegmentLineageEntryID
	if qSegmentLineageEntryID != "" {

		if err := r.SetQueryParam("segmentLineageEntryId", qSegmentLineageEntryID); err != nil {
			return err
		}
	}

	// path param tableName
	if err := r.SetPathParam("tableName", o.TableName); err != nil {
		return err
	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {

		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
