// Code generated by go-swagger; DO NOT EDIT.

package segment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new segment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for segment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAllSegments(params *DeleteAllSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllSegmentsOK, error)

	DeleteSegment(params *DeleteSegmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSegmentOK, error)

	DeleteSegments(params *DeleteSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSegmentsOK, error)

	DownloadSegment(params *DownloadSegmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	EndReplaceSegments(params *EndReplaceSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetReloadJobStatus(params *GetReloadJobStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReloadJobStatusOK, error)

	GetSegmentMetadata(params *GetSegmentMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentMetadataOK, error)

	GetSegmentMetadataDeprecated1(params *GetSegmentMetadataDeprecated1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentMetadataDeprecated1OK, error)

	GetSegmentMetadataDeprecated2(params *GetSegmentMetadataDeprecated2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentMetadataDeprecated2OK, error)

	GetSegmentTiers(params *GetSegmentTiersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentTiersOK, error)

	GetSegmentToCrcMap(params *GetSegmentToCrcMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentToCrcMapOK, error)

	GetSegmentToCrcMapDeprecated(params *GetSegmentToCrcMapDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentToCrcMapDeprecatedOK, error)

	GetSegments(params *GetSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentsOK, error)

	GetSelectedSegments(params *GetSelectedSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSelectedSegmentsOK, error)

	GetServerMetadata(params *GetServerMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerMetadataOK, error)

	GetServerToSegmentsMap(params *GetServerToSegmentsMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerToSegmentsMapOK, error)

	GetServerToSegmentsMapDeprecated1(params *GetServerToSegmentsMapDeprecated1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerToSegmentsMapDeprecated1OK, error)

	GetServerToSegmentsMapDeprecated2(params *GetServerToSegmentsMapDeprecated2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerToSegmentsMapDeprecated2OK, error)

	GetTableTiers(params *GetTableTiersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableTiersOK, error)

	ListSegmentLineage(params *ListSegmentLineageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	ReloadAllSegments(params *ReloadAllSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadAllSegmentsOK, error)

	ReloadAllSegmentsDeprecated1(params *ReloadAllSegmentsDeprecated1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadAllSegmentsDeprecated1OK, error)

	ReloadAllSegmentsDeprecated2(params *ReloadAllSegmentsDeprecated2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadAllSegmentsDeprecated2OK, error)

	ReloadSegment(params *ReloadSegmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadSegmentOK, error)

	ReloadSegmentDeprecated1(params *ReloadSegmentDeprecated1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadSegmentDeprecated1OK, error)

	ReloadSegmentDeprecated2(params *ReloadSegmentDeprecated2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadSegmentDeprecated2OK, error)

	ResetSegment(params *ResetSegmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetSegmentOK, error)

	ResetSegments(params *ResetSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetSegmentsOK, error)

	RevertReplaceSegments(params *RevertReplaceSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	StartReplaceSegments(params *StartReplaceSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	UpdateTimeIntervalZK(params *UpdateTimeIntervalZKParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTimeIntervalZKOK, error)

	UploadSegmentAsMultiPart(params *UploadSegmentAsMultiPartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadSegmentAsMultiPartOK, error)

	UploadSegmentAsMultiPartV2(params *UploadSegmentAsMultiPartV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadSegmentAsMultiPartV2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAllSegments deletes all segments

Delete all segments
*/
func (a *Client) DeleteAllSegments(params *DeleteAllSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllSegmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAllSegments",
		Method:             "DELETE",
		PathPattern:        "/segments/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllSegmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAllSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAllSegments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSegment deletes a segment

Delete a segment
*/
func (a *Client) DeleteSegment(params *DeleteSegmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSegmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSegmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSegment",
		Method:             "DELETE",
		PathPattern:        "/segments/{tableName}/{segmentName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSegmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSegmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSegment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSegments deletes the segments in the JSON array payload

Delete the segments in the JSON array payload
*/
func (a *Client) DeleteSegments(params *DeleteSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSegmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSegments",
		Method:             "POST",
		PathPattern:        "/segments/{tableName}/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSegmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSegments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DownloadSegment downloads a segment

Download a segment
*/
func (a *Client) DownloadSegment(params *DownloadSegmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadSegmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadSegment",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/{segmentName}",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadSegmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
EndReplaceSegments ends to replace segments

End to replace segments
*/
func (a *Client) EndReplaceSegments(params *EndReplaceSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndReplaceSegmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "endReplaceSegments",
		Method:             "POST",
		PathPattern:        "/segments/{tableName}/endReplaceSegments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EndReplaceSegmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetReloadJobStatus gets status for a submitted reload operation

Get status for a submitted reload operation
*/
func (a *Client) GetReloadJobStatus(params *GetReloadJobStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReloadJobStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReloadJobStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReloadJobStatus",
		Method:             "GET",
		PathPattern:        "/segments/segmentReloadStatus/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReloadJobStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReloadJobStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReloadJobStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSegmentMetadata gets the metadata for a segment

Get the metadata for a segment
*/
func (a *Client) GetSegmentMetadata(params *GetSegmentMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSegmentMetadata",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/{segmentName}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSegmentMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegmentMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSegmentMetadataDeprecated1 gets the metadata for a segment deprecated use g e t segments table name segment name metadata instead

Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)
*/
func (a *Client) GetSegmentMetadataDeprecated1(params *GetSegmentMetadataDeprecated1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentMetadataDeprecated1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentMetadataDeprecated1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSegmentMetadataDeprecated1",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments/{segmentName}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSegmentMetadataDeprecated1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentMetadataDeprecated1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegmentMetadataDeprecated1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSegmentMetadataDeprecated2 gets the metadata for a segment deprecated use g e t segments table name segment name metadata instead

Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)
*/
func (a *Client) GetSegmentMetadataDeprecated2(params *GetSegmentMetadataDeprecated2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentMetadataDeprecated2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentMetadataDeprecated2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSegmentMetadataDeprecated2",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments/{segmentName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSegmentMetadataDeprecated2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentMetadataDeprecated2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegmentMetadataDeprecated2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSegmentTiers gets storage tiers for the given segment

Get storage tiers for the given segment
*/
func (a *Client) GetSegmentTiers(params *GetSegmentTiersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentTiersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentTiersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSegmentTiers",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/{segmentName}/tiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSegmentTiersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentTiersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegmentTiers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSegmentToCrcMap gets a map from segment to c r c of the segment only apply to o f f l i n e table

Get a map from segment to CRC of the segment (only apply to OFFLINE table)
*/
func (a *Client) GetSegmentToCrcMap(params *GetSegmentToCrcMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentToCrcMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentToCrcMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSegmentToCrcMap",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/crc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSegmentToCrcMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentToCrcMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegmentToCrcMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSegmentToCrcMapDeprecated gets a map from segment to c r c of the segment deprecated use g e t segments table name crc instead

Get a map from segment to CRC of the segment (deprecated, use 'GET /segments/{tableName}/crc' instead)
*/
func (a *Client) GetSegmentToCrcMapDeprecated(params *GetSegmentToCrcMapDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentToCrcMapDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentToCrcMapDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSegmentToCrcMapDeprecated",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments/crc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSegmentToCrcMapDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentToCrcMapDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegmentToCrcMapDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSegments lists all segments an optional exclude replaced segments parameter is used to get the list of segments which has not yet been replaced determined by segment lineage entries and can be queried from the table the value is false by default

List all segments
*/
func (a *Client) GetSegments(params *GetSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSegments",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSegmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSelectedSegments gets the selected segments given the inclusive start and exclusive end timestamps in milliseconds these timestamps will be compared against the minmax values of the time column in each segment if the table is a refresh use case the value of start and end timestamp is voided since there is no time column for refresh use case instead the whole qualified segments will be returned if no timestamps are provided all the qualified segments will be returned for the segments that partially belong to the time range the boolean flag exclude overlapping is introduced in order for user to determine whether to exclude this kind of segments in the response

Get the selected segments given the start and end timestamps in milliseconds
*/
func (a *Client) GetSelectedSegments(params *GetSelectedSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSelectedSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSelectedSegmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSelectedSegments",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/select",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSelectedSegmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSelectedSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSelectedSegments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServerMetadata gets the server metadata for all table segments

Get the server metadata for all table segments
*/
func (a *Client) GetServerMetadata(params *GetServerMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServerMetadata",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServerMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServerToSegmentsMap gets a map from server to segments hosted by the server

Get a map from server to segments hosted by the server
*/
func (a *Client) GetServerToSegmentsMap(params *GetServerToSegmentsMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerToSegmentsMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerToSegmentsMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServerToSegmentsMap",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServerToSegmentsMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerToSegmentsMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerToSegmentsMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServerToSegmentsMapDeprecated1 gets a map from server to segments hosted by the server deprecated use g e t segments table name servers instead

Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)
*/
func (a *Client) GetServerToSegmentsMapDeprecated1(params *GetServerToSegmentsMapDeprecated1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerToSegmentsMapDeprecated1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerToSegmentsMapDeprecated1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServerToSegmentsMapDeprecated1",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServerToSegmentsMapDeprecated1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerToSegmentsMapDeprecated1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerToSegmentsMapDeprecated1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServerToSegmentsMapDeprecated2 gets a map from server to segments hosted by the server deprecated use g e t segments table name servers instead

Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)
*/
func (a *Client) GetServerToSegmentsMapDeprecated2(params *GetServerToSegmentsMapDeprecated2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerToSegmentsMapDeprecated2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerToSegmentsMapDeprecated2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServerToSegmentsMapDeprecated2",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServerToSegmentsMapDeprecated2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerToSegmentsMapDeprecated2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerToSegmentsMapDeprecated2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTableTiers gets storage tier for all segments in the given table

Get storage tier for all segments in the given table
*/
func (a *Client) GetTableTiers(params *GetTableTiersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableTiersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableTiersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTableTiers",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/tiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTableTiersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableTiersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableTiers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSegmentLineage lists segment lineage

List segment lineage in chronologically sorted order
*/
func (a *Client) ListSegmentLineage(params *ListSegmentLineageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSegmentLineageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSegmentLineage",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/lineage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSegmentLineageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
ReloadAllSegments reloads all segments

Reload all segments
*/
func (a *Client) ReloadAllSegments(params *ReloadAllSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadAllSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadAllSegmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reloadAllSegments",
		Method:             "POST",
		PathPattern:        "/segments/{tableName}/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReloadAllSegmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadAllSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadAllSegments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReloadAllSegmentsDeprecated1 reloads all segments deprecated use p o s t segments table name reload instead

Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)
*/
func (a *Client) ReloadAllSegmentsDeprecated1(params *ReloadAllSegmentsDeprecated1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadAllSegmentsDeprecated1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadAllSegmentsDeprecated1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "reloadAllSegmentsDeprecated1",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/segments/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReloadAllSegmentsDeprecated1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadAllSegmentsDeprecated1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadAllSegmentsDeprecated1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReloadAllSegmentsDeprecated2 reloads all segments deprecated use p o s t segments table name reload instead

Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)
*/
func (a *Client) ReloadAllSegmentsDeprecated2(params *ReloadAllSegmentsDeprecated2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadAllSegmentsDeprecated2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadAllSegmentsDeprecated2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "reloadAllSegmentsDeprecated2",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReloadAllSegmentsDeprecated2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadAllSegmentsDeprecated2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadAllSegmentsDeprecated2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReloadSegment reloads a segment

Reload a segment
*/
func (a *Client) ReloadSegment(params *ReloadSegmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadSegmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadSegmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reloadSegment",
		Method:             "POST",
		PathPattern:        "/segments/{tableName}/{segmentName}/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReloadSegmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadSegmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadSegment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReloadSegmentDeprecated1 reloads a segment deprecated use p o s t segments table name segment name reload instead

Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)
*/
func (a *Client) ReloadSegmentDeprecated1(params *ReloadSegmentDeprecated1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadSegmentDeprecated1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadSegmentDeprecated1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "reloadSegmentDeprecated1",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/segments/{segmentName}/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReloadSegmentDeprecated1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadSegmentDeprecated1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadSegmentDeprecated1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReloadSegmentDeprecated2 reloads a segment deprecated use p o s t segments table name segment name reload instead

Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)
*/
func (a *Client) ReloadSegmentDeprecated2(params *ReloadSegmentDeprecated2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadSegmentDeprecated2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadSegmentDeprecated2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "reloadSegmentDeprecated2",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments/{segmentName}/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReloadSegmentDeprecated2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadSegmentDeprecated2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadSegmentDeprecated2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResetSegment resets a segment by first disabling it waiting for external view to stabilize and finally enabling it again

Resets a segment by disabling and then enabling it
*/
func (a *Client) ResetSegment(params *ResetSegmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetSegmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetSegmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resetSegment",
		Method:             "POST",
		PathPattern:        "/segments/{tableNameWithType}/{segmentName}/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResetSegmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetSegmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resetSegment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResetSegments resets all segments when error segments only false or segments with error state when error segments only true of the table by first disabling them waiting for external view to stabilize and finally enabling them

Resets segments by disabling and then enabling them
*/
func (a *Client) ResetSegments(params *ResetSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetSegmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resetSegments",
		Method:             "POST",
		PathPattern:        "/segments/{tableNameWithType}/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResetSegmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resetSegments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevertReplaceSegments reverts segments replacement

Revert segments replacement
*/
func (a *Client) RevertReplaceSegments(params *RevertReplaceSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevertReplaceSegmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revertReplaceSegments",
		Method:             "POST",
		PathPattern:        "/segments/{tableName}/revertReplaceSegments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevertReplaceSegmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
StartReplaceSegments starts to replace segments

Start to replace segments
*/
func (a *Client) StartReplaceSegments(params *StartReplaceSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartReplaceSegmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startReplaceSegments",
		Method:             "POST",
		PathPattern:        "/segments/{tableName}/startReplaceSegments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartReplaceSegmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateTimeIntervalZK updates the start and end time of the segments based on latest schema

Update the start and end time of the segments based on latest schema
*/
func (a *Client) UpdateTimeIntervalZK(params *UpdateTimeIntervalZKParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTimeIntervalZKOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTimeIntervalZKParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTimeIntervalZK",
		Method:             "POST",
		PathPattern:        "/segments/{tableNameWithType}/updateZKTimeInterval",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTimeIntervalZKReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTimeIntervalZKOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTimeIntervalZK: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadSegmentAsMultiPart uploads a segment

Upload a segment as binary
*/
func (a *Client) UploadSegmentAsMultiPart(params *UploadSegmentAsMultiPartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadSegmentAsMultiPartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadSegmentAsMultiPartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadSegmentAsMultiPart",
		Method:             "POST",
		PathPattern:        "/segments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadSegmentAsMultiPartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadSegmentAsMultiPartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadSegmentAsMultiPart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadSegmentAsMultiPartV2 uploads a segment

Upload a segment as binary
*/
func (a *Client) UploadSegmentAsMultiPartV2(params *UploadSegmentAsMultiPartV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadSegmentAsMultiPartV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadSegmentAsMultiPartV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadSegmentAsMultiPartV2",
		Method:             "POST",
		PathPattern:        "/v2/segments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadSegmentAsMultiPartV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadSegmentAsMultiPartV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadSegmentAsMultiPartV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
