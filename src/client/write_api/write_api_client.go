// Code generated by go-swagger; DO NOT EDIT.

package write_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new write api API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for write api API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetWriteConfig(params *GetWriteConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	Insert(params *InsertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	UpdateWriteConfig(params *UpdateWriteConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
GetWriteConfig gets table config for write operation

Gets a config for specific table. May contain Kafka producer configs
*/
func (a *Client) GetWriteConfig(params *GetWriteConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWriteConfig",
		Method:             "GET",
		PathPattern:        "/v1/write/config/{table}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWriteConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Insert inserts by p o s t payload

Insert records into a table
*/
func (a *Client) Insert(params *InsertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insert",
		Method:             "POST",
		PathPattern:        "/v1/write/{table}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InsertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateWriteConfig updates table config for write operation

Gets a config for specific table. May contain Kafka producer configs
*/
func (a *Client) UpdateWriteConfig(params *UpdateWriteConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWriteConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateWriteConfig",
		Method:             "PUT",
		PathPattern:        "/v1/write/config/{table}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWriteConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
