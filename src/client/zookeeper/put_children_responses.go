// Code generated by go-swagger; DO NOT EDIT.

package zookeeper

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutChildrenReader is a Reader for the PutChildren structure.
type PutChildrenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutChildrenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutChildrenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPutChildrenNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPutChildrenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutChildrenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutChildrenOK creates a PutChildrenOK with default headers values
func NewPutChildrenOK() *PutChildrenOK {
	return &PutChildrenOK{}
}

/*
PutChildrenOK describes a response with status code 200, with default header values.

Success
*/
type PutChildrenOK struct {
}

// IsSuccess returns true when this put children o k response has a 2xx status code
func (o *PutChildrenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put children o k response has a 3xx status code
func (o *PutChildrenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put children o k response has a 4xx status code
func (o *PutChildrenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put children o k response has a 5xx status code
func (o *PutChildrenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put children o k response a status code equal to that given
func (o *PutChildrenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put children o k response
func (o *PutChildrenOK) Code() int {
	return 200
}

func (o *PutChildrenOK) Error() string {
	return fmt.Sprintf("[PUT /zk/putChildren][%d] putChildrenOK ", 200)
}

func (o *PutChildrenOK) String() string {
	return fmt.Sprintf("[PUT /zk/putChildren][%d] putChildrenOK ", 200)
}

func (o *PutChildrenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutChildrenNoContent creates a PutChildrenNoContent with default headers values
func NewPutChildrenNoContent() *PutChildrenNoContent {
	return &PutChildrenNoContent{}
}

/*
PutChildrenNoContent describes a response with status code 204, with default header values.

No Content
*/
type PutChildrenNoContent struct {
}

// IsSuccess returns true when this put children no content response has a 2xx status code
func (o *PutChildrenNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put children no content response has a 3xx status code
func (o *PutChildrenNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put children no content response has a 4xx status code
func (o *PutChildrenNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put children no content response has a 5xx status code
func (o *PutChildrenNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put children no content response a status code equal to that given
func (o *PutChildrenNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put children no content response
func (o *PutChildrenNoContent) Code() int {
	return 204
}

func (o *PutChildrenNoContent) Error() string {
	return fmt.Sprintf("[PUT /zk/putChildren][%d] putChildrenNoContent ", 204)
}

func (o *PutChildrenNoContent) String() string {
	return fmt.Sprintf("[PUT /zk/putChildren][%d] putChildrenNoContent ", 204)
}

func (o *PutChildrenNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutChildrenNotFound creates a PutChildrenNotFound with default headers values
func NewPutChildrenNotFound() *PutChildrenNotFound {
	return &PutChildrenNotFound{}
}

/*
PutChildrenNotFound describes a response with status code 404, with default header values.

ZK Path not found
*/
type PutChildrenNotFound struct {
}

// IsSuccess returns true when this put children not found response has a 2xx status code
func (o *PutChildrenNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put children not found response has a 3xx status code
func (o *PutChildrenNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put children not found response has a 4xx status code
func (o *PutChildrenNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put children not found response has a 5xx status code
func (o *PutChildrenNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put children not found response a status code equal to that given
func (o *PutChildrenNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put children not found response
func (o *PutChildrenNotFound) Code() int {
	return 404
}

func (o *PutChildrenNotFound) Error() string {
	return fmt.Sprintf("[PUT /zk/putChildren][%d] putChildrenNotFound ", 404)
}

func (o *PutChildrenNotFound) String() string {
	return fmt.Sprintf("[PUT /zk/putChildren][%d] putChildrenNotFound ", 404)
}

func (o *PutChildrenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutChildrenInternalServerError creates a PutChildrenInternalServerError with default headers values
func NewPutChildrenInternalServerError() *PutChildrenInternalServerError {
	return &PutChildrenInternalServerError{}
}

/*
PutChildrenInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PutChildrenInternalServerError struct {
}

// IsSuccess returns true when this put children internal server error response has a 2xx status code
func (o *PutChildrenInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put children internal server error response has a 3xx status code
func (o *PutChildrenInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put children internal server error response has a 4xx status code
func (o *PutChildrenInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put children internal server error response has a 5xx status code
func (o *PutChildrenInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put children internal server error response a status code equal to that given
func (o *PutChildrenInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the put children internal server error response
func (o *PutChildrenInternalServerError) Code() int {
	return 500
}

func (o *PutChildrenInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /zk/putChildren][%d] putChildrenInternalServerError ", 500)
}

func (o *PutChildrenInternalServerError) String() string {
	return fmt.Sprintf("[PUT /zk/putChildren][%d] putChildrenInternalServerError ", 500)
}

func (o *PutChildrenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
