// Code generated by go-swagger; DO NOT EDIT.

package table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewIngestFromURIParams creates a new IngestFromURIParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewIngestFromURIParams() *IngestFromURIParams {
	return &IngestFromURIParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewIngestFromURIParamsWithTimeout creates a new IngestFromURIParams object
// with the ability to set a timeout on a request.
func NewIngestFromURIParamsWithTimeout(timeout time.Duration) *IngestFromURIParams {
	return &IngestFromURIParams{
		timeout: timeout,
	}
}

// NewIngestFromURIParamsWithContext creates a new IngestFromURIParams object
// with the ability to set a context for a request.
func NewIngestFromURIParamsWithContext(ctx context.Context) *IngestFromURIParams {
	return &IngestFromURIParams{
		Context: ctx,
	}
}

// NewIngestFromURIParamsWithHTTPClient creates a new IngestFromURIParams object
// with the ability to set a custom HTTPClient for a request.
func NewIngestFromURIParamsWithHTTPClient(client *http.Client) *IngestFromURIParams {
	return &IngestFromURIParams{
		HTTPClient: client,
	}
}

/*
IngestFromURIParams contains all the parameters to send to the API endpoint

	for the ingest from URI operation.

	Typically these are written to a http.Request.
*/
type IngestFromURIParams struct {

	/* BatchConfigMapStr.

	   Batch config Map as json string. Must pass inputFormat, and optionally input FS properties. e.g. {"inputFormat":"json"}
	*/
	BatchConfigMapStr string

	/* SourceURIStr.

	   URI of file to upload
	*/
	SourceURIStr string

	/* TableNameWithType.

	   Name of the table to upload the file to
	*/
	TableNameWithType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the ingest from URI params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IngestFromURIParams) WithDefaults() *IngestFromURIParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the ingest from URI params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IngestFromURIParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the ingest from URI params
func (o *IngestFromURIParams) WithTimeout(timeout time.Duration) *IngestFromURIParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ingest from URI params
func (o *IngestFromURIParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ingest from URI params
func (o *IngestFromURIParams) WithContext(ctx context.Context) *IngestFromURIParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ingest from URI params
func (o *IngestFromURIParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ingest from URI params
func (o *IngestFromURIParams) WithHTTPClient(client *http.Client) *IngestFromURIParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ingest from URI params
func (o *IngestFromURIParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBatchConfigMapStr adds the batchConfigMapStr to the ingest from URI params
func (o *IngestFromURIParams) WithBatchConfigMapStr(batchConfigMapStr string) *IngestFromURIParams {
	o.SetBatchConfigMapStr(batchConfigMapStr)
	return o
}

// SetBatchConfigMapStr adds the batchConfigMapStr to the ingest from URI params
func (o *IngestFromURIParams) SetBatchConfigMapStr(batchConfigMapStr string) {
	o.BatchConfigMapStr = batchConfigMapStr
}

// WithSourceURIStr adds the sourceURIStr to the ingest from URI params
func (o *IngestFromURIParams) WithSourceURIStr(sourceURIStr string) *IngestFromURIParams {
	o.SetSourceURIStr(sourceURIStr)
	return o
}

// SetSourceURIStr adds the sourceUriStr to the ingest from URI params
func (o *IngestFromURIParams) SetSourceURIStr(sourceURIStr string) {
	o.SourceURIStr = sourceURIStr
}

// WithTableNameWithType adds the tableNameWithType to the ingest from URI params
func (o *IngestFromURIParams) WithTableNameWithType(tableNameWithType string) *IngestFromURIParams {
	o.SetTableNameWithType(tableNameWithType)
	return o
}

// SetTableNameWithType adds the tableNameWithType to the ingest from URI params
func (o *IngestFromURIParams) SetTableNameWithType(tableNameWithType string) {
	o.TableNameWithType = tableNameWithType
}

// WriteToRequest writes these params to a swagger request
func (o *IngestFromURIParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param batchConfigMapStr
	qrBatchConfigMapStr := o.BatchConfigMapStr
	qBatchConfigMapStr := qrBatchConfigMapStr
	if qBatchConfigMapStr != "" {

		if err := r.SetQueryParam("batchConfigMapStr", qBatchConfigMapStr); err != nil {
			return err
		}
	}

	// query param sourceURIStr
	qrSourceURIStr := o.SourceURIStr
	qSourceURIStr := qrSourceURIStr
	if qSourceURIStr != "" {

		if err := r.SetQueryParam("sourceURIStr", qSourceURIStr); err != nil {
			return err
		}
	}

	// query param tableNameWithType
	qrTableNameWithType := o.TableNameWithType
	qTableNameWithType := qrTableNameWithType
	if qTableNameWithType != "" {

		if err := r.SetQueryParam("tableNameWithType", qTableNameWithType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
