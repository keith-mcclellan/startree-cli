// Code generated by go-swagger; DO NOT EDIT.

package table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAssignInstancesParams creates a new AssignInstancesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAssignInstancesParams() *AssignInstancesParams {
	return &AssignInstancesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAssignInstancesParamsWithTimeout creates a new AssignInstancesParams object
// with the ability to set a timeout on a request.
func NewAssignInstancesParamsWithTimeout(timeout time.Duration) *AssignInstancesParams {
	return &AssignInstancesParams{
		timeout: timeout,
	}
}

// NewAssignInstancesParamsWithContext creates a new AssignInstancesParams object
// with the ability to set a context for a request.
func NewAssignInstancesParamsWithContext(ctx context.Context) *AssignInstancesParams {
	return &AssignInstancesParams{
		Context: ctx,
	}
}

// NewAssignInstancesParamsWithHTTPClient creates a new AssignInstancesParams object
// with the ability to set a custom HTTPClient for a request.
func NewAssignInstancesParamsWithHTTPClient(client *http.Client) *AssignInstancesParams {
	return &AssignInstancesParams{
		HTTPClient: client,
	}
}

/*
AssignInstancesParams contains all the parameters to send to the API endpoint

	for the assign instances operation.

	Typically these are written to a http.Request.
*/
type AssignInstancesParams struct {

	/* DryRun.

	   Whether to do dry-run
	*/
	DryRun *bool

	/* TableName.

	   Name of the table
	*/
	TableName string

	/* Type.

	   OFFLINE|CONSUMING|COMPLETED
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the assign instances params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AssignInstancesParams) WithDefaults() *AssignInstancesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the assign instances params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AssignInstancesParams) SetDefaults() {
	var (
		dryRunDefault = bool(false)
	)

	val := AssignInstancesParams{
		DryRun: &dryRunDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the assign instances params
func (o *AssignInstancesParams) WithTimeout(timeout time.Duration) *AssignInstancesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the assign instances params
func (o *AssignInstancesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the assign instances params
func (o *AssignInstancesParams) WithContext(ctx context.Context) *AssignInstancesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the assign instances params
func (o *AssignInstancesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the assign instances params
func (o *AssignInstancesParams) WithHTTPClient(client *http.Client) *AssignInstancesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the assign instances params
func (o *AssignInstancesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDryRun adds the dryRun to the assign instances params
func (o *AssignInstancesParams) WithDryRun(dryRun *bool) *AssignInstancesParams {
	o.SetDryRun(dryRun)
	return o
}

// SetDryRun adds the dryRun to the assign instances params
func (o *AssignInstancesParams) SetDryRun(dryRun *bool) {
	o.DryRun = dryRun
}

// WithTableName adds the tableName to the assign instances params
func (o *AssignInstancesParams) WithTableName(tableName string) *AssignInstancesParams {
	o.SetTableName(tableName)
	return o
}

// SetTableName adds the tableName to the assign instances params
func (o *AssignInstancesParams) SetTableName(tableName string) {
	o.TableName = tableName
}

// WithType adds the typeVar to the assign instances params
func (o *AssignInstancesParams) WithType(typeVar *string) *AssignInstancesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the assign instances params
func (o *AssignInstancesParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *AssignInstancesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DryRun != nil {

		// query param dryRun
		var qrDryRun bool

		if o.DryRun != nil {
			qrDryRun = *o.DryRun
		}
		qDryRun := swag.FormatBool(qrDryRun)
		if qDryRun != "" {

			if err := r.SetQueryParam("dryRun", qDryRun); err != nil {
				return err
			}
		}
	}

	// path param tableName
	if err := r.SetPathParam("tableName", o.TableName); err != nil {
		return err
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
