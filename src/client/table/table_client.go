// Code generated by go-swagger; DO NOT EDIT.

package table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new table API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for table API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddConfig(params *AddConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddConfigOK, error)

	AddTable(params *AddTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddTableOK, error)

	AlterTableStateOrListTableConfig(params *AlterTableStateOrListTableConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AlterTableStateOrListTableConfigOK, error)

	AssignInstances(params *AssignInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssignInstancesOK, error)

	CheckTableConfig(params *CheckTableConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckTableConfigOK, error)

	DeleteConfig(params *DeleteConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteConfigOK, error)

	DeleteTable(params *DeleteTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTableOK, error)

	DeleteTimeBoundary(params *DeleteTimeBoundaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTimeBoundaryOK, error)

	ForceCommit(params *ForceCommitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForceCommitOK, error)

	GetConfig(params *GetConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConfigOK, error)

	GetConsumingSegmentsInfo(params *GetConsumingSegmentsInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConsumingSegmentsInfoOK, error)

	GetControllerJobs(params *GetControllerJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetControllerJobsOK, error)

	GetExternalView(params *GetExternalViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExternalViewOK, error)

	GetForceCommitJobStatus(params *GetForceCommitJobStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetForceCommitJobStatusOK, error)

	GetIdealState(params *GetIdealStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIdealStateOK, error)

	GetInstancePartitions(params *GetInstancePartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstancePartitionsOK, error)

	GetLiveBrokers(params *GetLiveBrokersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLiveBrokersOK, error)

	GetLiveBrokersForTable(params *GetLiveBrokersForTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLiveBrokersForTableOK, error)

	GetPauseStatus(params *GetPauseStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetTableAggregateMetadata(params *GetTableAggregateMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableAggregateMetadataOK, error)

	GetTableInstances(params *GetTableInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableInstancesOK, error)

	GetTableSize(params *GetTableSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableSizeOK, error)

	GetTableState(params *GetTableStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableStateOK, error)

	GetTableStats(params *GetTableStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableStatsOK, error)

	GetTableStatus(params *GetTableStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableStatusOK, error)

	IngestFromFile(params *IngestFromFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	IngestFromURI(params *IngestFromURIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	ListConfigs(params *ListConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConfigsOK, error)

	ListTables(params *ListTablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTablesOK, error)

	PauseConsumption(params *PauseConsumptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	Put(params *PutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutOK, error)

	Rebalance(params *RebalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RebalanceOK, error)

	RebuildBrokerResource(params *RebuildBrokerResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RebuildBrokerResourceOK, error)

	RecommendConfig(params *RecommendConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecommendConfigOK, error)

	RemoveInstancePartitions(params *RemoveInstancePartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveInstancePartitionsOK, error)

	ReplaceInstance(params *ReplaceInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceInstanceOK, error)

	ResumeConsumption(params *ResumeConsumptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	SetInstancePartitions(params *SetInstancePartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetInstancePartitionsOK, error)

	SetTimeBoundary(params *SetTimeBoundaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetTimeBoundaryOK, error)

	UpdateConfig(params *UpdateConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateConfigOK, error)

	UpdateIndexingConfig(params *UpdateIndexingConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIndexingConfigOK, error)

	UpdateTableConfig(params *UpdateTableConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTableConfigOK, error)

	UpdateTableMetadata(params *UpdateTableMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTableMetadataOK, error)

	ValidateConfig(params *ValidateConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateConfigOK, error)

	ValidateTableAndSchema(params *ValidateTableAndSchemaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateTableAndSchemaOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddConfig adds the table configs using the table configs str json

Add the TableConfigs using the tableConfigsStr json
*/
func (a *Client) AddConfig(params *AddConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addConfig",
		Method:             "POST",
		PathPattern:        "/tableConfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddTable adds a table

Adds a table
*/
func (a *Client) AddTable(params *AddTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addTable",
		Method:             "POST",
		PathPattern:        "/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AlterTableStateOrListTableConfig gets enable disable drop a table

Get/Enable/Disable/Drop a table. If table name is the only parameter specified , the tableconfig will be printed
*/
func (a *Client) AlterTableStateOrListTableConfig(params *AlterTableStateOrListTableConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AlterTableStateOrListTableConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlterTableStateOrListTableConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "alterTableStateOrListTableConfig",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlterTableStateOrListTableConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlterTableStateOrListTableConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for alterTableStateOrListTableConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssignInstances assigns server instances to a table
*/
func (a *Client) AssignInstances(params *AssignInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssignInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignInstances",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/assignInstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CheckTableConfig validates table config for a table

This API returns the table config that matches the one you get from 'GET /tables/{tableName}'. This allows us to validate table config before apply.
*/
func (a *Client) CheckTableConfig(params *CheckTableConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckTableConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckTableConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkTableConfig",
		Method:             "POST",
		PathPattern:        "/tables/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckTableConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckTableConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkTableConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteConfig deletes the table configs

Delete the TableConfigs
*/
func (a *Client) DeleteConfig(params *DeleteConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteConfig",
		Method:             "DELETE",
		PathPattern:        "/tableConfigs/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTable deletes a table

Deletes a table
*/
func (a *Client) DeleteTable(params *DeleteTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTable",
		Method:             "DELETE",
		PathPattern:        "/tables/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTimeBoundary deletes hybrid table query time boundary

Delete hybrid table query time boundary
*/
func (a *Client) DeleteTimeBoundary(params *DeleteTimeBoundaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTimeBoundaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTimeBoundaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTimeBoundary",
		Method:             "DELETE",
		PathPattern:        "/tables/{tableName}/timeBoundary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTimeBoundaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTimeBoundaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTimeBoundary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ForceCommit forces commit the current consuming segments

Force commit the current segments in consuming state and restart consumption. This should be used after schema/table config changes. Please note that this is an asynchronous operation, and 200 response does not mean it has actually been done already
*/
func (a *Client) ForceCommit(params *ForceCommitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForceCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForceCommitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "forceCommit",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/forceCommit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ForceCommitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForceCommitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forceCommit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConfig gets the table configs for a given raw table name

Get the TableConfigs for a given raw tableName
*/
func (a *Client) GetConfig(params *GetConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConfig",
		Method:             "GET",
		PathPattern:        "/tableConfigs/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConsumingSegmentsInfo returns state of consuming segments

Gets the status of consumers from all servers.Note that the partitionToOffsetMap has been deprecated and will be removed in the next release. The info is now embedded within each partition's state as currentOffsetsMap.
*/
func (a *Client) GetConsumingSegmentsInfo(params *GetConsumingSegmentsInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConsumingSegmentsInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsumingSegmentsInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConsumingSegmentsInfo",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/consumingSegmentsInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConsumingSegmentsInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConsumingSegmentsInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConsumingSegmentsInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetControllerJobs gets list of controller jobs for this table

Get list of controller jobs for this table
*/
func (a *Client) GetControllerJobs(params *GetControllerJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetControllerJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getControllerJobs",
		Method:             "GET",
		PathPattern:        "/table/{tableName}/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetControllerJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetControllerJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getControllerJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExternalView gets table external view

Get table external view
*/
func (a *Client) GetExternalView(params *GetExternalViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExternalViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExternalViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getExternalView",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/externalview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExternalViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExternalView: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetForceCommitJobStatus gets status for a submitted force commit operation

Get status for a submitted force commit operation
*/
func (a *Client) GetForceCommitJobStatus(params *GetForceCommitJobStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetForceCommitJobStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetForceCommitJobStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getForceCommitJobStatus",
		Method:             "GET",
		PathPattern:        "/tables/forceCommitStatus/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetForceCommitJobStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetForceCommitJobStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getForceCommitJobStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIdealState gets table ideal state

Get table ideal state
*/
func (a *Client) GetIdealState(params *GetIdealStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIdealStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIdealStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIdealState",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/idealstate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdealStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIdealStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIdealState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInstancePartitions gets the instance partitions
*/
func (a *Client) GetInstancePartitions(params *GetInstancePartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstancePartitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancePartitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstancePartitions",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/instancePartitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancePartitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstancePartitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstancePartitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLiveBrokers lists tables to live brokers mappings

List tables to live brokers mappings based on EV
*/
func (a *Client) GetLiveBrokers(params *GetLiveBrokersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLiveBrokersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLiveBrokersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLiveBrokers",
		Method:             "GET",
		PathPattern:        "/tables/livebrokers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLiveBrokersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLiveBrokersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLiveBrokers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLiveBrokersForTable lists the brokers serving a table

List live brokers of the given table based on EV
*/
func (a *Client) GetLiveBrokersForTable(params *GetLiveBrokersForTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLiveBrokersForTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLiveBrokersForTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLiveBrokersForTable",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/livebrokers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLiveBrokersForTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLiveBrokersForTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLiveBrokersForTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPauseStatus returns pause status of a realtime table

Return pause status of a realtime table along with list of consuming segments.
*/
func (a *Client) GetPauseStatus(params *GetPauseStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPauseStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPauseStatus",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/pauseStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPauseStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetTableAggregateMetadata gets the aggregate metadata of all segments for a table

Get the aggregate metadata of all segments for a table
*/
func (a *Client) GetTableAggregateMetadata(params *GetTableAggregateMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableAggregateMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableAggregateMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTableAggregateMetadata",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTableAggregateMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableAggregateMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableAggregateMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTableInstances lists table instances

List instances of the given table
*/
func (a *Client) GetTableInstances(params *GetTableInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTableInstances",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTableInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTableSize reads table sizes

Get table size details. Table size is the size of untarred segments including replication
*/
func (a *Client) GetTableSize(params *GetTableSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableSizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTableSize",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTableSizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableSizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableSize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTableState gets current table state

Get current table state
*/
func (a *Client) GetTableState(params *GetTableStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTableState",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTableStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTableStats tables stats

Provides metadata info/stats about the table.
*/
func (a *Client) GetTableStats(params *GetTableStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTableStats",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTableStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTableStatus tables status

Provides status of the table including ingestion status
*/
func (a *Client) GetTableStatus(params *GetTableStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTableStatus",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTableStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	 IngestFromFile ingests a file

	 Creates a segment using given file and pushes it to Pinot.
	All steps happen on the controller. This API is NOT meant for production environments/large input files.
	Example usage (query params need encoding):

```
curl -X POST -F file=@data.json -H "Content-Type: multipart/form-data" "http://localhost:9000/ingestFromFile?tableNameWithType=foo_OFFLINE&

	batchConfigMapStr={
	  "inputFormat":"csv",
	  "recordReader.prop.delimiter":"|"
	}"

```
*/
func (a *Client) IngestFromFile(params *IngestFromFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIngestFromFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ingestFromFile",
		Method:             "POST",
		PathPattern:        "/ingestFromFile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IngestFromFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
	 IngestFromURI ingests from the given URI

	 Creates a segment using file at the given URI and pushes it to Pinot.
	All steps happen on the controller. This API is NOT meant for production environments/large input files.

Example usage (query params need encoding):
```
curl -X POST "http://localhost:9000/ingestFromURI?tableNameWithType=foo_OFFLINE

	&batchConfigMapStr={
	  "inputFormat":"json",
	  "input.fs.className":"org.apache.pinot.plugin.filesystem.S3PinotFS",
	  "input.fs.prop.region":"us-central",
	  "input.fs.prop.accessKey":"foo",
	  "input.fs.prop.secretKey":"bar"
	}

&sourceURIStr=s3://test.bucket/path/to/json/data/data.json"
```
*/
func (a *Client) IngestFromURI(params *IngestFromURIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIngestFromURIParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ingestFromURI",
		Method:             "POST",
		PathPattern:        "/ingestFromURI",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IngestFromURIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
ListConfigs lists all table configs in cluster

Lists all TableConfigs in cluster
*/
func (a *Client) ListConfigs(params *ListConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listConfigs",
		Method:             "GET",
		PathPattern:        "/tableConfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListConfigsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listConfigs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTables lists all tables in cluster

Lists all tables in cluster
*/
func (a *Client) ListTables(params *ListTablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTables",
		Method:             "GET",
		PathPattern:        "/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PauseConsumption pauses consumption of a realtime table

Pause the consumption of a realtime table
*/
func (a *Client) PauseConsumption(params *PauseConsumptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPauseConsumptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pauseConsumption",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/pauseConsumption",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PauseConsumptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Put updates segments configuration

Updates segmentsConfig section (validation and retention) of a table
*/
func (a *Client) Put(params *PutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "put",
		Method:             "PUT",
		PathPattern:        "/tables/{tableName}/segmentConfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Rebalance rebalances a table reassign instances and segments for a table

Rebalances a table (reassign instances and segments for a table)
*/
func (a *Client) Rebalance(params *RebalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RebalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebalanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rebalance",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/rebalance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RebalanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RebalanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rebalance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RebuildBrokerResource rebuilds broker resource for table

when new brokers are added
*/
func (a *Client) RebuildBrokerResource(params *RebuildBrokerResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RebuildBrokerResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebuildBrokerResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rebuildBrokerResource",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/rebuildBrokerResourceFromHelixTags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RebuildBrokerResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RebuildBrokerResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rebuildBrokerResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RecommendConfig recommends config

Recommend a config with input json
*/
func (a *Client) RecommendConfig(params *RecommendConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecommendConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecommendConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "recommendConfig",
		Method:             "PUT",
		PathPattern:        "/tables/recommender",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RecommendConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecommendConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for recommendConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveInstancePartitions removes the instance partitions
*/
func (a *Client) RemoveInstancePartitions(params *RemoveInstancePartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveInstancePartitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveInstancePartitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeInstancePartitions",
		Method:             "DELETE",
		PathPattern:        "/tables/{tableName}/instancePartitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveInstancePartitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveInstancePartitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeInstancePartitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReplaceInstance replaces an instance in the instance partitions
*/
func (a *Client) ReplaceInstance(params *ReplaceInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceInstance",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/replaceInstance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResumeConsumption resumes consumption of a realtime table

Resume the consumption for a realtime table. ConsumeFrom parameter indicates from which offsets consumption should resume. If consumeFrom parameter is not provided, consumption continues based on the offsets in segment ZK metadata, and in case the offsets are already gone, the first available offsets are picked to minimize the data loss.
*/
func (a *Client) ResumeConsumption(params *ResumeConsumptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeConsumptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resumeConsumption",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/resumeConsumption",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResumeConsumptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
SetInstancePartitions creates update the instance partitions
*/
func (a *Client) SetInstancePartitions(params *SetInstancePartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetInstancePartitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetInstancePartitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setInstancePartitions",
		Method:             "PUT",
		PathPattern:        "/tables/{tableName}/instancePartitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetInstancePartitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetInstancePartitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setInstancePartitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetTimeBoundary sets hybrid table query time boundary based on offline segments metadata

Set hybrid table query time boundary based on offline segments' metadata
*/
func (a *Client) SetTimeBoundary(params *SetTimeBoundaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetTimeBoundaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTimeBoundaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setTimeBoundary",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/timeBoundary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetTimeBoundaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetTimeBoundaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setTimeBoundary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateConfig updates the table configs provided by the table configs str json

Update the TableConfigs provided by the tableConfigsStr json
*/
func (a *Client) UpdateConfig(params *UpdateConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateConfig",
		Method:             "PUT",
		PathPattern:        "/tableConfigs/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIndexingConfig updates table indexing configuration
*/
func (a *Client) UpdateIndexingConfig(params *UpdateIndexingConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIndexingConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIndexingConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateIndexingConfig",
		Method:             "PUT",
		PathPattern:        "/tables/{tableName}/indexingConfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIndexingConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIndexingConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateIndexingConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTableConfig updates table config for a table

Updates table config for a table
*/
func (a *Client) UpdateTableConfig(params *UpdateTableConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTableConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTableConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTableConfig",
		Method:             "PUT",
		PathPattern:        "/tables/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTableConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTableConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTableConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTableMetadata updates table metadata

Updates table configuration
*/
func (a *Client) UpdateTableMetadata(params *UpdateTableMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTableMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTableMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTableMetadata",
		Method:             "PUT",
		PathPattern:        "/tables/{tableName}/metadataConfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTableMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTableMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTableMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateConfig validates the table configs

Validate the TableConfigs
*/
func (a *Client) ValidateConfig(params *ValidateConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateConfig",
		Method:             "POST",
		PathPattern:        "/tableConfigs/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateTableAndSchema validates table config for a table along with specified schema

Deprecated. Use /tableConfigs/validate instead.Validate given table config and schema. If specified schema is null, attempt to retrieve schema using the table name. This API returns the table config that matches the one you get from 'GET /tables/{tableName}'. This allows us to validate table config before apply.
*/
func (a *Client) ValidateTableAndSchema(params *ValidateTableAndSchemaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateTableAndSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateTableAndSchemaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateTableAndSchema",
		Method:             "POST",
		PathPattern:        "/tables/validateTableAndSchema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateTableAndSchemaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateTableAndSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateTableAndSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
