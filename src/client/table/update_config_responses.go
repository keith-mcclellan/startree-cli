// Code generated by go-swagger; DO NOT EDIT.

package table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"startree.ai/cli/models"
)

// UpdateConfigReader is a Reader for the UpdateConfig structure.
type UpdateConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateConfigOK creates a UpdateConfigOK with default headers values
func NewUpdateConfigOK() *UpdateConfigOK {
	return &UpdateConfigOK{}
}

/*
UpdateConfigOK describes a response with status code 200, with default header values.

successful operation
*/
type UpdateConfigOK struct {
	Payload *models.ConfigSuccessResponse
}

// IsSuccess returns true when this update config o k response has a 2xx status code
func (o *UpdateConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update config o k response has a 3xx status code
func (o *UpdateConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update config o k response has a 4xx status code
func (o *UpdateConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update config o k response has a 5xx status code
func (o *UpdateConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update config o k response a status code equal to that given
func (o *UpdateConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update config o k response
func (o *UpdateConfigOK) Code() int {
	return 200
}

func (o *UpdateConfigOK) Error() string {
	return fmt.Sprintf("[PUT /tableConfigs/{tableName}][%d] updateConfigOK  %+v", 200, o.Payload)
}

func (o *UpdateConfigOK) String() string {
	return fmt.Sprintf("[PUT /tableConfigs/{tableName}][%d] updateConfigOK  %+v", 200, o.Payload)
}

func (o *UpdateConfigOK) GetPayload() *models.ConfigSuccessResponse {
	return o.Payload
}

func (o *UpdateConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConfigSuccessResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
