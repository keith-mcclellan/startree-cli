// Code generated by go-swagger; DO NOT EDIT.

package upsert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEstimateHeapUsageParams creates a new EstimateHeapUsageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEstimateHeapUsageParams() *EstimateHeapUsageParams {
	return &EstimateHeapUsageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEstimateHeapUsageParamsWithTimeout creates a new EstimateHeapUsageParams object
// with the ability to set a timeout on a request.
func NewEstimateHeapUsageParamsWithTimeout(timeout time.Duration) *EstimateHeapUsageParams {
	return &EstimateHeapUsageParams{
		timeout: timeout,
	}
}

// NewEstimateHeapUsageParamsWithContext creates a new EstimateHeapUsageParams object
// with the ability to set a context for a request.
func NewEstimateHeapUsageParamsWithContext(ctx context.Context) *EstimateHeapUsageParams {
	return &EstimateHeapUsageParams{
		Context: ctx,
	}
}

// NewEstimateHeapUsageParamsWithHTTPClient creates a new EstimateHeapUsageParams object
// with the ability to set a custom HTTPClient for a request.
func NewEstimateHeapUsageParamsWithHTTPClient(client *http.Client) *EstimateHeapUsageParams {
	return &EstimateHeapUsageParams{
		HTTPClient: client,
	}
}

/*
EstimateHeapUsageParams contains all the parameters to send to the API endpoint

	for the estimate heap usage operation.

	Typically these are written to a http.Request.
*/
type EstimateHeapUsageParams struct {

	// Body.
	Body string

	/* Cardinality.

	   cardinality

	   Format: int64
	*/
	Cardinality int64

	/* NumPartitions.

	   numPartitions

	   Format: int32
	   Default: -1
	*/
	NumPartitions *int32

	/* PrimaryKeySize.

	   primaryKeySize

	   Format: int32
	   Default: -1
	*/
	PrimaryKeySize *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the estimate heap usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EstimateHeapUsageParams) WithDefaults() *EstimateHeapUsageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the estimate heap usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EstimateHeapUsageParams) SetDefaults() {
	var (
		numPartitionsDefault = int32(-1)

		primaryKeySizeDefault = int32(-1)
	)

	val := EstimateHeapUsageParams{
		NumPartitions:  &numPartitionsDefault,
		PrimaryKeySize: &primaryKeySizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the estimate heap usage params
func (o *EstimateHeapUsageParams) WithTimeout(timeout time.Duration) *EstimateHeapUsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the estimate heap usage params
func (o *EstimateHeapUsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the estimate heap usage params
func (o *EstimateHeapUsageParams) WithContext(ctx context.Context) *EstimateHeapUsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the estimate heap usage params
func (o *EstimateHeapUsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the estimate heap usage params
func (o *EstimateHeapUsageParams) WithHTTPClient(client *http.Client) *EstimateHeapUsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the estimate heap usage params
func (o *EstimateHeapUsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the estimate heap usage params
func (o *EstimateHeapUsageParams) WithBody(body string) *EstimateHeapUsageParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the estimate heap usage params
func (o *EstimateHeapUsageParams) SetBody(body string) {
	o.Body = body
}

// WithCardinality adds the cardinality to the estimate heap usage params
func (o *EstimateHeapUsageParams) WithCardinality(cardinality int64) *EstimateHeapUsageParams {
	o.SetCardinality(cardinality)
	return o
}

// SetCardinality adds the cardinality to the estimate heap usage params
func (o *EstimateHeapUsageParams) SetCardinality(cardinality int64) {
	o.Cardinality = cardinality
}

// WithNumPartitions adds the numPartitions to the estimate heap usage params
func (o *EstimateHeapUsageParams) WithNumPartitions(numPartitions *int32) *EstimateHeapUsageParams {
	o.SetNumPartitions(numPartitions)
	return o
}

// SetNumPartitions adds the numPartitions to the estimate heap usage params
func (o *EstimateHeapUsageParams) SetNumPartitions(numPartitions *int32) {
	o.NumPartitions = numPartitions
}

// WithPrimaryKeySize adds the primaryKeySize to the estimate heap usage params
func (o *EstimateHeapUsageParams) WithPrimaryKeySize(primaryKeySize *int32) *EstimateHeapUsageParams {
	o.SetPrimaryKeySize(primaryKeySize)
	return o
}

// SetPrimaryKeySize adds the primaryKeySize to the estimate heap usage params
func (o *EstimateHeapUsageParams) SetPrimaryKeySize(primaryKeySize *int32) {
	o.PrimaryKeySize = primaryKeySize
}

// WriteToRequest writes these params to a swagger request
func (o *EstimateHeapUsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// query param cardinality
	qrCardinality := o.Cardinality
	qCardinality := swag.FormatInt64(qrCardinality)
	if qCardinality != "" {

		if err := r.SetQueryParam("cardinality", qCardinality); err != nil {
			return err
		}
	}

	if o.NumPartitions != nil {

		// query param numPartitions
		var qrNumPartitions int32

		if o.NumPartitions != nil {
			qrNumPartitions = *o.NumPartitions
		}
		qNumPartitions := swag.FormatInt32(qrNumPartitions)
		if qNumPartitions != "" {

			if err := r.SetQueryParam("numPartitions", qNumPartitions); err != nil {
				return err
			}
		}
	}

	if o.PrimaryKeySize != nil {

		// query param primaryKeySize
		var qrPrimaryKeySize int32

		if o.PrimaryKeySize != nil {
			qrPrimaryKeySize = *o.PrimaryKeySize
		}
		qPrimaryKeySize := swag.FormatInt32(qrPrimaryKeySize)
		if qPrimaryKeySize != "" {

			if err := r.SetQueryParam("primaryKeySize", qPrimaryKeySize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
