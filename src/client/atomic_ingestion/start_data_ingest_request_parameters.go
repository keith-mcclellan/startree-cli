// Code generated by go-swagger; DO NOT EDIT.

package atomic_ingestion

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewStartDataIngestRequestParams creates a new StartDataIngestRequestParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStartDataIngestRequestParams() *StartDataIngestRequestParams {
	return &StartDataIngestRequestParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStartDataIngestRequestParamsWithTimeout creates a new StartDataIngestRequestParams object
// with the ability to set a timeout on a request.
func NewStartDataIngestRequestParamsWithTimeout(timeout time.Duration) *StartDataIngestRequestParams {
	return &StartDataIngestRequestParams{
		timeout: timeout,
	}
}

// NewStartDataIngestRequestParamsWithContext creates a new StartDataIngestRequestParams object
// with the ability to set a context for a request.
func NewStartDataIngestRequestParamsWithContext(ctx context.Context) *StartDataIngestRequestParams {
	return &StartDataIngestRequestParams{
		Context: ctx,
	}
}

// NewStartDataIngestRequestParamsWithHTTPClient creates a new StartDataIngestRequestParams object
// with the ability to set a custom HTTPClient for a request.
func NewStartDataIngestRequestParamsWithHTTPClient(client *http.Client) *StartDataIngestRequestParams {
	return &StartDataIngestRequestParams{
		HTTPClient: client,
	}
}

/*
StartDataIngestRequestParams contains all the parameters to send to the API endpoint

	for the start data ingest request operation.

	Typically these are written to a http.Request.
*/
type StartDataIngestRequestParams struct {

	// Body.
	Body string

	/* TableName.

	   Name of the table
	*/
	TableName string

	/* TableType.

	   OFFLINE|REALTIME
	*/
	TableType string

	/* TaskType.

	   Task type
	*/
	TaskType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the start data ingest request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StartDataIngestRequestParams) WithDefaults() *StartDataIngestRequestParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the start data ingest request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StartDataIngestRequestParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the start data ingest request params
func (o *StartDataIngestRequestParams) WithTimeout(timeout time.Duration) *StartDataIngestRequestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the start data ingest request params
func (o *StartDataIngestRequestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the start data ingest request params
func (o *StartDataIngestRequestParams) WithContext(ctx context.Context) *StartDataIngestRequestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the start data ingest request params
func (o *StartDataIngestRequestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the start data ingest request params
func (o *StartDataIngestRequestParams) WithHTTPClient(client *http.Client) *StartDataIngestRequestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the start data ingest request params
func (o *StartDataIngestRequestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the start data ingest request params
func (o *StartDataIngestRequestParams) WithBody(body string) *StartDataIngestRequestParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the start data ingest request params
func (o *StartDataIngestRequestParams) SetBody(body string) {
	o.Body = body
}

// WithTableName adds the tableName to the start data ingest request params
func (o *StartDataIngestRequestParams) WithTableName(tableName string) *StartDataIngestRequestParams {
	o.SetTableName(tableName)
	return o
}

// SetTableName adds the tableName to the start data ingest request params
func (o *StartDataIngestRequestParams) SetTableName(tableName string) {
	o.TableName = tableName
}

// WithTableType adds the tableType to the start data ingest request params
func (o *StartDataIngestRequestParams) WithTableType(tableType string) *StartDataIngestRequestParams {
	o.SetTableType(tableType)
	return o
}

// SetTableType adds the tableType to the start data ingest request params
func (o *StartDataIngestRequestParams) SetTableType(tableType string) {
	o.TableType = tableType
}

// WithTaskType adds the taskType to the start data ingest request params
func (o *StartDataIngestRequestParams) WithTaskType(taskType string) *StartDataIngestRequestParams {
	o.SetTaskType(taskType)
	return o
}

// SetTaskType adds the taskType to the start data ingest request params
func (o *StartDataIngestRequestParams) SetTaskType(taskType string) {
	o.TaskType = taskType
}

// WriteToRequest writes these params to a swagger request
func (o *StartDataIngestRequestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param tableName
	if err := r.SetPathParam("tableName", o.TableName); err != nil {
		return err
	}

	// query param tableType
	qrTableType := o.TableType
	qTableType := qrTableType
	if qTableType != "" {

		if err := r.SetQueryParam("tableType", qTableType); err != nil {
			return err
		}
	}

	// query param taskType
	qrTaskType := o.TaskType
	qTaskType := qrTaskType
	if qTaskType != "" {

		if err := r.SetQueryParam("taskType", qTaskType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
