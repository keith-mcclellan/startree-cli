// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"startree.ai/cli/models"
)

// NewUpdateSchema1Params creates a new UpdateSchema1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateSchema1Params() *UpdateSchema1Params {
	return &UpdateSchema1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSchema1ParamsWithTimeout creates a new UpdateSchema1Params object
// with the ability to set a timeout on a request.
func NewUpdateSchema1ParamsWithTimeout(timeout time.Duration) *UpdateSchema1Params {
	return &UpdateSchema1Params{
		timeout: timeout,
	}
}

// NewUpdateSchema1ParamsWithContext creates a new UpdateSchema1Params object
// with the ability to set a context for a request.
func NewUpdateSchema1ParamsWithContext(ctx context.Context) *UpdateSchema1Params {
	return &UpdateSchema1Params{
		Context: ctx,
	}
}

// NewUpdateSchema1ParamsWithHTTPClient creates a new UpdateSchema1Params object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateSchema1ParamsWithHTTPClient(client *http.Client) *UpdateSchema1Params {
	return &UpdateSchema1Params{
		HTTPClient: client,
	}
}

/*
UpdateSchema1Params contains all the parameters to send to the API endpoint

	for the update schema 1 operation.

	Typically these are written to a http.Request.
*/
type UpdateSchema1Params struct {

	// Body.
	Body *models.FormDataMultiPart

	/* Reload.

	   Whether to reload the table if the new schema is backward compatible
	*/
	Reload *bool

	/* SchemaName.

	   Name of the schema
	*/
	SchemaName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update schema 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateSchema1Params) WithDefaults() *UpdateSchema1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update schema 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateSchema1Params) SetDefaults() {
	var (
		reloadDefault = bool(false)
	)

	val := UpdateSchema1Params{
		Reload: &reloadDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the update schema 1 params
func (o *UpdateSchema1Params) WithTimeout(timeout time.Duration) *UpdateSchema1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update schema 1 params
func (o *UpdateSchema1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update schema 1 params
func (o *UpdateSchema1Params) WithContext(ctx context.Context) *UpdateSchema1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update schema 1 params
func (o *UpdateSchema1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update schema 1 params
func (o *UpdateSchema1Params) WithHTTPClient(client *http.Client) *UpdateSchema1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update schema 1 params
func (o *UpdateSchema1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update schema 1 params
func (o *UpdateSchema1Params) WithBody(body *models.FormDataMultiPart) *UpdateSchema1Params {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update schema 1 params
func (o *UpdateSchema1Params) SetBody(body *models.FormDataMultiPart) {
	o.Body = body
}

// WithReload adds the reload to the update schema 1 params
func (o *UpdateSchema1Params) WithReload(reload *bool) *UpdateSchema1Params {
	o.SetReload(reload)
	return o
}

// SetReload adds the reload to the update schema 1 params
func (o *UpdateSchema1Params) SetReload(reload *bool) {
	o.Reload = reload
}

// WithSchemaName adds the schemaName to the update schema 1 params
func (o *UpdateSchema1Params) WithSchemaName(schemaName string) *UpdateSchema1Params {
	o.SetSchemaName(schemaName)
	return o
}

// SetSchemaName adds the schemaName to the update schema 1 params
func (o *UpdateSchema1Params) SetSchemaName(schemaName string) {
	o.SchemaName = schemaName
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSchema1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Reload != nil {

		// query param reload
		var qrReload bool

		if o.Reload != nil {
			qrReload = *o.Reload
		}
		qReload := swag.FormatBool(qrReload)
		if qReload != "" {

			if err := r.SetQueryParam("reload", qReload); err != nil {
				return err
			}
		}
	}

	// path param schemaName
	if err := r.SetPathParam("schemaName", o.SchemaName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
