// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new schema API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for schema API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddSchema1(params *AddSchema1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSchema1OK, error)

	DeleteSchema(params *DeleteSchemaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSchemaOK, error)

	GetSchema(params *GetSchemaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSchemaOK, error)

	GetTableSchema(params *GetTableSchemaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableSchemaOK, error)

	ListSchemaNames(params *ListSchemaNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSchemaNamesOK, error)

	UpdateSchema1(params *UpdateSchema1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSchema1OK, error)

	ValidateSchema1(params *ValidateSchema1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateSchema1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddSchema1 adds a new schema

Adds a new schema
*/
func (a *Client) AddSchema1(params *AddSchema1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSchema1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSchema1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "addSchema_1",
		Method:             "POST",
		PathPattern:        "/schemas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddSchema1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSchema1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSchema_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSchema deletes a schema

Deletes a schema by name
*/
func (a *Client) DeleteSchema(params *DeleteSchemaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSchemaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSchema",
		Method:             "DELETE",
		PathPattern:        "/schemas/{schemaName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSchemaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSchema gets a schema

Gets a schema by name
*/
func (a *Client) GetSchema(params *GetSchemaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchemaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSchema",
		Method:             "GET",
		PathPattern:        "/schemas/{schemaName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSchemaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTableSchema gets table schema

Read table schema
*/
func (a *Client) GetTableSchema(params *GetTableSchemaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableSchemaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTableSchema",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/schema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTableSchemaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSchemaNames lists all schema names

Lists all schema names
*/
func (a *Client) ListSchemaNames(params *ListSchemaNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSchemaNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSchemaNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSchemaNames",
		Method:             "GET",
		PathPattern:        "/schemas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSchemaNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSchemaNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSchemaNames: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSchema1 updates a schema

Updates a schema
*/
func (a *Client) UpdateSchema1(params *UpdateSchema1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSchema1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSchema1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSchema_1",
		Method:             "PUT",
		PathPattern:        "/schemas/{schemaName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSchema1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSchema1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSchema_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateSchema1 validates schema

This API returns the schema that matches the one you get from 'GET /schema/{schemaName}'. This allows us to validate schema before apply.
*/
func (a *Client) ValidateSchema1(params *ValidateSchema1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateSchema1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateSchema1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateSchema_1",
		Method:             "POST",
		PathPattern:        "/schemas/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateSchema1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateSchema1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateSchema_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
