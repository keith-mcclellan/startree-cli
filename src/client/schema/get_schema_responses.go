// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"startree.ai/cli/models"
)

// GetSchemaReader is a Reader for the GetSchema structure.
type GetSchemaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSchemaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSchemaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetSchemaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSchemaInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSchemaOK creates a GetSchemaOK with default headers values
func NewGetSchemaOK() *GetSchemaOK {
	return &GetSchemaOK{}
}

/*
GetSchemaOK describes a response with status code 200, with default header values.

Success
*/
type GetSchemaOK struct {
	Payload *GetSchemaOKBody
}

// IsSuccess returns true when this get schema o k response has a 2xx status code
func (o *GetSchemaOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get schema o k response has a 3xx status code
func (o *GetSchemaOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schema o k response has a 4xx status code
func (o *GetSchemaOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get schema o k response has a 5xx status code
func (o *GetSchemaOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get schema o k response a status code equal to that given
func (o *GetSchemaOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get schema o k response
func (o *GetSchemaOK) Code() int {
	return 200
}

func (o *GetSchemaOK) Error() string {
	return fmt.Sprintf("[GET /schemas/{schemaName}][%d] getSchemaOK  %+v", 200, o.Payload)
}

func (o *GetSchemaOK) String() string {
	return fmt.Sprintf("[GET /schemas/{schemaName}][%d] getSchemaOK  %+v", 200, o.Payload)
}

func (o *GetSchemaOK) GetPayload() *GetSchemaOKBody {
	return o.Payload
}

func (o *GetSchemaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSchemaOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemaNotFound creates a GetSchemaNotFound with default headers values
func NewGetSchemaNotFound() *GetSchemaNotFound {
	return &GetSchemaNotFound{}
}

/*
GetSchemaNotFound describes a response with status code 404, with default header values.

Schema not found
*/
type GetSchemaNotFound struct {
}

// IsSuccess returns true when this get schema not found response has a 2xx status code
func (o *GetSchemaNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get schema not found response has a 3xx status code
func (o *GetSchemaNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schema not found response has a 4xx status code
func (o *GetSchemaNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get schema not found response has a 5xx status code
func (o *GetSchemaNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get schema not found response a status code equal to that given
func (o *GetSchemaNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get schema not found response
func (o *GetSchemaNotFound) Code() int {
	return 404
}

func (o *GetSchemaNotFound) Error() string {
	return fmt.Sprintf("[GET /schemas/{schemaName}][%d] getSchemaNotFound ", 404)
}

func (o *GetSchemaNotFound) String() string {
	return fmt.Sprintf("[GET /schemas/{schemaName}][%d] getSchemaNotFound ", 404)
}

func (o *GetSchemaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSchemaInternalServerError creates a GetSchemaInternalServerError with default headers values
func NewGetSchemaInternalServerError() *GetSchemaInternalServerError {
	return &GetSchemaInternalServerError{}
}

/*
GetSchemaInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type GetSchemaInternalServerError struct {
}

// IsSuccess returns true when this get schema internal server error response has a 2xx status code
func (o *GetSchemaInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get schema internal server error response has a 3xx status code
func (o *GetSchemaInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schema internal server error response has a 4xx status code
func (o *GetSchemaInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get schema internal server error response has a 5xx status code
func (o *GetSchemaInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get schema internal server error response a status code equal to that given
func (o *GetSchemaInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get schema internal server error response
func (o *GetSchemaInternalServerError) Code() int {
	return 500
}

func (o *GetSchemaInternalServerError) Error() string {
	return fmt.Sprintf("[GET /schemas/{schemaName}][%d] getSchemaInternalServerError ", 500)
}

func (o *GetSchemaInternalServerError) String() string {
	return fmt.Sprintf("[GET /schemas/{schemaName}][%d] getSchemaInternalServerError ", 500)
}

func (o *GetSchemaInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetSchemaOKBody get schema o k body
swagger:model GetSchemaOKBody
*/
type GetSchemaOKBody struct {

	// date time field specs
	DateTimeFieldSpecs []*models.DateTimeFieldSpec `json:"dateTimeFieldSpecs"`

	// dimension field specs
	DimensionFieldSpecs []*models.DimensionFieldSpec `json:"dimensionFieldSpecs"`

	// metric field specs
	MetricFieldSpecs []*models.MetricFieldSpec `json:"metricFieldSpecs"`

	// primary key columns
	PrimaryKeyColumns []string `json:"primaryKeyColumns"`

	// schema name
	SchemaName string `json:"schemaName,omitempty"`

	// time field spec
	TimeFieldSpec *models.TimeFieldSpec `json:"timeFieldSpec,omitempty"`
}

// Validate validates this get schema o k body
func (o *GetSchemaOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDateTimeFieldSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDimensionFieldSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetricFieldSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTimeFieldSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSchemaOKBody) validateDateTimeFieldSpecs(formats strfmt.Registry) error {
	if swag.IsZero(o.DateTimeFieldSpecs) { // not required
		return nil
	}

	for i := 0; i < len(o.DateTimeFieldSpecs); i++ {
		if swag.IsZero(o.DateTimeFieldSpecs[i]) { // not required
			continue
		}

		if o.DateTimeFieldSpecs[i] != nil {
			if err := o.DateTimeFieldSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSchemaOK" + "." + "dateTimeFieldSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSchemaOK" + "." + "dateTimeFieldSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSchemaOKBody) validateDimensionFieldSpecs(formats strfmt.Registry) error {
	if swag.IsZero(o.DimensionFieldSpecs) { // not required
		return nil
	}

	for i := 0; i < len(o.DimensionFieldSpecs); i++ {
		if swag.IsZero(o.DimensionFieldSpecs[i]) { // not required
			continue
		}

		if o.DimensionFieldSpecs[i] != nil {
			if err := o.DimensionFieldSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSchemaOK" + "." + "dimensionFieldSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSchemaOK" + "." + "dimensionFieldSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSchemaOKBody) validateMetricFieldSpecs(formats strfmt.Registry) error {
	if swag.IsZero(o.MetricFieldSpecs) { // not required
		return nil
	}

	for i := 0; i < len(o.MetricFieldSpecs); i++ {
		if swag.IsZero(o.MetricFieldSpecs[i]) { // not required
			continue
		}

		if o.MetricFieldSpecs[i] != nil {
			if err := o.MetricFieldSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSchemaOK" + "." + "metricFieldSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSchemaOK" + "." + "metricFieldSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSchemaOKBody) validateTimeFieldSpec(formats strfmt.Registry) error {
	if swag.IsZero(o.TimeFieldSpec) { // not required
		return nil
	}

	if o.TimeFieldSpec != nil {
		if err := o.TimeFieldSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSchemaOK" + "." + "timeFieldSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSchemaOK" + "." + "timeFieldSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get schema o k body based on the context it is used
func (o *GetSchemaOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDateTimeFieldSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDimensionFieldSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMetricFieldSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTimeFieldSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSchemaOKBody) contextValidateDateTimeFieldSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DateTimeFieldSpecs); i++ {

		if o.DateTimeFieldSpecs[i] != nil {
			if err := o.DateTimeFieldSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSchemaOK" + "." + "dateTimeFieldSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSchemaOK" + "." + "dateTimeFieldSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSchemaOKBody) contextValidateDimensionFieldSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DimensionFieldSpecs); i++ {

		if o.DimensionFieldSpecs[i] != nil {
			if err := o.DimensionFieldSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSchemaOK" + "." + "dimensionFieldSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSchemaOK" + "." + "dimensionFieldSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSchemaOKBody) contextValidateMetricFieldSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.MetricFieldSpecs); i++ {

		if o.MetricFieldSpecs[i] != nil {
			if err := o.MetricFieldSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSchemaOK" + "." + "metricFieldSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSchemaOK" + "." + "metricFieldSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSchemaOKBody) contextValidateTimeFieldSpec(ctx context.Context, formats strfmt.Registry) error {

	if o.TimeFieldSpec != nil {
		if err := o.TimeFieldSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSchemaOK" + "." + "timeFieldSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSchemaOK" + "." + "timeFieldSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSchemaOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSchemaOKBody) UnmarshalBinary(b []byte) error {
	var res GetSchemaOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
