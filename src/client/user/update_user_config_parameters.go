// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUpdateUserConfigParams creates a new UpdateUserConfigParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateUserConfigParams() *UpdateUserConfigParams {
	return &UpdateUserConfigParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateUserConfigParamsWithTimeout creates a new UpdateUserConfigParams object
// with the ability to set a timeout on a request.
func NewUpdateUserConfigParamsWithTimeout(timeout time.Duration) *UpdateUserConfigParams {
	return &UpdateUserConfigParams{
		timeout: timeout,
	}
}

// NewUpdateUserConfigParamsWithContext creates a new UpdateUserConfigParams object
// with the ability to set a context for a request.
func NewUpdateUserConfigParamsWithContext(ctx context.Context) *UpdateUserConfigParams {
	return &UpdateUserConfigParams{
		Context: ctx,
	}
}

// NewUpdateUserConfigParamsWithHTTPClient creates a new UpdateUserConfigParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateUserConfigParamsWithHTTPClient(client *http.Client) *UpdateUserConfigParams {
	return &UpdateUserConfigParams{
		HTTPClient: client,
	}
}

/*
UpdateUserConfigParams contains all the parameters to send to the API endpoint

	for the update user config operation.

	Typically these are written to a http.Request.
*/
type UpdateUserConfigParams struct {

	// Body.
	Body string

	// Component.
	Component *string

	// PasswordChanged.
	PasswordChanged *bool

	// Username.
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update user config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateUserConfigParams) WithDefaults() *UpdateUserConfigParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update user config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateUserConfigParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update user config params
func (o *UpdateUserConfigParams) WithTimeout(timeout time.Duration) *UpdateUserConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update user config params
func (o *UpdateUserConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update user config params
func (o *UpdateUserConfigParams) WithContext(ctx context.Context) *UpdateUserConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update user config params
func (o *UpdateUserConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update user config params
func (o *UpdateUserConfigParams) WithHTTPClient(client *http.Client) *UpdateUserConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update user config params
func (o *UpdateUserConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update user config params
func (o *UpdateUserConfigParams) WithBody(body string) *UpdateUserConfigParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update user config params
func (o *UpdateUserConfigParams) SetBody(body string) {
	o.Body = body
}

// WithComponent adds the component to the update user config params
func (o *UpdateUserConfigParams) WithComponent(component *string) *UpdateUserConfigParams {
	o.SetComponent(component)
	return o
}

// SetComponent adds the component to the update user config params
func (o *UpdateUserConfigParams) SetComponent(component *string) {
	o.Component = component
}

// WithPasswordChanged adds the passwordChanged to the update user config params
func (o *UpdateUserConfigParams) WithPasswordChanged(passwordChanged *bool) *UpdateUserConfigParams {
	o.SetPasswordChanged(passwordChanged)
	return o
}

// SetPasswordChanged adds the passwordChanged to the update user config params
func (o *UpdateUserConfigParams) SetPasswordChanged(passwordChanged *bool) {
	o.PasswordChanged = passwordChanged
}

// WithUsername adds the username to the update user config params
func (o *UpdateUserConfigParams) WithUsername(username string) *UpdateUserConfigParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the update user config params
func (o *UpdateUserConfigParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateUserConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.Component != nil {

		// query param component
		var qrComponent string

		if o.Component != nil {
			qrComponent = *o.Component
		}
		qComponent := qrComponent
		if qComponent != "" {

			if err := r.SetQueryParam("component", qComponent); err != nil {
				return err
			}
		}
	}

	if o.PasswordChanged != nil {

		// query param passwordChanged
		var qrPasswordChanged bool

		if o.PasswordChanged != nil {
			qrPasswordChanged = *o.PasswordChanged
		}
		qPasswordChanged := swag.FormatBool(qrPasswordChanged)
		if qPasswordChanged != "" {

			if err := r.SetQueryParam("passwordChanged", qPasswordChanged); err != nil {
				return err
			}
		}
	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
