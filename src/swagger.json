{
    "swagger": "2.0",
    "info": {
        "description": "APIs for accessing Pinot Controller information",
        "version": "1.0",
        "title": "Pinot Controller API",
        "contact": {
            "name": "https://github.com/apache/pinot"
        }
    },
    "basePath": "/",
    "tags": [
        {
            "name": "AtomicIngestion"
        },
        {
            "name": "ClusterHealth"
        },
        {
            "name": "Tuner"
        },
        {
            "name": "Cluster"
        },
        {
            "name": "User"
        },
        {
            "name": "Broker"
        },
        {
            "name": "AppConfigs"
        },
        {
            "name": "Auth"
        },
        {
            "name": "Health"
        },
        {
            "name": "Logger"
        },
        {
            "name": "PeriodicTask"
        },
        {
            "name": "Table"
        },
        {
            "name": "Instance"
        },
        {
            "name": "Leader"
        },
        {
            "name": "Query"
        },
        {
            "name": "Schema"
        },
        {
            "name": "Segment"
        },
        {
            "name": "Tenant"
        },
        {
            "name": "Task"
        },
        {
            "name": "Upsert"
        },
        {
            "name": "Version"
        },
        {
            "name": "WriteApi"
        },
        {
            "name": "Zookeeper"
        }
    ],
    "schemes": [
        "https"
    ],
    "paths": {
        "/segments/{tableName}/endDataIngestRequest": {
            "post": {
                "tags": [
                    "AtomicIngestion"
                ],
                "summary": "Mark the end of data ingestion to upload multiple segments",
                "description": "",
                "operationId": "endDataIngestRequest",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tableType",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "taskType",
                        "in": "query",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "checkpointEntryKey",
                        "in": "query",
                        "description": "Key of checkpoint entry",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/segments/{tableName}/startDataIngestRequest": {
            "post": {
                "tags": [
                    "AtomicIngestion"
                ],
                "summary": "Mark the start of data ingestion to upload multiple segments",
                "description": "",
                "operationId": "startDataIngestRequest",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tableType",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "taskType",
                        "in": "query",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/clusterHealth": {
            "get": {
                "tags": [
                    "ClusterHealth"
                ],
                "summary": "Get cached cluster health details",
                "description": "",
                "operationId": "getClusterHealthDetails",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ClusterHealthResponse"
                        }
                    }
                }
            }
        },
        "/tuner/{tableName}": {
            "get": {
                "tags": [
                    "Tuner"
                ],
                "summary": "Apply tuner(s) to a table",
                "description": "",
                "operationId": "tuneTable",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Tuner"
                ],
                "summary": "Apply specific tuner to a table",
                "description": "",
                "operationId": "tuneTable_1",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/debug/segments/{tableName}/{segmentName}": {
            "get": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Get debug information for segment.",
                "description": "Debug information for segment.",
                "operationId": "getSegmentDebugInfo",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table (with type)",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Segment not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/debug/tables/{tableName}": {
            "get": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Get debug information for table.",
                "description": "Debug information for table.",
                "operationId": "getTableDebugInfo",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "verbosity",
                        "in": "query",
                        "description": "Verbosity of debug information",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "List all uses in cluster",
                "description": "List all users in cluster",
                "operationId": "listUers",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Add a user",
                "description": "Add a user",
                "operationId": "addUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/users/{username}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get an user in cluster",
                "description": "Get an user in cluster",
                "operationId": "getUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "component",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update user config for a user",
                "description": "Update user config for user",
                "operationId": "updateUserConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "component",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "passwordChanged",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Delete a user",
                "description": "Delete a user",
                "operationId": "deleteUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "component",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/brokers": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List tenants and tables to brokers mappings",
                "description": "List tenants and tables to brokers mappings",
                "operationId": "listBrokersMapping",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brokers/tenants": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List tenants to brokers mappings",
                "description": "List tenants to brokers mappings",
                "operationId": "getTenantsToBrokersMapping",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brokers/tables": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List tables to brokers mappings",
                "description": "List tables to brokers mappings",
                "operationId": "getTablesToBrokersMapping",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brokers/tenants/{tenantName}": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List brokers for a given tenant",
                "description": "List brokers for a given tenant",
                "operationId": "getBrokersForTenant",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Name of the tenant",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v2/brokers/tenants/{tenantName}": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List brokers for a given tenant",
                "description": "List brokers for a given tenant",
                "operationId": "getBrokersForTenantV2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Name of the tenant",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InstanceInfo"
                            }
                        }
                    }
                }
            }
        },
        "/brokers/tables/{tableName}": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List brokers for a given table",
                "description": "List brokers for a given table",
                "operationId": "getBrokersForTable",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v2/brokers/tables/{tableName}": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List brokers for a given table",
                "description": "List brokers for a given table",
                "operationId": "getBrokersForTableV2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InstanceInfo"
                            }
                        }
                    }
                }
            }
        },
        "/v2/brokers": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List tenants and tables to brokers mappings",
                "description": "List tenants and tables to brokers mappings",
                "operationId": "listBrokersMappingV2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/InstanceInfo"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/brokers/tenants": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List tenants to brokers mappings",
                "description": "List tenants to brokers mappings",
                "operationId": "getTenantsToBrokersMappingV2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/InstanceInfo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/brokers/tables": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List tables to brokers mappings",
                "description": "List tables to brokers mappings",
                "operationId": "getTablesToBrokersMappingV2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/InstanceInfo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brokers/instances/{instanceName}/qps": {
            "post": {
                "tags": [
                    "Broker"
                ],
                "summary": "Enable/disable the query rate limiting for a broker instance",
                "description": "Enable/disable the query rate limiting for a broker instance",
                "operationId": "toggleQueryRateLimiting",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Broker instance name",
                        "required": true,
                        "type": "string",
                        "x-example": "Broker_my.broker.com_30000"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ENABLE|DISABLE",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "ENABLE",
                            "DISABLE"
                        ]
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Instance not found"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/cluster/configs": {
            "get": {
                "tags": [
                    "Cluster"
                ],
                "summary": "List cluster configurations",
                "description": "List cluster level configurations",
                "operationId": "listClusterConfigs",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Update cluster configuration",
                "description": "",
                "operationId": "updateClusterConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Server error updating configuration"
                    }
                }
            }
        },
        "/cluster/configs/{configName}": {
            "delete": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Delete cluster configuration",
                "description": "",
                "operationId": "deleteClusterConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "configName",
                        "in": "path",
                        "description": "Name of the config to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Server error deleting configuration"
                    }
                }
            }
        },
        "/cluster/info": {
            "get": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Get cluster Info",
                "description": "Get cluster Info",
                "operationId": "getClusterInfo",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/appconfigs": {
            "get": {
                "tags": [
                    "AppConfigs"
                ],
                "operationId": "getAppConfigs",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {},
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/info": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Retrieve auth workflow info",
                "description": "",
                "operationId": "info",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Auth workflow info provided"
                    }
                }
            }
        },
        "/auth/verify": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Check whether authentication is enabled",
                "description": "",
                "operationId": "verify",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "query",
                        "description": "Table name without type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "accessType",
                        "in": "query",
                        "description": "API access type",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "CREATE",
                            "READ",
                            "UPDATE",
                            "DELETE"
                        ]
                    },
                    {
                        "name": "endpointUrl",
                        "in": "query",
                        "description": "Endpoint URL",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verification result provided"
                    },
                    "500": {
                        "description": "Verification error"
                    }
                }
            }
        },
        "/pinot-controller/admin": {
            "get": {
                "tags": [
                    "Health"
                ],
                "summary": "Check controller health",
                "description": "",
                "operationId": "checkHealthLegacy",
                "produces": [
                    "text/plain"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Good"
                    }
                }
            }
        },
        "/health": {
            "get": {
                "tags": [
                    "Health"
                ],
                "summary": "Check controller health",
                "description": "",
                "operationId": "checkHealth",
                "produces": [
                    "text/plain"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Good"
                    }
                }
            }
        },
        "/loggers/{loggerName}": {
            "get": {
                "tags": [
                    "Logger"
                ],
                "summary": "Get logger configs",
                "description": "Return logger info",
                "operationId": "getLogger",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "loggerName",
                        "in": "path",
                        "description": "Logger name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Logger"
                ],
                "summary": "Set logger level",
                "description": "Set logger level for a given logger",
                "operationId": "setLoggerLevel",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "loggerName",
                        "in": "path",
                        "description": "Logger name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Logger level",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/loggers": {
            "get": {
                "tags": [
                    "Logger"
                ],
                "summary": "Get all the loggers",
                "description": "Return all the logger names",
                "operationId": "getLoggers",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/loggers/files": {
            "get": {
                "tags": [
                    "Logger"
                ],
                "summary": "Get all local log files",
                "description": "",
                "operationId": "getLocalLogFiles",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "uniqueItems": true
                        }
                    }
                }
            }
        },
        "/loggers/download": {
            "get": {
                "tags": [
                    "Logger"
                ],
                "summary": "Download a log file",
                "description": "",
                "operationId": "downloadLogFile",
                "produces": [
                    "application/octet-stream"
                ],
                "parameters": [
                    {
                        "name": "filePath",
                        "in": "query",
                        "description": "Log file path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/loggers/instances": {
            "get": {
                "tags": [
                    "Logger"
                ],
                "summary": "Collect log files from all the instances",
                "description": "",
                "operationId": "getLogFilesFromAllInstances",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/loggers/instances/{instanceName}": {
            "get": {
                "tags": [
                    "Logger"
                ],
                "summary": "Collect log files from a given instance",
                "description": "",
                "operationId": "getLogFilesFromInstance",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Instance Name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "uniqueItems": true
                        }
                    }
                }
            }
        },
        "/loggers/instances/{instanceName}/download": {
            "get": {
                "tags": [
                    "Logger"
                ],
                "summary": "Download a log file from a given instance",
                "description": "",
                "operationId": "downloadLogFileFromInstance",
                "produces": [
                    "application/octet-stream"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Instance Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filePath",
                        "in": "query",
                        "description": "Log file path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/periodictask/names": {
            "get": {
                "tags": [
                    "PeriodicTask"
                ],
                "summary": "Get comma-delimited list of all available periodic task names.",
                "description": "",
                "operationId": "getPeriodicTaskNames",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/periodictask/run": {
            "get": {
                "tags": [
                    "PeriodicTask"
                ],
                "summary": "Run periodic task against table. If table name is missing, task will run against all tables.",
                "description": "",
                "operationId": "runPeriodicTask",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "taskname",
                        "in": "query",
                        "description": "Periodic task name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tableName",
                        "in": "query",
                        "description": "Name of the table",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE | REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/ingestFromURI": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Ingest from the given URI",
                "description": "Creates a segment using file at the given URI and pushes it to Pinot. \n All steps happen on the controller. This API is NOT meant for production environments/large input files. \nExample usage (query params need encoding):\n```\ncurl -X POST \"http://localhost:9000/ingestFromURI?tableNameWithType=foo_OFFLINE\n&batchConfigMapStr={\n  \"inputFormat\":\"json\",\n  \"input.fs.className\":\"org.apache.pinot.plugin.filesystem.S3PinotFS\",\n  \"input.fs.prop.region\":\"us-central\",\n  \"input.fs.prop.accessKey\":\"foo\",\n  \"input.fs.prop.secretKey\":\"bar\"\n}\n&sourceURIStr=s3://test.bucket/path/to/json/data/data.json\"\n```",
                "operationId": "ingestFromURI",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableNameWithType",
                        "in": "query",
                        "description": "Name of the table to upload the file to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "batchConfigMapStr",
                        "in": "query",
                        "description": "Batch config Map as json string. Must pass inputFormat, and optionally input FS properties. e.g. {\"inputFormat\":\"json\"}",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "sourceURIStr",
                        "in": "query",
                        "description": "URI of file to upload",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/ingestFromFile": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Ingest a file",
                "description": "Creates a segment using given file and pushes it to Pinot. \n All steps happen on the controller. This API is NOT meant for production environments/large input files. \n Example usage (query params need encoding):\n```\ncurl -X POST -F file=@data.json -H \"Content-Type: multipart/form-data\" \"http://localhost:9000/ingestFromFile?tableNameWithType=foo_OFFLINE&\nbatchConfigMapStr={\n  \"inputFormat\":\"csv\",\n  \"recordReader.prop.delimiter\":\"|\"\n}\" \n```",
                "operationId": "ingestFromFile",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableNameWithType",
                        "in": "query",
                        "description": "Name of the table to upload the file to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "batchConfigMapStr",
                        "in": "query",
                        "description": "Batch config Map as json string. Must pass inputFormat, and optionally record reader properties. e.g. {\"inputFormat\":\"json\"}",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FormDataMultiPart"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/tables/{tableName}/assignInstances": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Assign server instances to a table",
                "description": "",
                "operationId": "assignInstances",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|CONSUMING|COMPLETED",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OFFLINE",
                            "CONSUMING",
                            "COMPLETED"
                        ]
                    },
                    {
                        "name": "dryRun",
                        "in": "query",
                        "description": "Whether to do dry-run",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/InstancePartitions"
                            }
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/instancePartitions": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get the instance partitions",
                "description": "",
                "operationId": "getInstancePartitions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|CONSUMING|COMPLETED",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OFFLINE",
                            "CONSUMING",
                            "COMPLETED"
                        ]
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/InstancePartitions"
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "Create/update the instance partitions",
                "description": "",
                "operationId": "setInstancePartitions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/InstancePartitions"
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Table"
                ],
                "summary": "Remove the instance partitions",
                "description": "",
                "operationId": "removeInstancePartitions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|CONSUMING|COMPLETED",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OFFLINE",
                            "CONSUMING",
                            "COMPLETED"
                        ]
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/replaceInstance": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Replace an instance in the instance partitions",
                "description": "",
                "operationId": "replaceInstance",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|CONSUMING|COMPLETED",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OFFLINE",
                            "CONSUMING",
                            "COMPLETED"
                        ]
                    },
                    {
                        "name": "oldInstanceId",
                        "in": "query",
                        "description": "Old instance to be replaced",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "newInstanceId",
                        "in": "query",
                        "description": "New instance to replace with",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/InstancePartitions"
                            }
                        }
                    }
                }
            }
        },
        "/instances/{instanceName}": {
            "get": {
                "tags": [
                    "Instance"
                ],
                "summary": "Get instance information",
                "description": "",
                "operationId": "getInstance",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Instance name",
                        "required": true,
                        "type": "string",
                        "x-example": "Server_a.b.com_20000 | Broker_my.broker.com_30000"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Instance not found"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Instance"
                ],
                "summary": "Update the specified instance",
                "description": "Update specified instance with given instance config",
                "operationId": "updateInstance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Instance name",
                        "required": true,
                        "type": "string",
                        "x-example": "Server_a.b.com_20000 | Broker_my.broker.com_30000"
                    },
                    {
                        "name": "updateBrokerResource",
                        "in": "query",
                        "description": "Whether to update broker resource for broker instance",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Instance"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Instance"
                ],
                "summary": "Drop an instance",
                "description": "Drop an instance",
                "operationId": "dropInstance",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Instance name",
                        "required": true,
                        "type": "string",
                        "x-example": "Server_a.b.com_20000 | Broker_my.broker.com_30000"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Instance not found"
                    },
                    "409": {
                        "description": "Instance cannot be dropped"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/instances": {
            "get": {
                "tags": [
                    "Instance"
                ],
                "summary": "List all instances",
                "description": "",
                "operationId": "getAllInstances",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Instance"
                ],
                "summary": "Create a new instance",
                "description": "Creates a new instance with given instance config",
                "operationId": "addInstance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "updateBrokerResource",
                        "in": "query",
                        "description": "Whether to update broker resource for broker instance",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Instance"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "409": {
                        "description": "Instance already exists"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/instances/{instanceName}/updateBrokerResource": {
            "post": {
                "tags": [
                    "Instance"
                ],
                "summary": "Update the tables served by the specified broker instance in the broker resource",
                "description": "Broker resource should be updated when a new broker instance is added, or the tags for an existing broker are changed. Updating broker resource requires reading all the table configs, which can be costly for large cluster. Consider updating broker resource for each table individually.",
                "operationId": "updateBrokerResource",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Instance name",
                        "required": true,
                        "type": "string",
                        "x-example": "Broker_my.broker.com_30000"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Instance not found"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/instances/{instanceName}/updateTags": {
            "put": {
                "tags": [
                    "Instance"
                ],
                "summary": "Update the tags of the specified instance",
                "description": "Update the tags of the specified instance",
                "operationId": "updateInstanceTags",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Instance name",
                        "required": true,
                        "type": "string",
                        "x-example": "Server_a.b.com_20000 | Broker_my.broker.com_30000"
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Comma separated tags list",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "updateBrokerResource",
                        "in": "query",
                        "description": "Whether to update broker resource for broker instance",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Instance not found"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/instances/{instanceName}/state": {
            "post": {
                "tags": [
                    "Instance"
                ],
                "summary": "Enable/disable/drop an instance",
                "description": "Enable/disable/drop an instance",
                "operationId": "toggleInstanceState",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Instance name",
                        "required": true,
                        "type": "string",
                        "x-example": "Server_a.b.com_20000 | Broker_my.broker.com_30000"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Instance not found"
                    },
                    "409": {
                        "description": "Instance cannot be dropped"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/leader/tables": {
            "get": {
                "tags": [
                    "Leader"
                ],
                "summary": "Gets leaders for all tables",
                "description": "Gets leaders for all tables",
                "operationId": "getLeadersForAllTables",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LeadControllerResponse"
                        }
                    }
                }
            }
        },
        "/leader/tables/{tableName}": {
            "get": {
                "tags": [
                    "Leader"
                ],
                "summary": "Gets leader for a given table",
                "description": "Gets leader for a given table",
                "operationId": "getLeaderForTable",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LeadControllerResponse"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/consumingSegmentsInfo": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Returns state of consuming segments",
                "description": "Gets the status of consumers from all servers.Note that the partitionToOffsetMap has been deprecated and will be removed in the next release. The info is now embedded within each partition's state as currentOffsetsMap.",
                "operationId": "getConsumingSegmentsInfo",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Realtime table name with or without type",
                        "required": true,
                        "type": "string",
                        "x-example": "myTable | myTable_REALTIME"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/tables/forceCommitStatus/{jobId}": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get status for a submitted force commit operation",
                "description": "Get status for a submitted force commit operation",
                "operationId": "getForceCommitJobStatus",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "Force commit job id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/JsonNode"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/forceCommit": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Force commit the current consuming segments",
                "description": "Force commit the current segments in consuming state and restart consumption. This should be used after schema/table config changes. Please note that this is an asynchronous operation, and 200 response does not mean it has actually been done already",
                "operationId": "forceCommit",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/pauseConsumption": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Pause consumption of a realtime table",
                "description": "Pause the consumption of a realtime table",
                "operationId": "pauseConsumption",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/tables/{tableName}/resumeConsumption": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Resume consumption of a realtime table",
                "description": "Resume the consumption for a realtime table. ConsumeFrom parameter indicates from which offsets consumption should resume. If consumeFrom parameter is not provided, consumption continues based on the offsets in segment ZK metadata, and in case the offsets are already gone, the first available offsets are picked to minimize the data loss.",
                "operationId": "resumeConsumption",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "consumeFrom",
                        "in": "query",
                        "description": "smallest | largest",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/tables/{tableName}/pauseStatus": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Return pause status of a realtime table",
                "description": "Return pause status of a realtime table along with list of consuming segments.",
                "operationId": "getPauseStatus",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/query/{brokerId}/{queryId}": {
            "delete": {
                "tags": [
                    "Query"
                ],
                "summary": "Cancel a query as identified by the queryId",
                "description": "No effect if no query exists for the given queryId on the requested broker. Query may continue to run for a short while after calling cancel as it's done in a non-blocking manner. The cancel method can be called multiple times.",
                "operationId": "cancelQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "brokerId",
                        "in": "path",
                        "description": "Broker that's running the query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "queryId",
                        "in": "path",
                        "description": "QueryId as assigned by the broker",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "timeoutMs",
                        "in": "query",
                        "description": "Timeout for servers to respond the cancel request",
                        "required": false,
                        "type": "integer",
                        "default": 3000,
                        "format": "int32"
                    },
                    {
                        "name": "verbose",
                        "in": "query",
                        "description": "Return verbose responses for troubleshooting",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Query not found on the requested broker"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/queries": {
            "get": {
                "tags": [
                    "Query"
                ],
                "summary": "Get running queries from all brokers",
                "description": "The queries are returned with brokers running them",
                "operationId": "getRunningQueries",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "timeoutMs",
                        "in": "query",
                        "description": "Timeout for brokers to return running queries",
                        "required": false,
                        "type": "integer",
                        "default": 3000,
                        "format": "int32"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/schemas/{schemaName}": {
            "get": {
                "tags": [
                    "Schema"
                ],
                "summary": "Get a schema",
                "description": "Gets a schema by name",
                "operationId": "getSchema",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "schemaName",
                        "in": "path",
                        "description": "Schema name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "schemaName": {
                                    "type": "string"
                                },
                                "metricFieldSpecs": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/MetricFieldSpec"
                                    }
                                },
                                "dateTimeFieldSpecs": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/DateTimeFieldSpec"
                                    }
                                },
                                "timeFieldSpec": {
                                    "$ref": "#/definitions/TimeFieldSpec"
                                },
                                "primaryKeyColumns": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "dimensionFieldSpecs": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/DimensionFieldSpec"
                                    }
                                }
                            }
                            }
                    },
                    "404": {
                        "description": "Schema not found"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Schema"
                ],
                "summary": "Update a schema",
                "description": "Updates a schema",
                "operationId": "updateSchema_1",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "schemaName",
                        "in": "path",
                        "description": "Name of the schema",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "reload",
                        "in": "query",
                        "description": "Whether to reload the table if the new schema is backward compatible",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FormDataMultiPart"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated schema"
                    },
                    "400": {
                        "description": "Missing or invalid request body"
                    },
                    "404": {
                        "description": "Schema not found"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Schema"
                ],
                "summary": "Delete a schema",
                "description": "Deletes a schema by name",
                "operationId": "deleteSchema",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "schemaName",
                        "in": "path",
                        "description": "Schema name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted schema"
                    },
                    "404": {
                        "description": "Schema not found"
                    },
                    "409": {
                        "description": "Schema is in use"
                    },
                    "500": {
                        "description": "Error deleting schema"
                    }
                }
            }
        },
        "/schemas": {
            "get": {
                "tags": [
                    "Schema"
                ],
                "summary": "List all schema names",
                "description": "Lists all schema names",
                "operationId": "listSchemaNames",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Schema"
                ],
                "summary": "Add a new schema",
                "description": "Adds a new schema",
                "operationId": "addSchema_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "override",
                        "in": "query",
                        "description": "Whether to override the schema if the schema exists",
                        "required": false,
                        "type": "boolean",
                        "default": true
                    },
                    {
                        "name": "force",
                        "in": "query",
                        "description": "Whether to force overriding the schema if the schema exists",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created schema"
                    },
                    "400": {
                        "description": "Missing or invalid request body"
                    },
                    "409": {
                        "description": "Schema already exists"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/schemas/validate": {
            "post": {
                "tags": [
                    "Schema"
                ],
                "summary": "Validate schema",
                "description": "This API returns the schema that matches the one you get from 'GET /schema/{schemaName}'. This allows us to validate schema before apply.",
                "operationId": "validateSchema_1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully validated schema"
                    },
                    "400": {
                        "description": "Missing or invalid request body"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/segments/{tableName}": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "List all segments. An optional 'excludeReplacedSegments' parameter is used to get the list of segments which has not yet been replaced (determined by segment lineage entries) and can be queried from the table. The value is false by default.",
                "description": "List all segments",
                "operationId": "getSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "excludeReplacedSegments",
                        "in": "query",
                        "description": "Whether to exclude replaced segments in the response, which have been replaced specified in the segment lineage entries and cannot be queried from the table",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Segment"
                ],
                "summary": "Delete all segments",
                "description": "Delete all segments",
                "operationId": "deleteAllSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "retention",
                        "in": "query",
                        "description": "Retention period for the table segments (e.g. 12h, 3d); If not set, the retention period will default to the first config that's not null: the table config, then to cluster setting, then '7d'. Using 0d or -1d will instantly delete segments without retention",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/delete": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Delete the segments in the JSON array payload",
                "description": "Delete the segments in the JSON array payload",
                "operationId": "deleteSegments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "retention",
                        "in": "query",
                        "description": "Retention period for the table segments (e.g. 12h, 3d); If not set, the retention period will default to the first config that's not null: the table config, then to cluster setting, then '7d'. Using 0d or -1d will instantly delete segments without retention",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/{segmentName}": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Download a segment",
                "description": "Download a segment",
                "operationId": "downloadSegment",
                "produces": [
                    "application/octet-stream"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Segment"
                ],
                "summary": "Delete a segment",
                "description": "Delete a segment",
                "operationId": "deleteSegment",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "retention",
                        "in": "query",
                        "description": "Retention period for the table segments (e.g. 12h, 3d); If not set, the retention period will default to the first config that's not null: the table config, then to cluster setting, then '7d'. Using 0d or -1d will instantly delete segments without retention",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/reload": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Reload all segments",
                "description": "Reload all segments",
                "operationId": "reloadAllSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "forceDownload",
                        "in": "query",
                        "description": "Whether to force server to download segment",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/{segmentName}/reload": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Reload a segment",
                "description": "Reload a segment",
                "operationId": "reloadSegment",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "forceDownload",
                        "in": "query",
                        "description": "Whether to force server to download segment",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableNameWithType}/{segmentName}/reset": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Resets a segment by first disabling it, waiting for external view to stabilize, and finally enabling it again",
                "description": "Resets a segment by disabling and then enabling it",
                "operationId": "resetSegment",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableNameWithType",
                        "in": "path",
                        "description": "Name of the table with type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "targetInstance",
                        "in": "query",
                        "description": "Name of the target instance to reset",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableNameWithType}/reset": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Resets all segments (when errorSegmentsOnly = false) or segments with Error state (when errorSegmentsOnly = true) of the table, by first disabling them, waiting for external view to stabilize, and finally enabling them",
                "description": "Resets segments by disabling and then enabling them",
                "operationId": "resetSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableNameWithType",
                        "in": "path",
                        "description": "Name of the table with type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "targetInstance",
                        "in": "query",
                        "description": "Name of the target instance to reset",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "errorSegmentsOnly",
                        "in": "query",
                        "description": "Whether to reset only segments with error state",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/servers": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get a map from server to segments hosted by the server",
                "description": "Get a map from server to segments hosted by the server",
                "operationId": "getServerToSegmentsMap",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/lineage": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "List segment lineage",
                "description": "List segment lineage in chronologically sorted order",
                "operationId": "listSegmentLineage",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/tables/{tableName}/segments": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)",
                "description": "Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)",
                "operationId": "getServerToSegmentsMapDeprecated1",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "MUST be null",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/segments/metadata": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)",
                "description": "Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)",
                "operationId": "getServerToSegmentsMapDeprecated2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "MUST be null",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/crc": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get a map from segment to CRC of the segment (only apply to OFFLINE table)",
                "description": "Get a map from segment to CRC of the segment (only apply to OFFLINE table)",
                "operationId": "getSegmentToCrcMap",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/segments/crc": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get a map from segment to CRC of the segment (deprecated, use 'GET /segments/{tableName}/crc' instead)",
                "description": "Get a map from segment to CRC of the segment (deprecated, use 'GET /segments/{tableName}/crc' instead)",
                "operationId": "getSegmentToCrcMapDeprecated",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/segments/{segmentName}/metadata": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)",
                "description": "Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)",
                "operationId": "getSegmentMetadataDeprecated1",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/segments/{segmentName}": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)",
                "description": "Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)",
                "operationId": "getSegmentMetadataDeprecated2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "MUST be null",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/segments/{segmentName}/reload": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)",
                "description": "Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)",
                "operationId": "reloadSegmentDeprecated2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)",
                "description": "Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)",
                "operationId": "reloadSegmentDeprecated1",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/segmentReloadStatus/{jobId}": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get status for a submitted reload operation",
                "description": "Get status for a submitted reload operation",
                "operationId": "getReloadJobStatus",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "Reload job id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ServerReloadControllerJobStatusResponse"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/segments/reload": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)",
                "description": "Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)",
                "operationId": "reloadAllSegmentsDeprecated2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)",
                "description": "Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)",
                "operationId": "reloadAllSegmentsDeprecated1",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/metadata": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get the server metadata for all table segments",
                "description": "Get the server metadata for all table segments",
                "operationId": "getServerMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "columns",
                        "in": "query",
                        "description": "Columns name",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/tiers": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get storage tier for all segments in the given table",
                "description": "Get storage tier for all segments in the given table",
                "operationId": "getTableTiers",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/segments/{tableName}/{segmentName}/tiers": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get storage tiers for the given segment",
                "description": "Get storage tiers for the given segment",
                "operationId": "getSegmentTiers",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table or segment not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/segments/{tableName}/select": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get the selected segments given the (inclusive) start and (exclusive) end timestamps in milliseconds. These timestamps will be compared against the minmax values of the time column in each segment. If the table is a refresh use case, the value of start and end timestamp is voided, since there is no time column for refresh use case; instead, the whole qualified segments will be returned. If no timestamps are provided, all the qualified segments will be returned. For the segments that partially belong to the time range, the boolean flag 'excludeOverlapping' is introduced in order for user to determine whether to exclude this kind of segments in the response.",
                "description": "Get the selected segments given the start and end timestamps in milliseconds",
                "operationId": "getSelectedSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startTimestamp",
                        "in": "query",
                        "description": "Start timestamp (inclusive)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endTimestamp",
                        "in": "query",
                        "description": "End timestamp (exclusive)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "excludeOverlapping",
                        "in": "query",
                        "description": "Whether to exclude the segments overlapping with the timestamps, false by default",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/segments/{tableNameWithType}/updateZKTimeInterval": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Update the start and end time of the segments based on latest schema",
                "description": "Update the start and end time of the segments based on latest schema",
                "operationId": "updateTimeIntervalZK",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableNameWithType",
                        "in": "path",
                        "description": "Table name with type",
                        "required": true,
                        "type": "string",
                        "x-example": "myTable_REALTIME"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/segments/{tableName}/{segmentName}/metadata": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get the metadata for a segment",
                "description": "Get the metadata for a segment",
                "operationId": "getSegmentMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "columns",
                        "in": "query",
                        "description": "Columns name",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/startReplaceSegments": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Start to replace segments",
                "description": "Start to replace segments",
                "operationId": "startReplaceSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "forceCleanup",
                        "in": "query",
                        "description": "Force cleanup",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Fields belonging to start replace segment request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StartReplaceSegmentsRequest"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/segments/{tableName}/endReplaceSegments": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "End to replace segments",
                "description": "End to replace segments",
                "operationId": "endReplaceSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentLineageEntryId",
                        "in": "query",
                        "description": "Segment lineage entry id returned by startReplaceSegments API",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/segments/{tableName}/revertReplaceSegments": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Revert segments replacement",
                "description": "Revert segments replacement",
                "operationId": "revertReplaceSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentLineageEntryId",
                        "in": "query",
                        "description": "Segment lineage entry id to revert",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "forceRevert",
                        "in": "query",
                        "description": "Force revert in case the user knows that the lineage entry is interrupted",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/segments": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Upload a segment",
                "description": "Upload a segment as binary",
                "operationId": "uploadSegmentAsMultiPart",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FormDataMultiPart"
                        }
                    },
                    {
                        "name": "tableName",
                        "in": "query",
                        "description": "Name of the table",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tableType",
                        "in": "query",
                        "description": "Type of the table",
                        "required": false,
                        "type": "string",
                        "default": "OFFLINE"
                    },
                    {
                        "name": "enableParallelPushProtection",
                        "in": "query",
                        "description": "Whether to enable parallel push protection",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "allowRefresh",
                        "in": "query",
                        "description": "Whether to refresh if the segment already exists",
                        "required": false,
                        "type": "boolean",
                        "default": true
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully uploaded segment"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Segment validation fails"
                    },
                    "409": {
                        "description": "Segment already exists or another parallel push in progress"
                    },
                    "410": {
                        "description": "Segment to refresh does not exist"
                    },
                    "412": {
                        "description": "CRC check fails"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/v2/segments": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Upload a segment",
                "description": "Upload a segment as binary",
                "operationId": "uploadSegmentAsMultiPartV2",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FormDataMultiPart"
                        }
                    },
                    {
                        "name": "tableName",
                        "in": "query",
                        "description": "Name of the table",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tableType",
                        "in": "query",
                        "description": "Type of the table",
                        "required": false,
                        "type": "string",
                        "default": "OFFLINE"
                    },
                    {
                        "name": "enableParallelPushProtection",
                        "in": "query",
                        "description": "Whether to enable parallel push protection",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "allowRefresh",
                        "in": "query",
                        "description": "Whether to refresh if the segment already exists",
                        "required": false,
                        "type": "boolean",
                        "default": true
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully uploaded segment"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Segment validation fails"
                    },
                    "409": {
                        "description": "Segment already exists or another parallel push in progress"
                    },
                    "410": {
                        "description": "Segment to refresh does not exist"
                    },
                    "412": {
                        "description": "CRC check fails"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/tables/{tableName}/indexingConfigs": {
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "Update table indexing configuration",
                "description": "",
                "operationId": "updateIndexingConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name (without type)",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Server error updating configuration"
                    }
                }
            }
        },
        "/tables/{tableName}/livebrokers": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "List the brokers serving a table",
                "description": "List live brokers of the given table based on EV",
                "operationId": "getLiveBrokersForTable",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name (with or without type)",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/tables/{tableName}/instances": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "List table instances",
                "description": "List instances of the given table",
                "operationId": "getTableInstances",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name without type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Instance type",
                        "required": false,
                        "type": "string",
                        "x-example": "broker",
                        "enum": [
                            "BROKER",
                            "SERVER"
                        ]
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/tables/livebrokers": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "List tables to live brokers mappings",
                "description": "List tables to live brokers mappings based on EV",
                "operationId": "getLiveBrokers",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/tables/{tableName}/metadataConfigs": {
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "Update table metadata",
                "description": "Updates table configuration",
                "operationId": "updateTableMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/tables/{tableName}/rebalance": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Rebalances a table (reassign instances and segments for a table)",
                "description": "Rebalances a table (reassign instances and segments for a table)",
                "operationId": "rebalance",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table to rebalance",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dryRun",
                        "in": "query",
                        "description": "Whether to rebalance table in dry-run mode",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "reassignInstances",
                        "in": "query",
                        "description": "Whether to reassign instances before reassigning segments",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "includeConsuming",
                        "in": "query",
                        "description": "Whether to reassign CONSUMING segments for real-time table",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "bootstrap",
                        "in": "query",
                        "description": "Whether to rebalance table in bootstrap mode (regardless of minimum segment movement, reassign all segments in a round-robin fashion as if adding new segments to an empty table)",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "downtime",
                        "in": "query",
                        "description": "Whether to allow downtime for the rebalance",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "minAvailableReplicas",
                        "in": "query",
                        "description": "For no-downtime rebalance, minimum number of replicas to keep alive during rebalance, or maximum number of replicas allowed to be unavailable if value is negative",
                        "required": false,
                        "type": "integer",
                        "default": 1,
                        "format": "int32"
                    },
                    {
                        "name": "bestEfforts",
                        "in": "query",
                        "description": "Whether to use best-efforts to rebalance (not fail the rebalance when the no-downtime contract cannot be achieved)",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "externalViewCheckIntervalInMs",
                        "in": "query",
                        "description": "How often to check if external view converges with ideal states",
                        "required": false,
                        "type": "integer",
                        "default": 1000,
                        "format": "int64"
                    },
                    {
                        "name": "externalViewStabilizationTimeoutInMs",
                        "in": "query",
                        "description": "How long to wait till external view converges with ideal states",
                        "required": false,
                        "type": "integer",
                        "default": 3600000,
                        "format": "int64"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/RebalanceResult"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get/Enable/Disable/Drop a table",
                "description": "Get/Enable/Disable/Drop a table. If table name is the only parameter specified , the tableconfig will be printed",
                "operationId": "alterTableStateOrListTableConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "enable|disable|drop",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "Updates table config for a table",
                "description": "Updates table config for a table",
                "operationId": "updateTableConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "validationTypesToSkip",
                        "in": "query",
                        "description": "comma separated list of validation type(s) to skip. supported types: (ALL|TASK|UPSERT)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ConfigSuccessResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Table"
                ],
                "summary": "Deletes a table",
                "description": "Deletes a table",
                "operationId": "deleteTable",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table to delete",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "retention",
                        "in": "query",
                        "description": "Retention period for the table segments (e.g. 12h, 3d); If not set, the retention period will default to the first config that's not null: the cluster setting, then '7d'. Using 0d or -1d will instantly delete segments without retention",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/stats": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "table stats",
                "description": "Provides metadata info/stats about the table.",
                "operationId": "getTableStats",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/state": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get current table state",
                "description": "Get current table state",
                "operationId": "getTableState",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table to get its state",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tables/validateTableAndSchema": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Validate table config for a table along with specified schema",
                "description": "Deprecated. Use /tableConfigs/validate instead.Validate given table config and schema. If specified schema is null, attempt to retrieve schema using the table name. This API returns the table config that matches the one you get from 'GET /tables/{tableName}'. This allows us to validate table config before apply.",
                "operationId": "validateTableAndSchema",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TableAndSchemaConfig"
                        }
                    },
                    {
                        "name": "validationTypesToSkip",
                        "in": "query",
                        "description": "comma separated list of validation type(s) to skip. supported types: (ALL|TASK|UPSERT)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/status": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "table status",
                "description": "Provides status of the table including ingestion status",
                "operationId": "getTableStatus",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/metadata": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get the aggregate metadata of all segments for a table",
                "description": "Get the aggregate metadata of all segments for a table",
                "operationId": "getTableAggregateMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "columns",
                        "in": "query",
                        "description": "Columns name",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/table/{tableName}/jobs": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get list of controller jobs for this table",
                "description": "Get list of controller jobs for this table",
                "operationId": "getControllerJobs",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "jobTypes",
                        "in": "query",
                        "description": "Comma separated list of job types",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/timeBoundary": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Set hybrid table query time boundary based on offline segments' metadata",
                "description": "Set hybrid table query time boundary based on offline segments' metadata",
                "operationId": "setTimeBoundary",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the hybrid table (without type suffix)",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Table"
                ],
                "summary": "Delete hybrid table query time boundary",
                "description": "Delete hybrid table query time boundary",
                "operationId": "deleteTimeBoundary",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the hybrid table (without type suffix)",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tables/recommender": {
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "Recommend config",
                "description": "Recommend a config with input json",
                "operationId": "recommendConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tables": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Lists all tables in cluster",
                "description": "Lists all tables in cluster",
                "operationId": "listTables",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "taskType",
                        "in": "query",
                        "description": "Task type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sortType",
                        "in": "query",
                        "description": "name|creationTime|lastModifiedTime",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sortAsc",
                        "in": "query",
                        "description": "true|false",
                        "required": false,
                        "type": "boolean",
                        "default": true
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Adds a table",
                "description": "Adds a table",
                "operationId": "addTable",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "validationTypesToSkip",
                        "in": "query",
                        "description": "comma separated list of validation type(s) to skip. supported types: (ALL|TASK|UPSERT)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ConfigSuccessResponse"
                        }
                    }
                }
            }
        },
        "/tables/validate": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Validate table config for a table",
                "description": "This API returns the table config that matches the one you get from 'GET /tables/{tableName}'. This allows us to validate table config before apply.",
                "operationId": "checkTableConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "validationTypesToSkip",
                        "in": "query",
                        "description": "comma separated list of validation type(s) to skip. supported types: (ALL|TASK|UPSERT)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ObjectNode"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/schema": {
            "get": {
                "tags": [
                    "Schema"
                ],
                "summary": "Get table schema",
                "description": "Read table schema",
                "operationId": "getTableSchema",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name (without type)",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    }
                }
            }
        },
        "/tables/{tableName}/segmentConfigs": {
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "Update segments configuration",
                "description": "Updates segmentsConfig section (validation and retention) of a table",
                "operationId": "put",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/tables/{tableName}/rebuildBrokerResourceFromHelixTags": {
            "post": {
                "tags": [
                    "Table",
                    "Tenant"
                ],
                "summary": "Rebuild broker resource for table",
                "description": "when new brokers are added",
                "operationId": "rebuildBrokerResource",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name (with type)",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad request: table name has to be with table type"
                    },
                    "500": {
                        "description": "Internal error rebuilding broker resource or serializing response"
                    }
                }
            }
        },
        "/tasks/task/{taskName}/runtime/config": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the task runtime config for the given task",
                "description": "",
                "operationId": "getTaskConfig",
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/scheduler/information": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Fetch cron scheduler information",
                "description": "",
                "operationId": "getCronSchedulerInformation",
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/scheduler/jobKeys": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Fetch cron scheduler job keys",
                "description": "",
                "operationId": "getCronSchedulerJobKeys",
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JobKey"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/scheduler/jobDetails": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Fetch cron scheduler job keys",
                "description": "",
                "operationId": "getCronSchedulerJobDetails",
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "query",
                        "description": "Table name (with type suffix)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "taskType",
                        "in": "query",
                        "description": "Task type",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/execute": {
            "post": {
                "tags": [
                    "Task"
                ],
                "summary": "Execute a task on minion",
                "description": "",
                "operationId": "executeAdhocTask",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AdhocTaskConfig"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/tasks/scheduletasks": {
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Schedule tasks (deprecated)",
                "description": "",
                "operationId": "scheduleTasksDeprecated",
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}/cleanup": {
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Clean up finished tasks (COMPLETED, FAILED) for the given task type",
                "description": "",
                "operationId": "cleanUpTasks",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tasks/cleanuptasks/{taskType}": {
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Clean up finished tasks (COMPLETED, FAILED) for the given task type (deprecated)",
                "description": "",
                "operationId": "cleanUpTasksDeprecated",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}/stop": {
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Stop all running/pending tasks (as well as the task queue) for the given task type",
                "description": "",
                "operationId": "stopTasks",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}/resume": {
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Resume all stopped tasks (as well as the task queue) for the given task type",
                "description": "",
                "operationId": "resumeTasks",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tasks/taskqueue/{taskType}": {
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Stop/resume a task queue (deprecated)",
                "description": "",
                "operationId": "toggleTaskQueueState",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "state",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Task"
                ],
                "summary": "Delete a task queue (deprecated)",
                "description": "",
                "operationId": "deleteTaskQueue",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "forceDelete",
                        "in": "query",
                        "description": "Whether to force delete the task queue (expert only option, enable with cautious",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}": {
            "delete": {
                "tags": [
                    "Task"
                ],
                "summary": "Delete all tasks (as well as the task queue) for the given task type",
                "description": "",
                "operationId": "deleteTasks",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "forceDelete",
                        "in": "query",
                        "description": "Whether to force deleting the tasks (expert only option, enable with cautious",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tasks/taskqueuestate/{taskType}": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the state (task queue state) for the given task type (deprecated)",
                "description": "",
                "operationId": "getTaskQueueStateDeprecated",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/StringResultResponse"
                        }
                    }
                }
            }
        },
        "/tasks/tasktypes": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "List all task types",
                "description": "",
                "operationId": "listTaskTypes",
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "uniqueItems": true
                        }
                    }
                }
            }
        },
        "/tasks/generator/{tableNameWithType}/{taskType}/debug": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Fetch task generation information for the recent runs of the given task for the given table",
                "description": "",
                "operationId": "getTaskGenerationDebugInto",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tableNameWithType",
                        "in": "path",
                        "description": "Table name with type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "localOnly",
                        "in": "query",
                        "description": "Whether to only lookup local cache for logs",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tasks/tasks/{taskType}": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "List all tasks for the given task type (deprecated)",
                "description": "",
                "operationId": "getTasksDeprecated",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "uniqueItems": true
                        }
                    }
                }
            }
        },
        "/tasks/taskstates/{taskType}": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get a map from task to task state for the given task type (deprecated)",
                "description": "",
                "operationId": "getTaskStatesDeprecated",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string",
                                "enum": [
                                    "NOT_STARTED",
                                    "IN_PROGRESS",
                                    "STOPPED",
                                    "STOPPING",
                                    "FAILED",
                                    "COMPLETED",
                                    "ABORTED",
                                    "TIMED_OUT",
                                    "TIMING_OUT",
                                    "FAILING"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/tasks/taskstate/{taskName}": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the task state for the given task (deprecated)",
                "description": "",
                "operationId": "getTaskStateDeprecated",
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/StringResultResponse"
                        }
                    }
                }
            }
        },
        "/tasks/taskconfig/{taskName}": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the task config (a list of child task configs) for the given task (deprecated)",
                "description": "",
                "operationId": "getTaskConfigsDeprecated",
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PinotTaskConfig"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/task/{taskName}/config": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the task config (a list of child task configs) for the given task",
                "description": "",
                "operationId": "getTaskConfigs",
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PinotTaskConfig"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/task/{taskName}": {
            "delete": {
                "tags": [
                    "Task"
                ],
                "summary": "Delete a single task given its task name",
                "description": "",
                "operationId": "deleteTask",
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "forceDelete",
                        "in": "query",
                        "description": "Whether to force deleting the task (expert only option, enable with cautious",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tasks/taskqueues": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "List all task queues (deprecated)",
                "description": "",
                "operationId": "getTaskQueues",
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "uniqueItems": true
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}/state": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the state (task queue state) for the given task type",
                "description": "",
                "operationId": "getTaskQueueState",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "NOT_STARTED",
                                "IN_PROGRESS",
                                "STOPPED",
                                "STOPPING",
                                "FAILED",
                                "COMPLETED",
                                "ABORTED",
                                "TIMED_OUT",
                                "TIMING_OUT",
                                "FAILING"
                            ]
                        }
                    }
                }
            }
        },
        "/tasks/task/{taskName}/state": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the task state for the given task",
                "description": "",
                "operationId": "getTaskState",
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "NOT_STARTED",
                                "IN_PROGRESS",
                                "STOPPED",
                                "STOPPING",
                                "FAILED",
                                "COMPLETED",
                                "ABORTED",
                                "TIMED_OUT",
                                "TIMING_OUT",
                                "FAILING"
                            ]
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}/tasks": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "List all tasks for the given task type",
                "description": "",
                "operationId": "getTasks",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "uniqueItems": true
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}/taskstates": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get a map from task to task state for the given task type",
                "description": "",
                "operationId": "getTaskStates",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string",
                                "enum": [
                                    "NOT_STARTED",
                                    "IN_PROGRESS",
                                    "STOPPED",
                                    "STOPPING",
                                    "FAILED",
                                    "COMPLETED",
                                    "ABORTED",
                                    "TIMED_OUT",
                                    "TIMING_OUT",
                                    "FAILING"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/tasks/subtask/{taskName}/state": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the states of all the sub tasks for the given task",
                "description": "",
                "operationId": "getSubtaskStates",
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string",
                                "enum": [
                                    "INIT",
                                    "RUNNING",
                                    "STOPPED",
                                    "COMPLETED",
                                    "TIMED_OUT",
                                    "TASK_ERROR",
                                    "TASK_ABORTED",
                                    "ERROR",
                                    "DROPPED"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/tasks/subtask/{taskName}/config": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the configs of specified sub tasks for the given task",
                "description": "",
                "operationId": "getSubtaskConfigs",
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "subtaskNames",
                        "in": "query",
                        "description": "Sub task names separated by comma",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/PinotTaskConfig"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/subtask/{taskName}/progress": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get progress of specified sub tasks for the given task tracked by minion worker in memory",
                "description": "",
                "operationId": "getSubtaskProgress",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "subtaskNames",
                        "in": "query",
                        "description": "Sub task names separated by comma",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tasks/subtask/workers/progress": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get progress of all subtasks with specified state tracked by minion worker in memory",
                "description": "",
                "operationId": "getSubtaskOnWorkerProgress",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "subTaskState",
                        "in": "query",
                        "description": "Subtask state (UNKNOWN,IN_PROGRESS,SUCCEEDED,CANCELLED,ERROR)",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "minionWorkerIds",
                        "in": "query",
                        "description": "Minion worker IDs separated by comma",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/tasks/{taskType}/{tableNameWithType}/state": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "List all tasks for the given task type",
                "description": "",
                "operationId": "getTaskStatesByTable",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tableNameWithType",
                        "in": "path",
                        "description": "Table name with type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string",
                                "enum": [
                                    "NOT_STARTED",
                                    "IN_PROGRESS",
                                    "STOPPED",
                                    "STOPPING",
                                    "FAILED",
                                    "COMPLETED",
                                    "ABORTED",
                                    "TIMED_OUT",
                                    "TIMING_OUT",
                                    "FAILING"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}/taskcounts": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Fetch count of sub-tasks for each of the tasks for the given task type",
                "description": "",
                "operationId": "getTaskCounts",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/TaskCount"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}/debug": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Fetch information for all the tasks for the given task type",
                "description": "",
                "operationId": "getTasksDebugInfo",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "verbosity",
                        "in": "query",
                        "description": "verbosity (Prints information for all the tasks for the given task type.By default, only prints subtask details for running and error tasks. Value of > 0 prints subtask details for all tasks)",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/TaskDebugInfo"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}/{tableNameWithType}/debug": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Fetch information for all the tasks for the given task type and table",
                "description": "",
                "operationId": "getTasksDebugInfo_1",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tableNameWithType",
                        "in": "path",
                        "description": "Table name with type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "verbosity",
                        "in": "query",
                        "description": "verbosity (Prints information for all the tasks for the given task type and table.By default, only prints subtask details for running and error tasks. Value of > 0 prints subtask details for all tasks)",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/TaskDebugInfo"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/task/{taskName}/debug": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Fetch information for the given task name",
                "description": "",
                "operationId": "getTaskDebugInfo",
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "verbosity",
                        "in": "query",
                        "description": "verbosity (Prints information for the given task name.By default, only prints subtask details for running and error tasks. Value of > 0 prints subtask details for all tasks)",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TaskDebugInfo"
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}/{tableNameWithType}/metadata": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get task metadata for the given task type and table",
                "description": "",
                "operationId": "getTaskMetadataByTable",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tableNameWithType",
                        "in": "path",
                        "description": "Table name with type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Task"
                ],
                "summary": "Delete task metadata for the given task type and table",
                "description": "",
                "operationId": "deleteTaskMetadataByTable",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tableNameWithType",
                        "in": "path",
                        "description": "Table name with type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tasks/schedule": {
            "post": {
                "tags": [
                    "Task"
                ],
                "summary": "Schedule tasks and return a map from task type to task name scheduled",
                "description": "",
                "operationId": "scheduleTasks",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "query",
                        "description": "Task type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tableName",
                        "in": "query",
                        "description": "Table name (with type suffix)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tenants": {
            "get": {
                "tags": [
                    "Tenant"
                ],
                "summary": "List all tenants",
                "description": "",
                "operationId": "getAllTenants",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Tenant type",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "BROKER",
                            "SERVER"
                        ]
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Error reading tenants list"
                    }
                }
            },
            "post": {
                "tags": [
                    "Tenant"
                ],
                "summary": " Create a tenant",
                "description": "",
                "operationId": "createTenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Tenant"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Error creating tenant"
                    }
                }
            },
            "put": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Update a tenant",
                "description": "",
                "operationId": "updateTenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Tenant"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Failed to update the tenant"
                    }
                }
            }
        },
        "/tenants/{tenantName}": {
            "get": {
                "tags": [
                    "Tenant"
                ],
                "summary": "List instance for a tenant, or enable/disable/drop a tenant",
                "description": "",
                "operationId": "listInstanceOrToggleTenantState",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Tenant name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Tenant type (server|broker)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tableType",
                        "in": "query",
                        "description": "Table type (offline|realtime)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "state",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Error reading tenants list"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Delete a tenant",
                "description": "",
                "operationId": "deleteTenant",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Tenant name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Tenant type",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "SERVER",
                            "BROKER"
                        ]
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Tenant can not be deleted"
                    },
                    "404": {
                        "description": "Tenant not found"
                    },
                    "500": {
                        "description": "Error deleting tenant"
                    }
                }
            }
        },
        "/tenants/{tenantName}/tables": {
            "get": {
                "tags": [
                    "Tenant"
                ],
                "summary": "List tables on a a server tenant",
                "description": "",
                "operationId": "getTablesOnTenant",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Tenant name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Error reading list"
                    }
                }
            }
        },
        "/tenants/{tenantName}/metadata": {
            "get": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Get tenant information",
                "description": "",
                "operationId": "getTenantMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Tenant name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "tenant type",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "SERVER",
                            "BROKER"
                        ]
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TenantMetadata"
                        }
                    },
                    "404": {
                        "description": "Tenant not found"
                    },
                    "500": {
                        "description": "Server error reading tenant information"
                    }
                }
            },
            "post": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Change tenant state",
                "description": "",
                "operationId": "changeTenantState",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Tenant name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "tenant type",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "SERVER",
                            "BROKER"
                        ]
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "state",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "enable",
                            "disable",
                            "drop"
                        ]
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Tenant not found"
                    },
                    "500": {
                        "description": "Server error reading tenant information"
                    }
                }
            }
        },
        "/upsert/estimateHeapUsage": {
            "post": {
                "tags": [
                    "Upsert"
                ],
                "summary": "Estimate memory usage for an upsert table",
                "description": "This API returns the estimated heap usage based on primary key column stats. This allows us to estimate table size before onboarding.",
                "operationId": "estimateHeapUsage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cardinality",
                        "in": "query",
                        "description": "cardinality",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "primaryKeySize",
                        "in": "query",
                        "description": "primaryKeySize",
                        "required": false,
                        "type": "integer",
                        "default": -1,
                        "format": "int32"
                    },
                    {
                        "name": "numPartitions",
                        "in": "query",
                        "description": "numPartitions",
                        "required": false,
                        "type": "integer",
                        "default": -1,
                        "format": "int32"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "tags": [
                    "Version"
                ],
                "summary": "Get version number of Pinot components",
                "description": "",
                "operationId": "getVersionNumber",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/tableConfigs/{tableName}": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get the TableConfigs for a given raw tableName",
                "description": "Get the TableConfigs for a given raw tableName",
                "operationId": "getConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Raw table name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TableConfigV2"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "Update the TableConfigs provided by the tableConfigsStr json",
                "description": "Update the TableConfigs provided by the tableConfigsStr json",
                "operationId": "updateConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "TableConfigs name i.e. raw table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "validationTypesToSkip",
                        "in": "query",
                        "description": "comma separated list of validation type(s) to skip. supported types: (ALL|TASK|UPSERT)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "reload",
                        "in": "query",
                        "description": "Reload the table if the new schema is backward compatible",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ConfigSuccessResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Table"
                ],
                "summary": "Delete the TableConfigs",
                "description": "Delete the TableConfigs",
                "operationId": "deleteConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "TableConfigs name i.e. raw table name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tableConfigs": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Lists all TableConfigs in cluster",
                "description": "Lists all TableConfigs in cluster",
                "operationId": "listConfigs",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Add the TableConfigs using the tableConfigsStr json",
                "description": "Add the TableConfigs using the tableConfigsStr json",
                "operationId": "addConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "validationTypesToSkip",
                        "in": "query",
                        "description": "comma separated list of validation type(s) to skip. supported types: (ALL|TASK|UPSERT)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ConfigSuccessResponse"
                        }
                    }
                }
            }
        },
        "/tableConfigs/validate": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Validate the TableConfigs",
                "description": "Validate the TableConfigs",
                "operationId": "validateConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "validationTypesToSkip",
                        "in": "query",
                        "description": "comma separated list of validation type(s) to skip. supported types: (ALL|TASK|UPSERT)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/size": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Read table sizes",
                "description": "Get table size details. Table size is the size of untarred segments including replication",
                "operationId": "getTableSize",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name without type",
                        "required": true,
                        "type": "string",
                        "x-example": "myTable | myTable_OFFLINE"
                    },
                    {
                        "name": "detailed",
                        "in": "query",
                        "description": "Get detailed information",
                        "required": false,
                        "type": "boolean",
                        "default": true
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/tables/{tableName}/idealstate": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get table ideal state",
                "description": "Get table ideal state",
                "operationId": "getIdealState",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tableType",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TableView"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/externalview": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get table external view",
                "description": "Get table external view",
                "operationId": "getExternalView",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tableType",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": false,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TableView"
                        }
                    }
                }
            }
        },
        "/v1/write/config/{table}": {
            "get": {
                "tags": [
                    "WriteApi"
                ],
                "summary": "Get table config for write operation",
                "description": "Gets a config for specific table. May contain Kafka producer configs",
                "operationId": "getWriteConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "table",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            },
            "put": {
                "tags": [
                    "WriteApi"
                ],
                "summary": "Update table config for write operation",
                "description": "Gets a config for specific table. May contain Kafka producer configs",
                "operationId": "updateWriteConfig",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "table",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TableWriteConfig"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/v1/write/{table}": {
            "post": {
                "tags": [
                    "WriteApi"
                ],
                "summary": "Insert By POST Payload",
                "description": "Insert records into a table",
                "operationId": "insert",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "table",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/WritePayload"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/zk/delete": {
            "delete": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "Delete the znode at this path",
                "description": "",
                "operationId": "delete",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper Path, must start with /",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "ZK Path not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/zk/stat": {
            "get": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "Get the stat",
                "description": " Use this api to fetch additional details of a znode such as creation time, modified time, numChildren etc ",
                "operationId": "stat",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper Path, must start with /",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/zk/ls": {
            "get": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "List the child znodes",
                "description": "",
                "operationId": "ls",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper Path, must start with /",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "ZK Path not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/zk/getChildren": {
            "get": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "Get all child znodes",
                "description": "",
                "operationId": "getChildren",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper Path, must start with /",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "ZK Path not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/zk/get": {
            "get": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "Get content of the znode",
                "description": "",
                "operationId": "getData",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper Path, must start with /",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "ZK Path not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/zk/putChildren": {
            "put": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "Update the content of multiple znRecord node under the same path",
                "description": "",
                "operationId": "putChildren",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper path of parent, must start with /",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "query",
                        "description": "Content",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "expectedVersion",
                        "in": "query",
                        "description": "expectedVersion",
                        "required": false,
                        "type": "integer",
                        "default": -1,
                        "format": "int32"
                    },
                    {
                        "name": "accessOption",
                        "in": "query",
                        "description": "accessOption",
                        "required": false,
                        "type": "integer",
                        "default": 1,
                        "format": "int32"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "ZK Path not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/zk/put": {
            "put": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "Update the content of the node",
                "description": "",
                "operationId": "putData",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper Path, must start with /",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "query",
                        "description": "Content",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "expectedVersion",
                        "in": "query",
                        "description": "expectedVersion",
                        "required": false,
                        "type": "integer",
                        "default": -1,
                        "format": "int32"
                    },
                    {
                        "name": "accessOption",
                        "in": "query",
                        "description": "accessOption",
                        "required": false,
                        "type": "integer",
                        "default": 1,
                        "format": "int32"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "ZK Path not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/zk/lsl": {
            "get": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "List the child znodes along with Stats",
                "description": "",
                "operationId": "lsl",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper Path, must start with /",
                        "required": true,
                        "type": "string"
                    }
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "ZK Path not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "oauth": {
            "description": "",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "definitions": {
        "ClusterHealthResponse": {
            "type": "object",
            "properties": {
                "unhealthyServerCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "tableToMisconfiguredSegmentCount": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "tableToErrorSegmentsCount": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "tableToSegmentsWitHMissingColumnsCount": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            }
        },
        "PartitionOffsetInfo": {
            "type": "object",
            "properties": {
                "currentOffsetsMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "latestUpstreamOffsetMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "recordsLagMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "availabilityLagMsMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "SegmentConsumerInfo": {
            "type": "object",
            "properties": {
                "segmentName": {
                    "type": "string",
                    "readOnly": true
                },
                "consumerState": {
                    "type": "string",
                    "readOnly": true
                },
                "lastConsumedTimestamp": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true
                },
                "partitionToOffsetMap": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "partitionOffsetInfo": {
                    "readOnly": true,
                    "$ref": "#/definitions/PartitionOffsetInfo"
                }
            }
        },
        "SegmentDebugInfo": {
            "type": "object",
            "properties": {
                "segmentName": {
                    "type": "string",
                    "readOnly": true
                },
                "serverState": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "$ref": "#/definitions/SegmentState"
                    }
                }
            }
        },
        "SegmentErrorInfo": {
            "type": "object",
            "properties": {
                "timestamp": {
                    "type": "string",
                    "readOnly": true
                },
                "errorMessage": {
                    "type": "string",
                    "readOnly": true
                },
                "stackTrace": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "SegmentState": {
            "type": "object",
            "properties": {
                "idealState": {
                    "type": "string",
                    "readOnly": true
                },
                "externalView": {
                    "type": "string",
                    "readOnly": true
                },
                "segmentSize": {
                    "type": "string",
                    "readOnly": true
                },
                "consumerInfo": {
                    "readOnly": true,
                    "$ref": "#/definitions/SegmentConsumerInfo"
                },
                "errorInfo": {
                    "readOnly": true,
                    "$ref": "#/definitions/SegmentErrorInfo"
                }
            }
        },
        "SuccessResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "InstanceInfo": {
            "type": "object",
            "properties": {
                "port": {
                    "type": "integer",
                    "format": "int32"
                },
                "host": {
                    "type": "string"
                },
                "instanceName": {
                    "type": "string"
                }
            }
        },
        "AuthWorkflowInfo": {
            "type": "object",
            "properties": {
                "workflow": {
                    "type": "string"
                }
            }
        },
        "BodyPart": {
            "type": "object",
            "properties": {
                "contentDisposition": {
                    "$ref": "#/definitions/ContentDisposition"
                },
                "entity": {
                    "type": "object"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "mediaType": {
                    "$ref": "#/definitions/MediaType"
                },
                "messageBodyWorkers": {
                    "$ref": "#/definitions/MessageBodyWorkers"
                },
                "parent": {
                    "$ref": "#/definitions/MultiPart"
                },
                "providers": {
                    "$ref": "#/definitions/Providers"
                },
                "parameterizedHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ParameterizedHeader"
                        }
                    }
                }
            }
        },
        "ContentDisposition": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fileName": {
                    "type": "string"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "modificationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "readDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "size": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "FormDataBodyPart": {
            "type": "object",
            "properties": {
                "contentDisposition": {
                    "$ref": "#/definitions/ContentDisposition"
                },
                "entity": {
                    "type": "object"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "mediaType": {
                    "$ref": "#/definitions/MediaType"
                },
                "messageBodyWorkers": {
                    "$ref": "#/definitions/MessageBodyWorkers"
                },
                "parent": {
                    "$ref": "#/definitions/MultiPart"
                },
                "providers": {
                    "$ref": "#/definitions/Providers"
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "simple": {
                    "type": "boolean"
                },
                "formDataContentDisposition": {
                    "$ref": "#/definitions/FormDataContentDisposition"
                },
                "parameterizedHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ParameterizedHeader"
                        }
                    }
                }
            }
        },
        "FormDataContentDisposition": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fileName": {
                    "type": "string"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "modificationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "readDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "size": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "FormDataMultiPart": {
            "type": "object",
            "properties": {
                "contentDisposition": {
                    "$ref": "#/definitions/ContentDisposition"
                },
                "entity": {
                    "type": "object"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "mediaType": {
                    "$ref": "#/definitions/MediaType"
                },
                "messageBodyWorkers": {
                    "$ref": "#/definitions/MessageBodyWorkers"
                },
                "parent": {
                    "$ref": "#/definitions/MultiPart"
                },
                "providers": {
                    "$ref": "#/definitions/Providers"
                },
                "bodyParts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BodyPart"
                    }
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/FormDataBodyPart"
                        }
                    }
                },
                "parameterizedHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ParameterizedHeader"
                        }
                    }
                }
            }
        },
        "MediaType": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "subtype": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "wildcardSubtype": {
                    "type": "boolean"
                },
                "wildcardType": {
                    "type": "boolean"
                }
            }
        },
        "MessageBodyWorkers": {
            "type": "object"
        },
        "MultiPart": {
            "type": "object",
            "properties": {
                "contentDisposition": {
                    "$ref": "#/definitions/ContentDisposition"
                },
                "entity": {
                    "type": "object"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "mediaType": {
                    "$ref": "#/definitions/MediaType"
                },
                "messageBodyWorkers": {
                    "$ref": "#/definitions/MessageBodyWorkers"
                },
                "parent": {
                    "$ref": "#/definitions/MultiPart"
                },
                "providers": {
                    "$ref": "#/definitions/Providers"
                },
                "bodyParts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BodyPart"
                    }
                },
                "parameterizedHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ParameterizedHeader"
                        }
                    }
                }
            }
        },
        "ParameterizedHeader": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "Providers": {
            "type": "object"
        },
        "InstancePartitions": {
            "type": "object",
            "properties": {
                "instancePartitionsName": {
                    "type": "string",
                    "readOnly": true
                },
                "partitionToInstancesMap": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "Instance": {
            "type": "object",
            "required": [
                "host",
                "port",
                "type"
            ],
            "properties": {
                "host": {
                    "type": "string",
                    "readOnly": true
                },
                "port": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "type": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "CONTROLLER",
                        "BROKER",
                        "SERVER",
                        "MINION"
                    ]
                },
                "tags": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "pools": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "grpcPort": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "adminPort": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "queryServicePort": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "queryMailboxPort": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "queriesDisabled": {
                    "type": "boolean",
                    "readOnly": true
                }
            }
        },
        "Instances": {
            "type": "object",
            "properties": {
                "instances": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "LeadControllerEntry": {
            "type": "object",
            "properties": {
                "tableNames": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "leadControllerId": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "LeadControllerResponse": {
            "type": "object",
            "properties": {
                "leadControllerResourceEnabled": {
                    "type": "boolean"
                },
                "leadControllerEntryMap": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/LeadControllerEntry"
                    }
                }
            }
        },
        "ConsumingSegmentInfo": {
            "type": "object",
            "properties": {
                "serverName": {
                    "type": "string"
                },
                "consumerState": {
                    "type": "string"
                },
                "lastConsumedTimestamp": {
                    "type": "integer",
                    "format": "int64"
                },
                "partitionToOffsetMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "partitionOffsetInfo": {
                    "$ref": "#/definitions/PartitionOffsetInfo"
                }
            }
        },
        "ConsumingSegmentsInfoMap": {
            "type": "object",
            "properties": {
                "_segmentToConsumingInfoMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ConsumingSegmentInfo"
                        }
                    }
                }
            }
        },
        "JsonNode": {
            "type": "object"
        },
        "ConfigSuccessResponse": {
            "type": "object",
            "properties": {
                "unrecognizedProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "ServerReloadControllerJobStatusResponse": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "successCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalSegmentCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalServersQueried": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalServerCallsFailed": {
                    "type": "integer",
                    "format": "int32"
                },
                "timeElapsedInMinutes": {
                    "type": "number",
                    "format": "double"
                },
                "estimatedTimeRemainingInMinutes": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "TableTierDetails": {
            "type": "object",
            "properties": {
                "tableName": {
                    "type": "string",
                    "description": "Name of table to look for segment storage tiers",
                    "readOnly": true
                },
                "segmentTiers": {
                    "type": "object",
                    "description": "Storage tiers of segments for the given table",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "StartReplaceSegmentsRequest": {
            "type": "object",
            "properties": {
                "segmentsFrom": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "segmentsTo": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "RebalanceResult": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "NO_OP",
                        "DONE",
                        "FAILED",
                        "IN_PROGRESS"
                    ]
                },
                "description": {
                    "type": "string",
                    "readOnly": true
                },
                "instanceAssignment": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "$ref": "#/definitions/InstancePartitions"
                    }
                },
                "segmentAssignment": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "AggregationConfig": {
            "type": "object",
            "properties": {
                "columnName": {
                    "type": "string",
                    "readOnly": true
                },
                "aggregationFunction": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "BatchIngestionConfig": {
            "type": "object",
            "properties": {
                "batchConfigMaps": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "segmentIngestionType": {
                    "type": "string"
                },
                "segmentIngestionFrequency": {
                    "type": "string"
                },
                "consistentDataPush": {
                    "type": "boolean"
                }
            }
        },
        "BloomFilterConfig": {
            "type": "object",
            "properties": {
                "fpp": {
                    "type": "number",
                    "format": "double",
                    "readOnly": true
                },
                "maxSizeInBytes": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "loadOnHeap": {
                    "type": "boolean",
                    "readOnly": true
                }
            }
        },
        "ColumnPartitionConfig": {
            "type": "object",
            "required": [
                "functionName",
                "numPartitions"
            ],
            "properties": {
                "functionName": {
                    "type": "string",
                    "readOnly": true
                },
                "numPartitions": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "functionConfig": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "CompletionConfig": {
            "type": "object",
            "required": [
                "completionMode"
            ],
            "properties": {
                "completionMode": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "ComplexTypeConfig": {
            "type": "object",
            "properties": {
                "fieldsToUnnest": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "delimiter": {
                    "type": "string",
                    "readOnly": true
                },
                "collectionNotUnnestedToJson": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "NONE",
                        "NON_PRIMITIVE",
                        "ALL"
                    ]
                },
                "prefixesToRename": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "DateTimeFieldSpec": {
            "type": "object",
            "properties": {
                "format": {
                    "type": "string"
                },
                "sampleValue": {
                    "type": "object"
                },
                "granularity": {
                    "type": "string"
                },
                "singleValueField": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "maxLength": {
                    "type": "integer",
                    "format": "int32"
                },
                "dataType": {
                    "type": "string",
                    "enum": [
                        "INT",
                        "LONG",
                        "FLOAT",
                        "DOUBLE",
                        "BIG_DECIMAL",
                        "BOOLEAN",
                        "TIMESTAMP",
                        "STRING",
                        "JSON",
                        "BYTES",
                        "STRUCT",
                        "MAP",
                        "LIST"
                    ]
                },
                "transformFunction": {
                    "type": "string"
                },
                "defaultNullValue": {
                    "type": "object"
                },
                "virtualColumnProvider": {
                    "type": "string"
                },
                "defaultNullValueString": {
                    "type": "string"
                }
            }
        },
        "DedupConfig": {
            "type": "object",
            "required": [
                "dedupEnabled"
            ],
            "properties": {
                "dedupEnabled": {
                    "type": "boolean",
                    "readOnly": true
                },
                "hashFunction": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "NONE",
                        "MD5",
                        "MURMUR3"
                    ]
                }
            }
        },
        "DimensionFieldSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "maxLength": {
                    "type": "integer",
                    "format": "int32"
                },
                "dataType": {
                    "type": "string",
                    "enum": [
                        "INT",
                        "LONG",
                        "FLOAT",
                        "DOUBLE",
                        "BIG_DECIMAL",
                        "BOOLEAN",
                        "TIMESTAMP",
                        "STRING",
                        "JSON",
                        "BYTES",
                        "STRUCT",
                        "MAP",
                        "LIST"
                    ]
                },
                "transformFunction": {
                    "type": "string"
                },
                "defaultNullValue": {
                    "type": "object"
                },
                "singleValueField": {
                    "type": "boolean"
                },
                "virtualColumnProvider": {
                    "type": "string"
                },
                "defaultNullValueString": {
                    "type": "string"
                }
            }
        },
        "DimensionTableConfig": {
            "type": "object",
            "required": [
                "disablePreload"
            ],
            "properties": {
                "disablePreload": {
                    "type": "boolean",
                    "readOnly": true
                }
            }
        },
        "FieldConfig": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "readOnly": true
                },
                "encodingType": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "RAW",
                        "DICTIONARY"
                    ]
                },
                "indexType": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "INVERTED",
                        "SORTED",
                        "TEXT",
                        "FST",
                        "H3",
                        "JSON",
                        "TIMESTAMP",
                        "RANGE"
                    ]
                },
                "indexTypes": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string",
                        "enum": [
                            "INVERTED",
                            "SORTED",
                            "TEXT",
                            "FST",
                            "H3",
                            "JSON",
                            "TIMESTAMP",
                            "RANGE"
                        ]
                    }
                },
                "compressionCodec": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "PASS_THROUGH",
                        "SNAPPY",
                        "ZSTANDARD",
                        "LZ4"
                    ]
                },
                "timestampConfig": {
                    "readOnly": true,
                    "$ref": "#/definitions/TimestampConfig"
                },
                "properties": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "FilterConfig": {
            "type": "object",
            "properties": {
                "filterFunction": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "IndexingConfig": {
            "type": "object",
            "properties": {
                "segmentNameGeneratorType": {
                    "type": "string"
                },
                "streamConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "invertedIndexColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "noDictionaryColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rangeIndexColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rangeIndexVersion": {
                    "type": "integer",
                    "format": "int32"
                },
                "fstindexType": {
                    "type": "string",
                    "enum": [
                        "LUCENE",
                        "NATIVE"
                    ]
                },
                "jsonIndexColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonIndexConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/JsonIndexConfig"
                    }
                },
                "autoGeneratedInvertedIndex": {
                    "type": "boolean"
                },
                "createInvertedIndexDuringSegmentGeneration": {
                    "type": "boolean"
                },
                "sortedColumn": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bloomFilterColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bloomFilterConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/BloomFilterConfig"
                    }
                },
                "loadMode": {
                    "type": "string"
                },
                "segmentFormatVersion": {
                    "type": "string"
                },
                "columnMinMaxValueGeneratorMode": {
                    "type": "string"
                },
                "noDictionaryConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "onHeapDictionaryColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "varLengthDictionaryColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enableDefaultStarTree": {
                    "type": "boolean"
                },
                "starTreeIndexConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StarTreeIndexConfig"
                    }
                },
                "enableDynamicStarTreeCreation": {
                    "type": "boolean"
                },
                "segmentPartitionConfig": {
                    "$ref": "#/definitions/SegmentPartitionConfig"
                },
                "aggregateMetrics": {
                    "type": "boolean"
                },
                "nullHandlingEnabled": {
                    "type": "boolean"
                },
                "optimizeDictionary": {
                    "type": "boolean"
                },
                "optimizeDictionaryForMetrics": {
                    "type": "boolean"
                },
                "noDictionarySizeRatioThreshold": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "IngestionConfig": {
            "type": "object",
            "properties": {
                "streamIngestionConfig": {
                    "$ref": "#/definitions/StreamIngestionConfig"
                },
                "batchIngestionConfig": {
                    "$ref": "#/definitions/BatchIngestionConfig"
                },
                "filterConfig": {
                    "$ref": "#/definitions/FilterConfig"
                },
                "transformConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransformConfig"
                    }
                },
                "complexTypeConfig": {
                    "$ref": "#/definitions/ComplexTypeConfig"
                },
                "aggregationConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AggregationConfig"
                    }
                },
                "continueOnError": {
                    "type": "boolean"
                },
                "rowTimeValueCheck": {
                    "type": "boolean"
                },
                "segmentTimeValueCheck": {
                    "type": "boolean"
                }
            }
        },
        "InstanceAssignmentConfig": {
            "type": "object",
            "required": [
                "replicaGroupPartitionConfig",
                "tagPoolConfig"
            ],
            "properties": {
                "tagPoolConfig": {
                    "readOnly": true,
                    "$ref": "#/definitions/InstanceTagPoolConfig"
                },
                "constraintConfig": {
                    "readOnly": true,
                    "$ref": "#/definitions/InstanceConstraintConfig"
                },
                "replicaGroupPartitionConfig": {
                    "readOnly": true,
                    "$ref": "#/definitions/InstanceReplicaGroupPartitionConfig"
                },
                "partitionSelector": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "FD_AWARE_INSTANCE_PARTITION_SELECTOR",
                        "INSTANCE_REPLICA_GROUP_PARTITION_SELECTOR"
                    ]
                }
            }
        },
        "InstanceConstraintConfig": {
            "type": "object",
            "required": [
                "constraints"
            ],
            "properties": {
                "constraints": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "InstanceReplicaGroupPartitionConfig": {
            "type": "object",
            "properties": {
                "replicaGroupBased": {
                    "type": "boolean",
                    "readOnly": true
                },
                "numInstances": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "numReplicaGroups": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "numInstancesPerReplicaGroup": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "numPartitions": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "numInstancesPerPartition": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "minimizeDataMovement": {
                    "type": "boolean",
                    "readOnly": true
                }
            }
        },
        "InstanceTagPoolConfig": {
            "type": "object",
            "required": [
                "tag"
            ],
            "properties": {
                "tag": {
                    "type": "string",
                    "readOnly": true
                },
                "poolBased": {
                    "type": "boolean",
                    "readOnly": true
                },
                "numPools": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "pools": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            }
        },
        "JsonIndexConfig": {
            "type": "object",
            "properties": {
                "maxLevels": {
                    "type": "integer",
                    "format": "int32"
                },
                "excludeArray": {
                    "type": "boolean"
                },
                "excludeFields": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "disableCrossArrayUnnest": {
                    "type": "boolean"
                },
                "includePaths": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "excludePaths": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "MetricFieldSpec": {
            "type": "object",
            "properties": {
                "singleValueField": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "maxLength": {
                    "type": "integer",
                    "format": "int32"
                },
                "dataType": {
                    "type": "string",
                    "enum": [
                        "INT",
                        "LONG",
                        "FLOAT",
                        "DOUBLE",
                        "BIG_DECIMAL",
                        "BOOLEAN",
                        "TIMESTAMP",
                        "STRING",
                        "JSON",
                        "BYTES",
                        "STRUCT",
                        "MAP",
                        "LIST"
                    ]
                },
                "transformFunction": {
                    "type": "string"
                },
                "defaultNullValue": {
                    "type": "object"
                },
                "virtualColumnProvider": {
                    "type": "string"
                },
                "defaultNullValueString": {
                    "type": "string"
                }
            }
        },
        "QueryConfig": {
            "type": "object",
            "properties": {
                "timeoutMs": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true
                },
                "disableGroovy": {
                    "type": "boolean",
                    "readOnly": true
                },
                "useApproximateFunction": {
                    "type": "boolean",
                    "readOnly": true
                },
                "expressionOverrideMap": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "QuotaConfig": {
            "type": "object",
            "properties": {
                "storage": {
                    "type": "string",
                    "readOnly": true
                },
                "maxQueriesPerSecond": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "ReplicaGroupStrategyConfig": {
            "type": "object",
            "required": [
                "numInstancesPerPartition"
            ],
            "properties": {
                "partitionColumn": {
                    "type": "string",
                    "readOnly": true
                },
                "numInstancesPerPartition": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                }
            }
        },
        "RoutingConfig": {
            "type": "object",
            "properties": {
                "routingTableBuilderName": {
                    "type": "string",
                    "readOnly": true
                },
                "segmentPrunerTypes": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "instanceSelectorType": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "Schema": {
            "type": "object",
            "properties": {
                "schemaName": {
                    "type": "string"
                },
                "metricFieldSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MetricFieldSpec"
                    }
                },
                "dateTimeFieldSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DateTimeFieldSpec"
                    }
                },
                "timeFieldSpec": {
                    "$ref": "#/definitions/TimeFieldSpec"
                },
                "primaryKeyColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dimensionFieldSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DimensionFieldSpec"
                    }
                }
            }
        },
        "SegmentAssignmentConfig": {
            "type": "object",
            "properties": {
                "assignmentStrategy": {
                    "type": "string"
                }
            }
        },
        "SegmentPartitionConfig": {
            "type": "object",
            "required": [
                "columnPartitionMap"
            ],
            "properties": {
                "columnPartitionMap": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "$ref": "#/definitions/ColumnPartitionConfig"
                    }
                }
            }
        },
        "SegmentsValidationAndRetentionConfig": {
            "type": "object",
            "properties": {
                "timeType": {
                    "type": "string",
                    "enum": [
                        "NANOSECONDS",
                        "MICROSECONDS",
                        "MILLISECONDS",
                        "SECONDS",
                        "MINUTES",
                        "HOURS",
                        "DAYS"
                    ]
                },
                "schemaName": {
                    "type": "string"
                },
                "replication": {
                    "type": "string"
                },
                "retentionTimeUnit": {
                    "type": "string"
                },
                "retentionTimeValue": {
                    "type": "string"
                },
                "replicasPerPartition": {
                    "type": "string"
                },
                "deletedSegmentsRetentionPeriod": {
                    "type": "string"
                },
                "segmentPushFrequency": {
                    "type": "string"
                },
                "segmentPushType": {
                    "type": "string"
                },
                "segmentAssignmentStrategy": {
                    "type": "string"
                },
                "timeColumnName": {
                    "type": "string"
                },
                "replicaGroupStrategyConfig": {
                    "$ref": "#/definitions/ReplicaGroupStrategyConfig"
                },
                "completionConfig": {
                    "$ref": "#/definitions/CompletionConfig"
                },
                "peerSegmentDownloadScheme": {
                    "type": "string"
                },
                "crypterClassName": {
                    "type": "string"
                },
                "minimizeDataMovement": {
                    "type": "boolean"
                }
            }
        },
        "StarTreeIndexConfig": {
            "type": "object",
            "required": [
                "dimensionsSplitOrder",
                "functionColumnPairs"
            ],
            "properties": {
                "dimensionsSplitOrder": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "skipStarNodeCreationForDimensions": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "functionColumnPairs": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "maxLeafRecords": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                }
            }
        },
        "StreamIngestionConfig": {
            "type": "object",
            "properties": {
                "streamConfigMaps": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "TableAndSchemaConfig": {
            "type": "object",
            "required": [
                "tableConfig"
            ],
            "properties": {
                "tableConfig": {
                    "readOnly": true,
                    "$ref": "#/definitions/TableConfig"
                },
                "schema": {
                    "readOnly": true,
                    "$ref": "#/definitions/Schema"
                }
            }
        },
        "TableConfig": {
            "type": "object",
            "properties": {
                "tableName": {
                    "type": "string",
                    "readOnly": true
                },
                "tableType": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "OFFLINE",
                        "REALTIME"
                    ]
                },
                "segmentsConfig": {
                    "$ref": "#/definitions/SegmentsValidationAndRetentionConfig"
                },
                "tenants": {
                    "$ref": "#/definitions/TenantConfig"
                },
                "tableIndexConfig": {
                    "$ref": "#/definitions/IndexingConfig"
                },
                "metadata": {
                    "$ref": "#/definitions/TableCustomConfig"
                },
                "quota": {
                    "$ref": "#/definitions/QuotaConfig"
                },
                "task": {
                    "$ref": "#/definitions/TableTaskConfig"
                },
                "routing": {
                    "$ref": "#/definitions/RoutingConfig"
                },
                "query": {
                    "$ref": "#/definitions/QueryConfig"
                },
                "instanceAssignmentConfigMap": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/InstanceAssignmentConfig"
                    }
                },
                "fieldConfigList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FieldConfig"
                    }
                },
                "upsertConfig": {
                    "$ref": "#/definitions/UpsertConfig"
                },
                "dedupConfig": {
                    "$ref": "#/definitions/DedupConfig"
                },
                "dimensionTableConfig": {
                    "$ref": "#/definitions/DimensionTableConfig"
                },
                "ingestionConfig": {
                    "$ref": "#/definitions/IngestionConfig"
                },
                "tierConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TierConfig"
                    }
                },
                "isDimTable": {
                    "type": "boolean",
                    "readOnly": true
                },
                "tunerConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TunerConfig"
                    }
                },
                "instancePartitionsMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "segmentAssignmentConfigMap": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/SegmentAssignmentConfig"
                    }
                }
            }
        },
        "TableConfigV2": {
            "type": "object",
            "required": [
                "tableName",
                "schema"
            ],
            "properties": {
                "tableName": {
                    "type": "string"
                },
                "schema": {
                    "type": "object",
                    "required": [
                        "schemaName"
                    ],
                    "properties": {
                        "schemaName": {
                            "type": "string"
                        },
                        "dimensionFieldSpecs": {
                            "type": "array",
                            "items": {}
                        },
                        "metricFieldSpecs": {
                            "type": "array",
                            "items": {}
                        },
                        "dateTimeFieldSpecs": {
                            "type": "array",
                            "items": {}
                        },
                        "primaryKeyColumns": {
                            "type": "array",
                            "items": {}
                        }
                    }
                },
                "offline": {
                    "type": "object",
                    "required": [
                        "tableName",
                        "tableType",
                        "segmentsConfig",
                        "tenants",
                        "tableIndexConfig",
                        "metadata",
                        "task",
                        "ingestionConfig",
                        "isDimTable"
                    ],
                    "properties": {
                        "tableName": {
                            "type": "string"
                        },
                        "tableType": {
                            "type": "string"
                        },
                        "segmentsConfig": {
                            "type": "object",
                            "required": [
                                "schemaName",
                                "replication",
                                "retentionTimeUnit",
                                "retentionTimeValue",
                                "deletedSegmentsRetentionPeriod",
                                "segmentPushType",
                                "segmentAssignmentStrategy",
                                "timeColumnName",
                                "minimizeDataMovement"
                            ],
                            "properties": {
                                "schemaName": {
                                    "type": "string"
                                },
                                "replication": {
                                    "type": "string"
                                },
                                "retentionTimeUnit": {
                                    "type": "string"
                                },
                                "retentionTimeValue": {
                                    "type": "string"
                                },
                                "deletedSegmentsRetentionPeriod": {
                                    "type": "string"
                                },
                                "segmentPushType": {
                                    "type": "string"
                                },
                                "segmentAssignmentStrategy": {
                                    "type": "string"
                                },
                                "timeColumnName": {
                                    "type": "string"
                                },
                                "minimizeDataMovement": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "tenants": {
                            "type": "object",
                            "required": [
                                "broker",
                                "server"
                            ],
                            "properties": {
                                "broker": {
                                    "type": "string"
                                },
                                "server": {
                                    "type": "string"
                                }
                            }
                        },
                        "tableIndexConfig": {
                            "type": "object",
                            "required": [
                                "invertedIndexColumns",
                                "noDictionaryColumns",
                                "rangeIndexVersion",
                                "autoGeneratedInvertedIndex",
                                "createInvertedIndexDuringSegmentGeneration",
                                "loadMode",
                                "varLengthDictionaryColumns",
                                "enableDefaultStarTree",
                                "enableDynamicStarTreeCreation",
                                "aggregateMetrics",
                                "nullHandlingEnabled",
                                "optimizeDictionary",
                                "optimizeDictionaryForMetrics",
                                "noDictionarySizeRatioThreshold"
                            ],
                            "properties": {
                                "invertedIndexColumns": {
                                    "type": "array",
                                    "items": {}
                                },
                                "noDictionaryColumns": {
                                    "type": "array",
                                    "items": {}
                                },
                                "rangeIndexVersion": {
                                    "type": "integer"
                                },
                                "autoGeneratedInvertedIndex": {
                                    "type": "boolean"
                                },
                                "createInvertedIndexDuringSegmentGeneration": {
                                    "type": "boolean"
                                },
                                "loadMode": {
                                    "type": "string"
                                },
                                "varLengthDictionaryColumns": {
                                    "type": "array",
                                    "items": {}
                                },
                                "enableDefaultStarTree": {
                                    "type": "boolean"
                                },
                                "enableDynamicStarTreeCreation": {
                                    "type": "boolean"
                                },
                                "aggregateMetrics": {
                                    "type": "boolean"
                                },
                                "nullHandlingEnabled": {
                                    "type": "boolean"
                                },
                                "optimizeDictionary": {
                                    "type": "boolean"
                                },
                                "optimizeDictionaryForMetrics": {
                                    "type": "boolean"
                                },
                                "noDictionarySizeRatioThreshold": {
                                    "type": "number"
                                }
                            }
                        },
                        "metadata": {
                            "type": "object",
                            "properties": {}
                        },
                        "task": {
                            "type": "object",
                            "required": [
                                "taskTypeConfigsMap"
                            ],
                            "properties": {
                                "taskTypeConfigsMap": {
                                    "type": "object",
                                    "required": [
                                        "FileIngestionTask"
                                    ],
                                    "properties": {
                                        "FileIngestionTask": {
                                            "type": "object",
                                            "required": [
                                                "input.fs.prop.secretKey",
                                                "schedule",
                                                "input.fs.className",
                                                "input.fs.prop.region",
                                                "inputDirURI",
                                                "input.fs.prop.accessKey",
                                                "taskMaxDataSize",
                                                "tableMaxNumTasks",
                                                "inputFormat"
                                            ],
                                            "properties": {
                                                "input.fs.prop.secretKey": {
                                                    "type": "string"
                                                },
                                                "schedule": {
                                                    "type": "string"
                                                },
                                                "input.fs.className": {
                                                    "type": "string"
                                                },
                                                "input.fs.prop.region": {
                                                    "type": "string"
                                                },
                                                "inputDirURI": {
                                                    "type": "string"
                                                },
                                                "input.fs.prop.accessKey": {
                                                    "type": "string"
                                                },
                                                "taskMaxDataSize": {
                                                    "type": "string"
                                                },
                                                "tableMaxNumTasks": {
                                                    "type": "string"
                                                },
                                                "inputFormat": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "ingestionConfig": {
                            "type": "object",
                            "required": [
                                "batchIngestionConfig",
                                "transformConfigs",
                                "continueOnError",
                                "rowTimeValueCheck",
                                "segmentTimeValueCheck"
                            ],
                            "properties": {
                                "batchIngestionConfig": {
                                    "type": "object",
                                    "required": [
                                        "segmentIngestionType",
                                        "consistentDataPush"
                                    ],
                                    "properties": {
                                        "segmentIngestionType": {
                                            "type": "string"
                                        },
                                        "consistentDataPush": {
                                            "type": "boolean"
                                        }
                                    }
                                },
                                "transformConfigs": {
                                    "type": "array",
                                    "items": {}
                                },
                                "continueOnError": {
                                    "type": "boolean"
                                },
                                "rowTimeValueCheck": {
                                    "type": "boolean"
                                },
                                "segmentTimeValueCheck": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "isDimTable": {
                            "type": "boolean"
                        }
                    }
                },
                "realtime": {
                    "type": "object",
                    "required": [
                        "tableName",
                        "tableType",
                        "segmentsConfig",
                        "tenants",
                        "tableIndexConfig",
                        "metadata",
                        "routing",
                        "upsertConfig",
                        "ingestionConfig",
                        "isDimTable"
                    ],
                    "properties": {
                        "tableName": {
                            "type": "string"
                        },
                        "tableType": {
                            "type": "string"
                        },
                        "segmentsConfig": {
                            "type": "object",
                            "required": [
                                "schemaName",
                                "replication",
                                "retentionTimeUnit",
                                "retentionTimeValue",
                                "replicasPerPartition",
                                "deletedSegmentsRetentionPeriod",
                                "segmentPushType",
                                "segmentAssignmentStrategy",
                                "timeColumnName",
                                "minimizeDataMovement"
                            ],
                            "properties": {
                                "schemaName": {
                                    "type": "string"
                                },
                                "replication": {
                                    "type": "string"
                                },
                                "retentionTimeUnit": {
                                    "type": "string"
                                },
                                "retentionTimeValue": {
                                    "type": "string"
                                },
                                "replicasPerPartition": {
                                    "type": "string"
                                },
                                "deletedSegmentsRetentionPeriod": {
                                    "type": "string"
                                },
                                "segmentPushType": {
                                    "type": "string"
                                },
                                "segmentAssignmentStrategy": {
                                    "type": "string"
                                },
                                "timeColumnName": {
                                    "type": "string"
                                },
                                "minimizeDataMovement": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "tenants": {
                            "type": "object",
                            "required": [
                                "broker",
                                "server"
                            ],
                            "properties": {
                                "broker": {
                                    "type": "string"
                                },
                                "server": {
                                    "type": "string"
                                }
                            }
                        },
                        "tableIndexConfig": {
                            "type": "object",
                            "required": [
                                "invertedIndexColumns",
                                "noDictionaryColumns",
                                "rangeIndexVersion",
                                "autoGeneratedInvertedIndex",
                                "createInvertedIndexDuringSegmentGeneration",
                                "sortedColumn",
                                "loadMode",
                                "varLengthDictionaryColumns",
                                "enableDefaultStarTree",
                                "enableDynamicStarTreeCreation",
                                "segmentPartitionConfig",
                                "aggregateMetrics",
                                "nullHandlingEnabled",
                                "optimizeDictionary",
                                "optimizeDictionaryForMetrics",
                                "noDictionarySizeRatioThreshold"
                            ],
                            "properties": {
                                "invertedIndexColumns": {
                                    "type": "array",
                                    "items": {}
                                },
                                "noDictionaryColumns": {
                                    "type": "array",
                                    "items": {}
                                },
                                "rangeIndexVersion": {
                                    "type": "integer"
                                },
                                "autoGeneratedInvertedIndex": {
                                    "type": "boolean"
                                },
                                "createInvertedIndexDuringSegmentGeneration": {
                                    "type": "boolean"
                                },
                                "sortedColumn": {
                                    "type": "array",
                                    "items": {}
                                },
                                "loadMode": {
                                    "type": "string"
                                },
                                "varLengthDictionaryColumns": {
                                    "type": "array",
                                    "items": {}
                                },
                                "enableDefaultStarTree": {
                                    "type": "boolean"
                                },
                                "enableDynamicStarTreeCreation": {
                                    "type": "boolean"
                                },
                                "segmentPartitionConfig": {
                                    "type": "object",
                                    "required": [
                                        "columnPartitionMap"
                                    ],
                                    "properties": {
                                        "columnPartitionMap": {
                                            "type": "object",
                                            "required": [
                                                "city",
                                                "id"
                                            ],
                                            "properties": {
                                                "city": {
                                                    "type": "object",
                                                    "required": [
                                                        "functionName",
                                                        "numPartitions"
                                                    ],
                                                    "properties": {
                                                        "functionName": {
                                                            "type": "string"
                                                        },
                                                        "numPartitions": {
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                "id": {
                                                    "type": "object",
                                                    "required": [
                                                        "functionName",
                                                        "numPartitions"
                                                    ],
                                                    "properties": {
                                                        "functionName": {
                                                            "type": "string"
                                                        },
                                                        "numPartitions": {
                                                            "type": "integer"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "aggregateMetrics": {
                                    "type": "boolean"
                                },
                                "nullHandlingEnabled": {
                                    "type": "boolean"
                                },
                                "optimizeDictionary": {
                                    "type": "boolean"
                                },
                                "optimizeDictionaryForMetrics": {
                                    "type": "boolean"
                                },
                                "noDictionarySizeRatioThreshold": {
                                    "type": "number"
                                }
                            }
                        },
                        "metadata": {
                            "type": "object",
                            "properties": {}
                        },
                        "routing": {
                            "type": "object",
                            "required": [
                                "segmentPrunerTypes",
                                "instanceSelectorType"
                            ],
                            "properties": {
                                "segmentPrunerTypes": {
                                    "type": "array",
                                    "items": {}
                                },
                                "instanceSelectorType": {
                                    "type": "string"
                                }
                            }
                        },
                        "upsertConfig": {
                            "type": "object",
                            "required": [
                                "mode",
                                "hashFunction",
                                "enableSnapshot"
                            ],
                            "properties": {
                                "mode": {
                                    "type": "string"
                                },
                                "hashFunction": {
                                    "type": "string"
                                },
                                "enableSnapshot": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "ingestionConfig": {
                            "type": "object",
                            "required": [
                                "streamIngestionConfig",
                                "transformConfigs",
                                "continueOnError",
                                "rowTimeValueCheck",
                                "segmentTimeValueCheck"
                            ],
                            "properties": {
                                "streamIngestionConfig": {
                                    "type": "object",
                                    "required": [
                                        "streamConfigMaps"
                                    ],
                                    "properties": {
                                        "streamConfigMaps": {
                                            "type": "array",
                                            "items": {}
                                        }
                                    }
                                },
                                "transformConfigs": {
                                    "type": "array",
                                    "items": {}
                                },
                                "continueOnError": {
                                    "type": "boolean"
                                },
                                "rowTimeValueCheck": {
                                    "type": "boolean"
                                },
                                "segmentTimeValueCheck": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "isDimTable": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "TableCustomConfig": {
            "type": "object",
            "properties": {
                "customConfigs": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "TableTaskConfig": {
            "type": "object",
            "properties": {
                "taskTypeConfigsMap": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "TagOverrideConfig": {
            "type": "object",
            "properties": {
                "realtimeConsuming": {
                    "type": "string",
                    "readOnly": true
                },
                "realtimeCompleted": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "TenantConfig": {
            "type": "object",
            "properties": {
                "broker": {
                    "type": "string",
                    "readOnly": true
                },
                "server": {
                    "type": "string",
                    "readOnly": true
                },
                "tagOverrideConfig": {
                    "readOnly": true,
                    "$ref": "#/definitions/TagOverrideConfig"
                }
            }
        },
        "TierConfig": {
            "type": "object",
            "required": [
                "name",
                "segmentSelectorType",
                "storageType"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "readOnly": true
                },
                "segmentSelectorType": {
                    "type": "string",
                    "readOnly": true
                },
                "segmentAge": {
                    "type": "string",
                    "readOnly": true
                },
                "segmentList": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "storageType": {
                    "type": "string",
                    "readOnly": true
                },
                "serverTag": {
                    "type": "string",
                    "readOnly": true
                },
                "tierBackend": {
                    "type": "string",
                    "readOnly": true
                },
                "tierBackendProperties": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "TimeFieldSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "incomingGranularitySpec": {
                    "$ref": "#/definitions/TimeGranularitySpec"
                },
                "dataType": {
                    "type": "string",
                    "enum": [
                        "INT",
                        "LONG",
                        "FLOAT",
                        "DOUBLE",
                        "BIG_DECIMAL",
                        "BOOLEAN",
                        "TIMESTAMP",
                        "STRING",
                        "JSON",
                        "BYTES",
                        "STRUCT",
                        "MAP",
                        "LIST"
                    ]
                },
                "outgoingGranularitySpec": {
                    "$ref": "#/definitions/TimeGranularitySpec"
                },
                "singleValueField": {
                    "type": "boolean"
                },
                "maxLength": {
                    "type": "integer",
                    "format": "int32"
                },
                "transformFunction": {
                    "type": "string"
                },
                "defaultNullValue": {
                    "type": "object"
                },
                "virtualColumnProvider": {
                    "type": "string"
                },
                "defaultNullValueString": {
                    "type": "string"
                }
            }
        },
        "TimeGranularitySpec": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "dataType": {
                    "type": "string",
                    "enum": [
                        "INT",
                        "LONG",
                        "FLOAT",
                        "DOUBLE",
                        "BIG_DECIMAL",
                        "BOOLEAN",
                        "TIMESTAMP",
                        "STRING",
                        "JSON",
                        "BYTES",
                        "STRUCT",
                        "MAP",
                        "LIST"
                    ]
                },
                "timeType": {
                    "type": "string",
                    "enum": [
                        "NANOSECONDS",
                        "MICROSECONDS",
                        "MILLISECONDS",
                        "SECONDS",
                        "MINUTES",
                        "HOURS",
                        "DAYS"
                    ]
                },
                "timeUnitSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "timeFormat": {
                    "type": "string"
                }
            }
        },
        "TimestampConfig": {
            "type": "object",
            "properties": {
                "granularities": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string",
                        "enum": [
                            "MILLISECOND",
                            "SECOND",
                            "MINUTE",
                            "HOUR",
                            "DAY",
                            "WEEK",
                            "MONTH",
                            "QUARTER",
                            "YEAR"
                        ]
                    }
                }
            }
        },
        "TransformConfig": {
            "type": "object",
            "properties": {
                "columnName": {
                    "type": "string",
                    "readOnly": true
                },
                "transformFunction": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "TunerConfig": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "tunerProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "UpsertConfig": {
            "type": "object",
            "required": [
                "mode"
            ],
            "properties": {
                "mode": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "FULL",
                        "PARTIAL",
                        "NONE"
                    ]
                },
                "partialUpsertStrategies": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "enum": [
                            "APPEND",
                            "IGNORE",
                            "INCREMENT",
                            "MAX",
                            "MIN",
                            "OVERWRITE",
                            "UNION"
                        ]
                    }
                },
                "defaultPartialUpsertStrategy": {
                    "type": "string",
                    "enum": [
                        "APPEND",
                        "IGNORE",
                        "INCREMENT",
                        "MAX",
                        "MIN",
                        "OVERWRITE",
                        "UNION"
                    ]
                },
                "comparisonColumn": {
                    "type": "string"
                },
                "hashFunction": {
                    "type": "string",
                    "enum": [
                        "NONE",
                        "MD5",
                        "MURMUR3"
                    ]
                },
                "enableSnapshot": {
                    "type": "boolean"
                },
                "metadataManagerClass": {
                    "type": "string"
                },
                "metadataManagerConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "ObjectNode": {
            "type": "object"
        },
        "JobKey": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "group": {
                    "type": "string"
                }
            }
        },
        "AdhocTaskConfig": {
            "type": "object",
            "required": [
                "tableName",
                "taskType"
            ],
            "properties": {
                "taskType": {
                    "type": "string",
                    "readOnly": true
                },
                "tableName": {
                    "type": "string",
                    "readOnly": true
                },
                "taskName": {
                    "type": "string",
                    "readOnly": true
                },
                "taskConfigs": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "StringResultResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "string"
                }
            }
        },
        "PinotTaskConfig": {
            "type": "object",
            "properties": {
                "tableName": {
                    "type": "string"
                },
                "configs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "taskId": {
                    "type": "string"
                },
                "taskType": {
                    "type": "string"
                }
            }
        },
        "TaskCount": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer",
                    "format": "int32"
                },
                "completed": {
                    "type": "integer",
                    "format": "int32"
                },
                "running": {
                    "type": "integer",
                    "format": "int32"
                },
                "waiting": {
                    "type": "integer",
                    "format": "int32"
                },
                "error": {
                    "type": "integer",
                    "format": "int32"
                },
                "unknown": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "SubtaskDebugInfo": {
            "type": "object",
            "properties": {
                "taskId": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "INIT",
                        "RUNNING",
                        "STOPPED",
                        "COMPLETED",
                        "TIMED_OUT",
                        "TASK_ERROR",
                        "TASK_ABORTED",
                        "ERROR",
                        "DROPPED"
                    ]
                },
                "startTime": {
                    "type": "string"
                },
                "finishTime": {
                    "type": "string"
                },
                "participant": {
                    "type": "string"
                },
                "info": {
                    "type": "string"
                },
                "taskConfig": {
                    "$ref": "#/definitions/PinotTaskConfig"
                }
            }
        },
        "TaskDebugInfo": {
            "type": "object",
            "properties": {
                "taskState": {
                    "type": "string",
                    "enum": [
                        "NOT_STARTED",
                        "IN_PROGRESS",
                        "STOPPED",
                        "STOPPING",
                        "FAILED",
                        "COMPLETED",
                        "ABORTED",
                        "TIMED_OUT",
                        "TIMING_OUT",
                        "FAILING"
                    ]
                },
                "subtaskCount": {
                    "$ref": "#/definitions/TaskCount"
                },
                "startTime": {
                    "type": "string"
                },
                "executionStartTime": {
                    "type": "string"
                },
                "finishTime": {
                    "type": "string"
                },
                "subtaskInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubtaskDebugInfo"
                    }
                }
            }
        },
        "Tenant": {
            "type": "object",
            "required": [
                "tenantName",
                "tenantRole"
            ],
            "properties": {
                "tenantRole": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "SERVER",
                        "BROKER",
                        "MINION"
                    ]
                },
                "tenantName": {
                    "type": "string",
                    "readOnly": true
                },
                "numberOfInstances": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "offlineInstances": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "realtimeInstances": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                }
            }
        },
        "TenantsList": {
            "type": "object",
            "properties": {
                "SERVER_TENANTS": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "BROKER_TENANTS": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "TenantMetadata": {
            "type": "object",
            "properties": {
                "ServerInstances": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "OfflineServerInstances": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "RealtimeServerInstances": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "BrokerInstances": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "tenantName": {
                    "type": "string"
                }
            }
        },
        "SegmentSizeDetails": {
            "type": "object",
            "properties": {
                "reportedSizeInBytes": {
                    "type": "integer",
                    "format": "int64"
                },
                "estimatedSizeInBytes": {
                    "type": "integer",
                    "format": "int64"
                },
                "serverInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/SegmentSizeInfo"
                    }
                }
            }
        },
        "SegmentSizeInfo": {
            "type": "object",
            "properties": {
                "segmentName": {
                    "type": "string",
                    "readOnly": true
                },
                "diskSizeInBytes": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true
                }
            }
        },
        "TableSizeDetails": {
            "type": "object",
            "properties": {
                "tableName": {
                    "type": "string"
                },
                "reportedSizeInBytes": {
                    "type": "integer",
                    "format": "int64"
                },
                "estimatedSizeInBytes": {
                    "type": "integer",
                    "format": "int64"
                },
                "offlineSegments": {
                    "$ref": "#/definitions/TableSubTypeSizeDetails"
                },
                "realtimeSegments": {
                    "$ref": "#/definitions/TableSubTypeSizeDetails"
                }
            }
        },
        "TableSubTypeSizeDetails": {
            "type": "object",
            "properties": {
                "reportedSizeInBytes": {
                    "type": "integer",
                    "format": "int64"
                },
                "estimatedSizeInBytes": {
                    "type": "integer",
                    "format": "int64"
                },
                "missingSegments": {
                    "type": "integer",
                    "format": "int32"
                },
                "segments": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/SegmentSizeDetails"
                    }
                }
            }
        },
        "TableView": {
            "type": "object",
            "properties": {
                "OFFLINE": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "REALTIME": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "TableWriteConfig": {
            "type": "object",
            "properties": {
                "topic": {
                    "type": "string"
                },
                "producerConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "encoderConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "encoderClass": {
                    "type": "string"
                },
                "producerType": {
                    "type": "string"
                },
                "partitionColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "WritePayload": {
            "type": "object",
            "properties": {
                "values": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                },
                "columnNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rows": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            }
        }
    }
}