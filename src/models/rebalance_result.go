// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RebalanceResult rebalance result
//
// swagger:model RebalanceResult
type RebalanceResult struct {

	// description
	// Read Only: true
	Description string `json:"description,omitempty"`

	// instance assignment
	// Read Only: true
	InstanceAssignment map[string]InstancePartitions `json:"instanceAssignment,omitempty"`

	// segment assignment
	// Read Only: true
	SegmentAssignment map[string]map[string]string `json:"segmentAssignment,omitempty"`

	// status
	// Read Only: true
	// Enum: [NO_OP DONE FAILED IN_PROGRESS]
	Status string `json:"status,omitempty"`
}

// Validate validates this rebalance result
func (m *RebalanceResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceAssignment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RebalanceResult) validateInstanceAssignment(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceAssignment) { // not required
		return nil
	}

	for k := range m.InstanceAssignment {

		if err := validate.Required("instanceAssignment"+"."+k, "body", m.InstanceAssignment[k]); err != nil {
			return err
		}
		if val, ok := m.InstanceAssignment[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instanceAssignment" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instanceAssignment" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

var rebalanceResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NO_OP","DONE","FAILED","IN_PROGRESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rebalanceResultTypeStatusPropEnum = append(rebalanceResultTypeStatusPropEnum, v)
	}
}

const (

	// RebalanceResultStatusNOOP captures enum value "NO_OP"
	RebalanceResultStatusNOOP string = "NO_OP"

	// RebalanceResultStatusDONE captures enum value "DONE"
	RebalanceResultStatusDONE string = "DONE"

	// RebalanceResultStatusFAILED captures enum value "FAILED"
	RebalanceResultStatusFAILED string = "FAILED"

	// RebalanceResultStatusINPROGRESS captures enum value "IN_PROGRESS"
	RebalanceResultStatusINPROGRESS string = "IN_PROGRESS"
)

// prop value enum
func (m *RebalanceResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rebalanceResultTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RebalanceResult) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this rebalance result based on the context it is used
func (m *RebalanceResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstanceAssignment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSegmentAssignment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RebalanceResult) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *RebalanceResult) contextValidateInstanceAssignment(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.InstanceAssignment {

		if val, ok := m.InstanceAssignment[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *RebalanceResult) contextValidateSegmentAssignment(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RebalanceResult) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RebalanceResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RebalanceResult) UnmarshalBinary(b []byte) error {
	var res RebalanceResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
