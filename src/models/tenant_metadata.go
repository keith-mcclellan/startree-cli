// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantMetadata tenant metadata
//
// swagger:model TenantMetadata
type TenantMetadata struct {

	// broker instances
	// Unique: true
	BrokerInstances []string `json:"BrokerInstances"`

	// offline server instances
	// Unique: true
	OfflineServerInstances []string `json:"OfflineServerInstances"`

	// realtime server instances
	// Unique: true
	RealtimeServerInstances []string `json:"RealtimeServerInstances"`

	// server instances
	// Unique: true
	ServerInstances []string `json:"ServerInstances"`

	// tenant name
	TenantName string `json:"tenantName,omitempty"`
}

// Validate validates this tenant metadata
func (m *TenantMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrokerInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfflineServerInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealtimeServerInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerInstances(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantMetadata) validateBrokerInstances(formats strfmt.Registry) error {
	if swag.IsZero(m.BrokerInstances) { // not required
		return nil
	}

	if err := validate.UniqueItems("BrokerInstances", "body", m.BrokerInstances); err != nil {
		return err
	}

	return nil
}

func (m *TenantMetadata) validateOfflineServerInstances(formats strfmt.Registry) error {
	if swag.IsZero(m.OfflineServerInstances) { // not required
		return nil
	}

	if err := validate.UniqueItems("OfflineServerInstances", "body", m.OfflineServerInstances); err != nil {
		return err
	}

	return nil
}

func (m *TenantMetadata) validateRealtimeServerInstances(formats strfmt.Registry) error {
	if swag.IsZero(m.RealtimeServerInstances) { // not required
		return nil
	}

	if err := validate.UniqueItems("RealtimeServerInstances", "body", m.RealtimeServerInstances); err != nil {
		return err
	}

	return nil
}

func (m *TenantMetadata) validateServerInstances(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerInstances) { // not required
		return nil
	}

	if err := validate.UniqueItems("ServerInstances", "body", m.ServerInstances); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tenant metadata based on context it is used
func (m *TenantMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TenantMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantMetadata) UnmarshalBinary(b []byte) error {
	var res TenantMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
