// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TableSizeDetails table size details
//
// swagger:model TableSizeDetails
type TableSizeDetails struct {

	// estimated size in bytes
	EstimatedSizeInBytes int64 `json:"estimatedSizeInBytes,omitempty"`

	// offline segments
	OfflineSegments *TableSubTypeSizeDetails `json:"offlineSegments,omitempty"`

	// realtime segments
	RealtimeSegments *TableSubTypeSizeDetails `json:"realtimeSegments,omitempty"`

	// reported size in bytes
	ReportedSizeInBytes int64 `json:"reportedSizeInBytes,omitempty"`

	// table name
	TableName string `json:"tableName,omitempty"`
}

// Validate validates this table size details
func (m *TableSizeDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOfflineSegments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealtimeSegments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TableSizeDetails) validateOfflineSegments(formats strfmt.Registry) error {
	if swag.IsZero(m.OfflineSegments) { // not required
		return nil
	}

	if m.OfflineSegments != nil {
		if err := m.OfflineSegments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("offlineSegments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("offlineSegments")
			}
			return err
		}
	}

	return nil
}

func (m *TableSizeDetails) validateRealtimeSegments(formats strfmt.Registry) error {
	if swag.IsZero(m.RealtimeSegments) { // not required
		return nil
	}

	if m.RealtimeSegments != nil {
		if err := m.RealtimeSegments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("realtimeSegments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("realtimeSegments")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this table size details based on the context it is used
func (m *TableSizeDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOfflineSegments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRealtimeSegments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TableSizeDetails) contextValidateOfflineSegments(ctx context.Context, formats strfmt.Registry) error {

	if m.OfflineSegments != nil {
		if err := m.OfflineSegments.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("offlineSegments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("offlineSegments")
			}
			return err
		}
	}

	return nil
}

func (m *TableSizeDetails) contextValidateRealtimeSegments(ctx context.Context, formats strfmt.Registry) error {

	if m.RealtimeSegments != nil {
		if err := m.RealtimeSegments.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("realtimeSegments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("realtimeSegments")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TableSizeDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TableSizeDetails) UnmarshalBinary(b []byte) error {
	var res TableSizeDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
