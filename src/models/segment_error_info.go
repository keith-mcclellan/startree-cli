// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SegmentErrorInfo segment error info
//
// swagger:model SegmentErrorInfo
type SegmentErrorInfo struct {

	// error message
	// Read Only: true
	ErrorMessage string `json:"errorMessage,omitempty"`

	// stack trace
	// Read Only: true
	StackTrace string `json:"stackTrace,omitempty"`

	// timestamp
	// Read Only: true
	Timestamp string `json:"timestamp,omitempty"`
}

// Validate validates this segment error info
func (m *SegmentErrorInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this segment error info based on the context it is used
func (m *SegmentErrorInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrorMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStackTrace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SegmentErrorInfo) contextValidateErrorMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "errorMessage", "body", string(m.ErrorMessage)); err != nil {
		return err
	}

	return nil
}

func (m *SegmentErrorInfo) contextValidateStackTrace(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "stackTrace", "body", string(m.StackTrace)); err != nil {
		return err
	}

	return nil
}

func (m *SegmentErrorInfo) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "timestamp", "body", string(m.Timestamp)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SegmentErrorInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SegmentErrorInfo) UnmarshalBinary(b []byte) error {
	var res SegmentErrorInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
