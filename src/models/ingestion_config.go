// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IngestionConfig ingestion config
//
// swagger:model IngestionConfig
type IngestionConfig struct {

	// aggregation configs
	AggregationConfigs []*AggregationConfig `json:"aggregationConfigs"`

	// batch ingestion config
	BatchIngestionConfig *BatchIngestionConfig `json:"batchIngestionConfig,omitempty"`

	// complex type config
	ComplexTypeConfig *ComplexTypeConfig `json:"complexTypeConfig,omitempty"`

	// continue on error
	ContinueOnError bool `json:"continueOnError,omitempty"`

	// filter config
	FilterConfig *FilterConfig `json:"filterConfig,omitempty"`

	// row time value check
	RowTimeValueCheck bool `json:"rowTimeValueCheck,omitempty"`

	// segment time value check
	SegmentTimeValueCheck bool `json:"segmentTimeValueCheck,omitempty"`

	// stream ingestion config
	StreamIngestionConfig *StreamIngestionConfig `json:"streamIngestionConfig,omitempty"`

	// transform configs
	TransformConfigs []*TransformConfig `json:"transformConfigs"`
}

// Validate validates this ingestion config
func (m *IngestionConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregationConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatchIngestionConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComplexTypeConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamIngestionConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransformConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionConfig) validateAggregationConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.AggregationConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.AggregationConfigs); i++ {
		if swag.IsZero(m.AggregationConfigs[i]) { // not required
			continue
		}

		if m.AggregationConfigs[i] != nil {
			if err := m.AggregationConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregationConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aggregationConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IngestionConfig) validateBatchIngestionConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchIngestionConfig) { // not required
		return nil
	}

	if m.BatchIngestionConfig != nil {
		if err := m.BatchIngestionConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchIngestionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchIngestionConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IngestionConfig) validateComplexTypeConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ComplexTypeConfig) { // not required
		return nil
	}

	if m.ComplexTypeConfig != nil {
		if err := m.ComplexTypeConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("complexTypeConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("complexTypeConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IngestionConfig) validateFilterConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterConfig) { // not required
		return nil
	}

	if m.FilterConfig != nil {
		if err := m.FilterConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filterConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filterConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IngestionConfig) validateStreamIngestionConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.StreamIngestionConfig) { // not required
		return nil
	}

	if m.StreamIngestionConfig != nil {
		if err := m.StreamIngestionConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("streamIngestionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("streamIngestionConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IngestionConfig) validateTransformConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.TransformConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.TransformConfigs); i++ {
		if swag.IsZero(m.TransformConfigs[i]) { // not required
			continue
		}

		if m.TransformConfigs[i] != nil {
			if err := m.TransformConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transformConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transformConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ingestion config based on the context it is used
func (m *IngestionConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggregationConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBatchIngestionConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComplexTypeConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilterConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStreamIngestionConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransformConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionConfig) contextValidateAggregationConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AggregationConfigs); i++ {

		if m.AggregationConfigs[i] != nil {
			if err := m.AggregationConfigs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregationConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aggregationConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IngestionConfig) contextValidateBatchIngestionConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchIngestionConfig != nil {
		if err := m.BatchIngestionConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchIngestionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchIngestionConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IngestionConfig) contextValidateComplexTypeConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ComplexTypeConfig != nil {
		if err := m.ComplexTypeConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("complexTypeConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("complexTypeConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IngestionConfig) contextValidateFilterConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.FilterConfig != nil {
		if err := m.FilterConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filterConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filterConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IngestionConfig) contextValidateStreamIngestionConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.StreamIngestionConfig != nil {
		if err := m.StreamIngestionConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("streamIngestionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("streamIngestionConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IngestionConfig) contextValidateTransformConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransformConfigs); i++ {

		if m.TransformConfigs[i] != nil {
			if err := m.TransformConfigs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transformConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transformConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionConfig) UnmarshalBinary(b []byte) error {
	var res IngestionConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
