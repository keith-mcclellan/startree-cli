// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeFieldSpec time field spec
//
// swagger:model TimeFieldSpec
type TimeFieldSpec struct {

	// data type
	// Enum: [INT LONG FLOAT DOUBLE BIG_DECIMAL BOOLEAN TIMESTAMP STRING JSON BYTES STRUCT MAP LIST]
	DataType string `json:"dataType,omitempty"`

	// default null value
	DefaultNullValue interface{} `json:"defaultNullValue,omitempty"`

	// default null value string
	DefaultNullValueString string `json:"defaultNullValueString,omitempty"`

	// incoming granularity spec
	IncomingGranularitySpec *TimeGranularitySpec `json:"incomingGranularitySpec,omitempty"`

	// max length
	MaxLength int32 `json:"maxLength,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// outgoing granularity spec
	OutgoingGranularitySpec *TimeGranularitySpec `json:"outgoingGranularitySpec,omitempty"`

	// single value field
	SingleValueField bool `json:"singleValueField,omitempty"`

	// transform function
	TransformFunction string `json:"transformFunction,omitempty"`

	// virtual column provider
	VirtualColumnProvider string `json:"virtualColumnProvider,omitempty"`
}

// Validate validates this time field spec
func (m *TimeFieldSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncomingGranularitySpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutgoingGranularitySpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var timeFieldSpecTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INT","LONG","FLOAT","DOUBLE","BIG_DECIMAL","BOOLEAN","TIMESTAMP","STRING","JSON","BYTES","STRUCT","MAP","LIST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeFieldSpecTypeDataTypePropEnum = append(timeFieldSpecTypeDataTypePropEnum, v)
	}
}

const (

	// TimeFieldSpecDataTypeINT captures enum value "INT"
	TimeFieldSpecDataTypeINT string = "INT"

	// TimeFieldSpecDataTypeLONG captures enum value "LONG"
	TimeFieldSpecDataTypeLONG string = "LONG"

	// TimeFieldSpecDataTypeFLOAT captures enum value "FLOAT"
	TimeFieldSpecDataTypeFLOAT string = "FLOAT"

	// TimeFieldSpecDataTypeDOUBLE captures enum value "DOUBLE"
	TimeFieldSpecDataTypeDOUBLE string = "DOUBLE"

	// TimeFieldSpecDataTypeBIGDECIMAL captures enum value "BIG_DECIMAL"
	TimeFieldSpecDataTypeBIGDECIMAL string = "BIG_DECIMAL"

	// TimeFieldSpecDataTypeBOOLEAN captures enum value "BOOLEAN"
	TimeFieldSpecDataTypeBOOLEAN string = "BOOLEAN"

	// TimeFieldSpecDataTypeTIMESTAMP captures enum value "TIMESTAMP"
	TimeFieldSpecDataTypeTIMESTAMP string = "TIMESTAMP"

	// TimeFieldSpecDataTypeSTRING captures enum value "STRING"
	TimeFieldSpecDataTypeSTRING string = "STRING"

	// TimeFieldSpecDataTypeJSON captures enum value "JSON"
	TimeFieldSpecDataTypeJSON string = "JSON"

	// TimeFieldSpecDataTypeBYTES captures enum value "BYTES"
	TimeFieldSpecDataTypeBYTES string = "BYTES"

	// TimeFieldSpecDataTypeSTRUCT captures enum value "STRUCT"
	TimeFieldSpecDataTypeSTRUCT string = "STRUCT"

	// TimeFieldSpecDataTypeMAP captures enum value "MAP"
	TimeFieldSpecDataTypeMAP string = "MAP"

	// TimeFieldSpecDataTypeLIST captures enum value "LIST"
	TimeFieldSpecDataTypeLIST string = "LIST"
)

// prop value enum
func (m *TimeFieldSpec) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, timeFieldSpecTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TimeFieldSpec) validateDataType(formats strfmt.Registry) error {
	if swag.IsZero(m.DataType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataTypeEnum("dataType", "body", m.DataType); err != nil {
		return err
	}

	return nil
}

func (m *TimeFieldSpec) validateIncomingGranularitySpec(formats strfmt.Registry) error {
	if swag.IsZero(m.IncomingGranularitySpec) { // not required
		return nil
	}

	if m.IncomingGranularitySpec != nil {
		if err := m.IncomingGranularitySpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incomingGranularitySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incomingGranularitySpec")
			}
			return err
		}
	}

	return nil
}

func (m *TimeFieldSpec) validateOutgoingGranularitySpec(formats strfmt.Registry) error {
	if swag.IsZero(m.OutgoingGranularitySpec) { // not required
		return nil
	}

	if m.OutgoingGranularitySpec != nil {
		if err := m.OutgoingGranularitySpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outgoingGranularitySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outgoingGranularitySpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this time field spec based on the context it is used
func (m *TimeFieldSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIncomingGranularitySpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutgoingGranularitySpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeFieldSpec) contextValidateIncomingGranularitySpec(ctx context.Context, formats strfmt.Registry) error {

	if m.IncomingGranularitySpec != nil {
		if err := m.IncomingGranularitySpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incomingGranularitySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incomingGranularitySpec")
			}
			return err
		}
	}

	return nil
}

func (m *TimeFieldSpec) contextValidateOutgoingGranularitySpec(ctx context.Context, formats strfmt.Registry) error {

	if m.OutgoingGranularitySpec != nil {
		if err := m.OutgoingGranularitySpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outgoingGranularitySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outgoingGranularitySpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeFieldSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeFieldSpec) UnmarshalBinary(b []byte) error {
	var res TimeFieldSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
