// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DimensionFieldSpec dimension field spec
//
// swagger:model DimensionFieldSpec
type DimensionFieldSpec struct {

	// data type
	// Enum: [INT LONG FLOAT DOUBLE BIG_DECIMAL BOOLEAN TIMESTAMP STRING JSON BYTES STRUCT MAP LIST]
	DataType string `json:"dataType,omitempty"`

	// default null value
	DefaultNullValue interface{} `json:"defaultNullValue,omitempty"`

	// default null value string
	DefaultNullValueString string `json:"defaultNullValueString,omitempty"`

	// max length
	MaxLength int32 `json:"maxLength,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// single value field
	SingleValueField bool `json:"singleValueField,omitempty"`

	// transform function
	TransformFunction string `json:"transformFunction,omitempty"`

	// virtual column provider
	VirtualColumnProvider string `json:"virtualColumnProvider,omitempty"`
}

// Validate validates this dimension field spec
func (m *DimensionFieldSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dimensionFieldSpecTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INT","LONG","FLOAT","DOUBLE","BIG_DECIMAL","BOOLEAN","TIMESTAMP","STRING","JSON","BYTES","STRUCT","MAP","LIST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dimensionFieldSpecTypeDataTypePropEnum = append(dimensionFieldSpecTypeDataTypePropEnum, v)
	}
}

const (

	// DimensionFieldSpecDataTypeINT captures enum value "INT"
	DimensionFieldSpecDataTypeINT string = "INT"

	// DimensionFieldSpecDataTypeLONG captures enum value "LONG"
	DimensionFieldSpecDataTypeLONG string = "LONG"

	// DimensionFieldSpecDataTypeFLOAT captures enum value "FLOAT"
	DimensionFieldSpecDataTypeFLOAT string = "FLOAT"

	// DimensionFieldSpecDataTypeDOUBLE captures enum value "DOUBLE"
	DimensionFieldSpecDataTypeDOUBLE string = "DOUBLE"

	// DimensionFieldSpecDataTypeBIGDECIMAL captures enum value "BIG_DECIMAL"
	DimensionFieldSpecDataTypeBIGDECIMAL string = "BIG_DECIMAL"

	// DimensionFieldSpecDataTypeBOOLEAN captures enum value "BOOLEAN"
	DimensionFieldSpecDataTypeBOOLEAN string = "BOOLEAN"

	// DimensionFieldSpecDataTypeTIMESTAMP captures enum value "TIMESTAMP"
	DimensionFieldSpecDataTypeTIMESTAMP string = "TIMESTAMP"

	// DimensionFieldSpecDataTypeSTRING captures enum value "STRING"
	DimensionFieldSpecDataTypeSTRING string = "STRING"

	// DimensionFieldSpecDataTypeJSON captures enum value "JSON"
	DimensionFieldSpecDataTypeJSON string = "JSON"

	// DimensionFieldSpecDataTypeBYTES captures enum value "BYTES"
	DimensionFieldSpecDataTypeBYTES string = "BYTES"

	// DimensionFieldSpecDataTypeSTRUCT captures enum value "STRUCT"
	DimensionFieldSpecDataTypeSTRUCT string = "STRUCT"

	// DimensionFieldSpecDataTypeMAP captures enum value "MAP"
	DimensionFieldSpecDataTypeMAP string = "MAP"

	// DimensionFieldSpecDataTypeLIST captures enum value "LIST"
	DimensionFieldSpecDataTypeLIST string = "LIST"
)

// prop value enum
func (m *DimensionFieldSpec) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dimensionFieldSpecTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DimensionFieldSpec) validateDataType(formats strfmt.Registry) error {
	if swag.IsZero(m.DataType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataTypeEnum("dataType", "body", m.DataType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dimension field spec based on context it is used
func (m *DimensionFieldSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DimensionFieldSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DimensionFieldSpec) UnmarshalBinary(b []byte) error {
	var res DimensionFieldSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
