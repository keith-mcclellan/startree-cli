// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StarTreeIndexConfig star tree index config
//
// swagger:model StarTreeIndexConfig
type StarTreeIndexConfig struct {

	// dimensions split order
	// Required: true
	// Read Only: true
	DimensionsSplitOrder []string `json:"dimensionsSplitOrder"`

	// function column pairs
	// Required: true
	// Read Only: true
	FunctionColumnPairs []string `json:"functionColumnPairs"`

	// max leaf records
	// Read Only: true
	MaxLeafRecords int32 `json:"maxLeafRecords,omitempty"`

	// skip star node creation for dimensions
	// Read Only: true
	SkipStarNodeCreationForDimensions []string `json:"skipStarNodeCreationForDimensions"`
}

// Validate validates this star tree index config
func (m *StarTreeIndexConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimensionsSplitOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionColumnPairs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StarTreeIndexConfig) validateDimensionsSplitOrder(formats strfmt.Registry) error {

	if err := validate.Required("dimensionsSplitOrder", "body", m.DimensionsSplitOrder); err != nil {
		return err
	}

	return nil
}

func (m *StarTreeIndexConfig) validateFunctionColumnPairs(formats strfmt.Registry) error {

	if err := validate.Required("functionColumnPairs", "body", m.FunctionColumnPairs); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this star tree index config based on the context it is used
func (m *StarTreeIndexConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDimensionsSplitOrder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunctionColumnPairs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxLeafRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSkipStarNodeCreationForDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StarTreeIndexConfig) contextValidateDimensionsSplitOrder(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dimensionsSplitOrder", "body", []string(m.DimensionsSplitOrder)); err != nil {
		return err
	}

	return nil
}

func (m *StarTreeIndexConfig) contextValidateFunctionColumnPairs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "functionColumnPairs", "body", []string(m.FunctionColumnPairs)); err != nil {
		return err
	}

	return nil
}

func (m *StarTreeIndexConfig) contextValidateMaxLeafRecords(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "maxLeafRecords", "body", int32(m.MaxLeafRecords)); err != nil {
		return err
	}

	return nil
}

func (m *StarTreeIndexConfig) contextValidateSkipStarNodeCreationForDimensions(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "skipStarNodeCreationForDimensions", "body", []string(m.SkipStarNodeCreationForDimensions)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StarTreeIndexConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StarTreeIndexConfig) UnmarshalBinary(b []byte) error {
	var res StarTreeIndexConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
