// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ColumnPartitionConfig column partition config
//
// swagger:model ColumnPartitionConfig
type ColumnPartitionConfig struct {

	// function config
	// Read Only: true
	FunctionConfig map[string]string `json:"functionConfig,omitempty"`

	// function name
	// Required: true
	// Read Only: true
	FunctionName string `json:"functionName"`

	// num partitions
	// Required: true
	// Read Only: true
	NumPartitions int32 `json:"numPartitions"`
}

// Validate validates this column partition config
func (m *ColumnPartitionConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFunctionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumPartitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ColumnPartitionConfig) validateFunctionName(formats strfmt.Registry) error {

	if err := validate.RequiredString("functionName", "body", m.FunctionName); err != nil {
		return err
	}

	return nil
}

func (m *ColumnPartitionConfig) validateNumPartitions(formats strfmt.Registry) error {

	if err := validate.Required("numPartitions", "body", int32(m.NumPartitions)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this column partition config based on the context it is used
func (m *ColumnPartitionConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFunctionConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunctionName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumPartitions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ColumnPartitionConfig) contextValidateFunctionConfig(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ColumnPartitionConfig) contextValidateFunctionName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "functionName", "body", string(m.FunctionName)); err != nil {
		return err
	}

	return nil
}

func (m *ColumnPartitionConfig) contextValidateNumPartitions(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numPartitions", "body", int32(m.NumPartitions)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ColumnPartitionConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ColumnPartitionConfig) UnmarshalBinary(b []byte) error {
	var res ColumnPartitionConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
