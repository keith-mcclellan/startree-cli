// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Tenant tenant
//
// swagger:model Tenant
type Tenant struct {

	// number of instances
	// Read Only: true
	NumberOfInstances int32 `json:"numberOfInstances,omitempty"`

	// offline instances
	// Read Only: true
	OfflineInstances int32 `json:"offlineInstances,omitempty"`

	// realtime instances
	// Read Only: true
	RealtimeInstances int32 `json:"realtimeInstances,omitempty"`

	// tenant name
	// Required: true
	// Read Only: true
	TenantName string `json:"tenantName"`

	// tenant role
	// Required: true
	// Read Only: true
	// Enum: [SERVER BROKER MINION]
	TenantRole string `json:"tenantRole"`
}

// Validate validates this tenant
func (m *Tenant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTenantName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tenant) validateTenantName(formats strfmt.Registry) error {

	if err := validate.RequiredString("tenantName", "body", m.TenantName); err != nil {
		return err
	}

	return nil
}

var tenantTypeTenantRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SERVER","BROKER","MINION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantTypeTenantRolePropEnum = append(tenantTypeTenantRolePropEnum, v)
	}
}

const (

	// TenantTenantRoleSERVER captures enum value "SERVER"
	TenantTenantRoleSERVER string = "SERVER"

	// TenantTenantRoleBROKER captures enum value "BROKER"
	TenantTenantRoleBROKER string = "BROKER"

	// TenantTenantRoleMINION captures enum value "MINION"
	TenantTenantRoleMINION string = "MINION"
)

// prop value enum
func (m *Tenant) validateTenantRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tenantTypeTenantRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Tenant) validateTenantRole(formats strfmt.Registry) error {

	if err := validate.RequiredString("tenantRole", "body", m.TenantRole); err != nil {
		return err
	}

	// value enum
	if err := m.validateTenantRoleEnum("tenantRole", "body", m.TenantRole); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tenant based on the context it is used
func (m *Tenant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNumberOfInstances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfflineInstances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRealtimeInstances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenantName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenantRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tenant) contextValidateNumberOfInstances(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numberOfInstances", "body", int32(m.NumberOfInstances)); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) contextValidateOfflineInstances(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "offlineInstances", "body", int32(m.OfflineInstances)); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) contextValidateRealtimeInstances(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "realtimeInstances", "body", int32(m.RealtimeInstances)); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) contextValidateTenantName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "tenantName", "body", string(m.TenantName)); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) contextValidateTenantRole(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "tenantRole", "body", string(m.TenantRole)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Tenant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Tenant) UnmarshalBinary(b []byte) error {
	var res Tenant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
