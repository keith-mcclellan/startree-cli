// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IndexingConfig indexing config
//
// swagger:model IndexingConfig
type IndexingConfig struct {

	// aggregate metrics
	AggregateMetrics bool `json:"aggregateMetrics,omitempty"`

	// auto generated inverted index
	AutoGeneratedInvertedIndex bool `json:"autoGeneratedInvertedIndex,omitempty"`

	// bloom filter columns
	BloomFilterColumns []string `json:"bloomFilterColumns"`

	// bloom filter configs
	BloomFilterConfigs map[string]BloomFilterConfig `json:"bloomFilterConfigs,omitempty"`

	// column min max value generator mode
	ColumnMinMaxValueGeneratorMode string `json:"columnMinMaxValueGeneratorMode,omitempty"`

	// create inverted index during segment generation
	CreateInvertedIndexDuringSegmentGeneration bool `json:"createInvertedIndexDuringSegmentGeneration,omitempty"`

	// enable default star tree
	EnableDefaultStarTree bool `json:"enableDefaultStarTree,omitempty"`

	// enable dynamic star tree creation
	EnableDynamicStarTreeCreation bool `json:"enableDynamicStarTreeCreation,omitempty"`

	// fstindex type
	// Enum: [LUCENE NATIVE]
	FstindexType string `json:"fstindexType,omitempty"`

	// inverted index columns
	InvertedIndexColumns []string `json:"invertedIndexColumns"`

	// json index columns
	JSONIndexColumns []string `json:"jsonIndexColumns"`

	// json index configs
	JSONIndexConfigs map[string]JSONIndexConfig `json:"jsonIndexConfigs,omitempty"`

	// load mode
	LoadMode string `json:"loadMode,omitempty"`

	// no dictionary columns
	NoDictionaryColumns []string `json:"noDictionaryColumns"`

	// no dictionary config
	NoDictionaryConfig map[string]string `json:"noDictionaryConfig,omitempty"`

	// no dictionary size ratio threshold
	NoDictionarySizeRatioThreshold float64 `json:"noDictionarySizeRatioThreshold,omitempty"`

	// null handling enabled
	NullHandlingEnabled bool `json:"nullHandlingEnabled,omitempty"`

	// on heap dictionary columns
	OnHeapDictionaryColumns []string `json:"onHeapDictionaryColumns"`

	// optimize dictionary
	OptimizeDictionary bool `json:"optimizeDictionary,omitempty"`

	// optimize dictionary for metrics
	OptimizeDictionaryForMetrics bool `json:"optimizeDictionaryForMetrics,omitempty"`

	// range index columns
	RangeIndexColumns []string `json:"rangeIndexColumns"`

	// range index version
	RangeIndexVersion int32 `json:"rangeIndexVersion,omitempty"`

	// segment format version
	SegmentFormatVersion string `json:"segmentFormatVersion,omitempty"`

	// segment name generator type
	SegmentNameGeneratorType string `json:"segmentNameGeneratorType,omitempty"`

	// segment partition config
	SegmentPartitionConfig *SegmentPartitionConfig `json:"segmentPartitionConfig,omitempty"`

	// sorted column
	SortedColumn []string `json:"sortedColumn"`

	// star tree index configs
	StarTreeIndexConfigs []*StarTreeIndexConfig `json:"starTreeIndexConfigs"`

	// stream configs
	StreamConfigs map[string]string `json:"streamConfigs,omitempty"`

	// var length dictionary columns
	VarLengthDictionaryColumns []string `json:"varLengthDictionaryColumns"`
}

// Validate validates this indexing config
func (m *IndexingConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBloomFilterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFstindexType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJSONIndexConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegmentPartitionConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarTreeIndexConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IndexingConfig) validateBloomFilterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.BloomFilterConfigs) { // not required
		return nil
	}

	for k := range m.BloomFilterConfigs {

		if err := validate.Required("bloomFilterConfigs"+"."+k, "body", m.BloomFilterConfigs[k]); err != nil {
			return err
		}
		if val, ok := m.BloomFilterConfigs[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bloomFilterConfigs" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bloomFilterConfigs" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

var indexingConfigTypeFstindexTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LUCENE","NATIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		indexingConfigTypeFstindexTypePropEnum = append(indexingConfigTypeFstindexTypePropEnum, v)
	}
}

const (

	// IndexingConfigFstindexTypeLUCENE captures enum value "LUCENE"
	IndexingConfigFstindexTypeLUCENE string = "LUCENE"

	// IndexingConfigFstindexTypeNATIVE captures enum value "NATIVE"
	IndexingConfigFstindexTypeNATIVE string = "NATIVE"
)

// prop value enum
func (m *IndexingConfig) validateFstindexTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, indexingConfigTypeFstindexTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IndexingConfig) validateFstindexType(formats strfmt.Registry) error {
	if swag.IsZero(m.FstindexType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFstindexTypeEnum("fstindexType", "body", m.FstindexType); err != nil {
		return err
	}

	return nil
}

func (m *IndexingConfig) validateJSONIndexConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.JSONIndexConfigs) { // not required
		return nil
	}

	for k := range m.JSONIndexConfigs {

		if err := validate.Required("jsonIndexConfigs"+"."+k, "body", m.JSONIndexConfigs[k]); err != nil {
			return err
		}
		if val, ok := m.JSONIndexConfigs[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("jsonIndexConfigs" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("jsonIndexConfigs" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *IndexingConfig) validateSegmentPartitionConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.SegmentPartitionConfig) { // not required
		return nil
	}

	if m.SegmentPartitionConfig != nil {
		if err := m.SegmentPartitionConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("segmentPartitionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("segmentPartitionConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IndexingConfig) validateStarTreeIndexConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.StarTreeIndexConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.StarTreeIndexConfigs); i++ {
		if swag.IsZero(m.StarTreeIndexConfigs[i]) { // not required
			continue
		}

		if m.StarTreeIndexConfigs[i] != nil {
			if err := m.StarTreeIndexConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("starTreeIndexConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("starTreeIndexConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this indexing config based on the context it is used
func (m *IndexingConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBloomFilterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJSONIndexConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSegmentPartitionConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStarTreeIndexConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IndexingConfig) contextValidateBloomFilterConfigs(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.BloomFilterConfigs {

		if val, ok := m.BloomFilterConfigs[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IndexingConfig) contextValidateJSONIndexConfigs(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.JSONIndexConfigs {

		if val, ok := m.JSONIndexConfigs[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IndexingConfig) contextValidateSegmentPartitionConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.SegmentPartitionConfig != nil {
		if err := m.SegmentPartitionConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("segmentPartitionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("segmentPartitionConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IndexingConfig) contextValidateStarTreeIndexConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StarTreeIndexConfigs); i++ {

		if m.StarTreeIndexConfigs[i] != nil {
			if err := m.StarTreeIndexConfigs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("starTreeIndexConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("starTreeIndexConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IndexingConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IndexingConfig) UnmarshalBinary(b []byte) error {
	var res IndexingConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
