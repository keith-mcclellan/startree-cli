// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SegmentSizeInfo segment size info
//
// swagger:model SegmentSizeInfo
type SegmentSizeInfo struct {

	// disk size in bytes
	// Read Only: true
	DiskSizeInBytes int64 `json:"diskSizeInBytes,omitempty"`

	// segment name
	// Read Only: true
	SegmentName string `json:"segmentName,omitempty"`
}

// Validate validates this segment size info
func (m *SegmentSizeInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this segment size info based on the context it is used
func (m *SegmentSizeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskSizeInBytes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSegmentName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SegmentSizeInfo) contextValidateDiskSizeInBytes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "diskSizeInBytes", "body", int64(m.DiskSizeInBytes)); err != nil {
		return err
	}

	return nil
}

func (m *SegmentSizeInfo) contextValidateSegmentName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "segmentName", "body", string(m.SegmentName)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SegmentSizeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SegmentSizeInfo) UnmarshalBinary(b []byte) error {
	var res SegmentSizeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
