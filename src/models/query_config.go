// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryConfig query config
//
// swagger:model QueryConfig
type QueryConfig struct {

	// disable groovy
	// Read Only: true
	DisableGroovy *bool `json:"disableGroovy,omitempty"`

	// expression override map
	// Read Only: true
	ExpressionOverrideMap map[string]string `json:"expressionOverrideMap,omitempty"`

	// timeout ms
	// Read Only: true
	TimeoutMs int64 `json:"timeoutMs,omitempty"`

	// use approximate function
	// Read Only: true
	UseApproximateFunction *bool `json:"useApproximateFunction,omitempty"`
}

// Validate validates this query config
func (m *QueryConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this query config based on the context it is used
func (m *QueryConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisableGroovy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpressionOverrideMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeoutMs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUseApproximateFunction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryConfig) contextValidateDisableGroovy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "disableGroovy", "body", m.DisableGroovy); err != nil {
		return err
	}

	return nil
}

func (m *QueryConfig) contextValidateExpressionOverrideMap(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *QueryConfig) contextValidateTimeoutMs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "timeoutMs", "body", int64(m.TimeoutMs)); err != nil {
		return err
	}

	return nil
}

func (m *QueryConfig) contextValidateUseApproximateFunction(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "useApproximateFunction", "body", m.UseApproximateFunction); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryConfig) UnmarshalBinary(b []byte) error {
	var res QueryConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
