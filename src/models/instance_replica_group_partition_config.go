// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstanceReplicaGroupPartitionConfig instance replica group partition config
//
// swagger:model InstanceReplicaGroupPartitionConfig
type InstanceReplicaGroupPartitionConfig struct {

	// minimize data movement
	// Read Only: true
	MinimizeDataMovement *bool `json:"minimizeDataMovement,omitempty"`

	// num instances
	// Read Only: true
	NumInstances int32 `json:"numInstances,omitempty"`

	// num instances per partition
	// Read Only: true
	NumInstancesPerPartition int32 `json:"numInstancesPerPartition,omitempty"`

	// num instances per replica group
	// Read Only: true
	NumInstancesPerReplicaGroup int32 `json:"numInstancesPerReplicaGroup,omitempty"`

	// num partitions
	// Read Only: true
	NumPartitions int32 `json:"numPartitions,omitempty"`

	// num replica groups
	// Read Only: true
	NumReplicaGroups int32 `json:"numReplicaGroups,omitempty"`

	// replica group based
	// Read Only: true
	ReplicaGroupBased *bool `json:"replicaGroupBased,omitempty"`
}

// Validate validates this instance replica group partition config
func (m *InstanceReplicaGroupPartitionConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this instance replica group partition config based on the context it is used
func (m *InstanceReplicaGroupPartitionConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMinimizeDataMovement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumInstances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumInstancesPerPartition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumInstancesPerReplicaGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumPartitions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumReplicaGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaGroupBased(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceReplicaGroupPartitionConfig) contextValidateMinimizeDataMovement(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "minimizeDataMovement", "body", m.MinimizeDataMovement); err != nil {
		return err
	}

	return nil
}

func (m *InstanceReplicaGroupPartitionConfig) contextValidateNumInstances(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numInstances", "body", int32(m.NumInstances)); err != nil {
		return err
	}

	return nil
}

func (m *InstanceReplicaGroupPartitionConfig) contextValidateNumInstancesPerPartition(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numInstancesPerPartition", "body", int32(m.NumInstancesPerPartition)); err != nil {
		return err
	}

	return nil
}

func (m *InstanceReplicaGroupPartitionConfig) contextValidateNumInstancesPerReplicaGroup(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numInstancesPerReplicaGroup", "body", int32(m.NumInstancesPerReplicaGroup)); err != nil {
		return err
	}

	return nil
}

func (m *InstanceReplicaGroupPartitionConfig) contextValidateNumPartitions(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numPartitions", "body", int32(m.NumPartitions)); err != nil {
		return err
	}

	return nil
}

func (m *InstanceReplicaGroupPartitionConfig) contextValidateNumReplicaGroups(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numReplicaGroups", "body", int32(m.NumReplicaGroups)); err != nil {
		return err
	}

	return nil
}

func (m *InstanceReplicaGroupPartitionConfig) contextValidateReplicaGroupBased(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "replicaGroupBased", "body", m.ReplicaGroupBased); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceReplicaGroupPartitionConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceReplicaGroupPartitionConfig) UnmarshalBinary(b []byte) error {
	var res InstanceReplicaGroupPartitionConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
