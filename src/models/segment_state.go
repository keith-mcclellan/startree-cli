// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SegmentState segment state
//
// swagger:model SegmentState
type SegmentState struct {

	// consumer info
	// Read Only: true
	ConsumerInfo *SegmentConsumerInfo `json:"consumerInfo,omitempty"`

	// error info
	// Read Only: true
	ErrorInfo *SegmentErrorInfo `json:"errorInfo,omitempty"`

	// external view
	// Read Only: true
	ExternalView string `json:"externalView,omitempty"`

	// ideal state
	// Read Only: true
	IdealState string `json:"idealState,omitempty"`

	// segment size
	// Read Only: true
	SegmentSize string `json:"segmentSize,omitempty"`
}

// Validate validates this segment state
func (m *SegmentState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsumerInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SegmentState) validateConsumerInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsumerInfo) { // not required
		return nil
	}

	if m.ConsumerInfo != nil {
		if err := m.ConsumerInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consumerInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consumerInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SegmentState) validateErrorInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorInfo) { // not required
		return nil
	}

	if m.ErrorInfo != nil {
		if err := m.ErrorInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this segment state based on the context it is used
func (m *SegmentState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConsumerInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalView(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdealState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSegmentSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SegmentState) contextValidateConsumerInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsumerInfo != nil {
		if err := m.ConsumerInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consumerInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consumerInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SegmentState) contextValidateErrorInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ErrorInfo != nil {
		if err := m.ErrorInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SegmentState) contextValidateExternalView(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "externalView", "body", string(m.ExternalView)); err != nil {
		return err
	}

	return nil
}

func (m *SegmentState) contextValidateIdealState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "idealState", "body", string(m.IdealState)); err != nil {
		return err
	}

	return nil
}

func (m *SegmentState) contextValidateSegmentSize(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "segmentSize", "body", string(m.SegmentSize)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SegmentState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SegmentState) UnmarshalBinary(b []byte) error {
	var res SegmentState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
