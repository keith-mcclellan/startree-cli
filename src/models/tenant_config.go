// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantConfig tenant config
//
// swagger:model TenantConfig
type TenantConfig struct {

	// broker
	// Read Only: true
	Broker string `json:"broker,omitempty"`

	// server
	// Read Only: true
	Server string `json:"server,omitempty"`

	// tag override config
	// Read Only: true
	TagOverrideConfig *TagOverrideConfig `json:"tagOverrideConfig,omitempty"`
}

// Validate validates this tenant config
func (m *TenantConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTagOverrideConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantConfig) validateTagOverrideConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.TagOverrideConfig) { // not required
		return nil
	}

	if m.TagOverrideConfig != nil {
		if err := m.TagOverrideConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tagOverrideConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tagOverrideConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tenant config based on the context it is used
func (m *TenantConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBroker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagOverrideConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantConfig) contextValidateBroker(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "broker", "body", string(m.Broker)); err != nil {
		return err
	}

	return nil
}

func (m *TenantConfig) contextValidateServer(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "server", "body", string(m.Server)); err != nil {
		return err
	}

	return nil
}

func (m *TenantConfig) contextValidateTagOverrideConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.TagOverrideConfig != nil {
		if err := m.TagOverrideConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tagOverrideConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tagOverrideConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TenantConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantConfig) UnmarshalBinary(b []byte) error {
	var res TenantConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
