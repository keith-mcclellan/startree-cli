// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantsList tenants list
//
// swagger:model TenantsList
type TenantsList struct {

	// b r o k e r t e n a n t s
	// Unique: true
	BROKERTENANTS []string `json:"BROKER_TENANTS"`

	// s e r v e r t e n a n t s
	// Unique: true
	SERVERTENANTS []string `json:"SERVER_TENANTS"`
}

// Validate validates this tenants list
func (m *TenantsList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBROKERTENANTS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSERVERTENANTS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantsList) validateBROKERTENANTS(formats strfmt.Registry) error {
	if swag.IsZero(m.BROKERTENANTS) { // not required
		return nil
	}

	if err := validate.UniqueItems("BROKER_TENANTS", "body", m.BROKERTENANTS); err != nil {
		return err
	}

	return nil
}

func (m *TenantsList) validateSERVERTENANTS(formats strfmt.Registry) error {
	if swag.IsZero(m.SERVERTENANTS) { // not required
		return nil
	}

	if err := validate.UniqueItems("SERVER_TENANTS", "body", m.SERVERTENANTS); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tenants list based on context it is used
func (m *TenantsList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TenantsList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantsList) UnmarshalBinary(b []byte) error {
	var res TenantsList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
