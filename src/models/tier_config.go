// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TierConfig tier config
//
// swagger:model TierConfig
type TierConfig struct {

	// name
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// segment age
	// Read Only: true
	SegmentAge string `json:"segmentAge,omitempty"`

	// segment list
	// Read Only: true
	SegmentList []string `json:"segmentList"`

	// segment selector type
	// Required: true
	// Read Only: true
	SegmentSelectorType string `json:"segmentSelectorType"`

	// server tag
	// Read Only: true
	ServerTag string `json:"serverTag,omitempty"`

	// storage type
	// Required: true
	// Read Only: true
	StorageType string `json:"storageType"`

	// tier backend
	// Read Only: true
	TierBackend string `json:"tierBackend,omitempty"`

	// tier backend properties
	// Read Only: true
	TierBackendProperties map[string]string `json:"tierBackendProperties,omitempty"`
}

// Validate validates this tier config
func (m *TierConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegmentSelectorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TierConfig) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TierConfig) validateSegmentSelectorType(formats strfmt.Registry) error {

	if err := validate.RequiredString("segmentSelectorType", "body", m.SegmentSelectorType); err != nil {
		return err
	}

	return nil
}

func (m *TierConfig) validateStorageType(formats strfmt.Registry) error {

	if err := validate.RequiredString("storageType", "body", m.StorageType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tier config based on the context it is used
func (m *TierConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSegmentAge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSegmentList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSegmentSelectorType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServerTag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTierBackend(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTierBackendProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TierConfig) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *TierConfig) contextValidateSegmentAge(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "segmentAge", "body", string(m.SegmentAge)); err != nil {
		return err
	}

	return nil
}

func (m *TierConfig) contextValidateSegmentList(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "segmentList", "body", []string(m.SegmentList)); err != nil {
		return err
	}

	return nil
}

func (m *TierConfig) contextValidateSegmentSelectorType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "segmentSelectorType", "body", string(m.SegmentSelectorType)); err != nil {
		return err
	}

	return nil
}

func (m *TierConfig) contextValidateServerTag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "serverTag", "body", string(m.ServerTag)); err != nil {
		return err
	}

	return nil
}

func (m *TierConfig) contextValidateStorageType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "storageType", "body", string(m.StorageType)); err != nil {
		return err
	}

	return nil
}

func (m *TierConfig) contextValidateTierBackend(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "tierBackend", "body", string(m.TierBackend)); err != nil {
		return err
	}

	return nil
}

func (m *TierConfig) contextValidateTierBackendProperties(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *TierConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TierConfig) UnmarshalBinary(b []byte) error {
	var res TierConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
