// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BloomFilterConfig bloom filter config
//
// swagger:model BloomFilterConfig
type BloomFilterConfig struct {

	// fpp
	// Read Only: true
	Fpp float64 `json:"fpp,omitempty"`

	// load on heap
	// Read Only: true
	LoadOnHeap *bool `json:"loadOnHeap,omitempty"`

	// max size in bytes
	// Read Only: true
	MaxSizeInBytes int32 `json:"maxSizeInBytes,omitempty"`
}

// Validate validates this bloom filter config
func (m *BloomFilterConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this bloom filter config based on the context it is used
func (m *BloomFilterConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFpp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoadOnHeap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxSizeInBytes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BloomFilterConfig) contextValidateFpp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "fpp", "body", float64(m.Fpp)); err != nil {
		return err
	}

	return nil
}

func (m *BloomFilterConfig) contextValidateLoadOnHeap(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "loadOnHeap", "body", m.LoadOnHeap); err != nil {
		return err
	}

	return nil
}

func (m *BloomFilterConfig) contextValidateMaxSizeInBytes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "maxSizeInBytes", "body", int32(m.MaxSizeInBytes)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BloomFilterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BloomFilterConfig) UnmarshalBinary(b []byte) error {
	var res BloomFilterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
