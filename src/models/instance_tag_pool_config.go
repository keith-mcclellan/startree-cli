// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstanceTagPoolConfig instance tag pool config
//
// swagger:model InstanceTagPoolConfig
type InstanceTagPoolConfig struct {

	// num pools
	// Read Only: true
	NumPools int32 `json:"numPools,omitempty"`

	// pool based
	// Read Only: true
	PoolBased *bool `json:"poolBased,omitempty"`

	// pools
	// Read Only: true
	Pools []int32 `json:"pools"`

	// tag
	// Required: true
	// Read Only: true
	Tag string `json:"tag"`
}

// Validate validates this instance tag pool config
func (m *InstanceTagPoolConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceTagPoolConfig) validateTag(formats strfmt.Registry) error {

	if err := validate.RequiredString("tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this instance tag pool config based on the context it is used
func (m *InstanceTagPoolConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNumPools(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoolBased(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePools(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceTagPoolConfig) contextValidateNumPools(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numPools", "body", int32(m.NumPools)); err != nil {
		return err
	}

	return nil
}

func (m *InstanceTagPoolConfig) contextValidatePoolBased(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "poolBased", "body", m.PoolBased); err != nil {
		return err
	}

	return nil
}

func (m *InstanceTagPoolConfig) contextValidatePools(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "pools", "body", []int32(m.Pools)); err != nil {
		return err
	}

	return nil
}

func (m *InstanceTagPoolConfig) contextValidateTag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "tag", "body", string(m.Tag)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceTagPoolConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceTagPoolConfig) UnmarshalBinary(b []byte) error {
	var res InstanceTagPoolConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
