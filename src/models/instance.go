// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Instance instance
//
// swagger:model Instance
type Instance struct {

	// admin port
	// Read Only: true
	AdminPort int32 `json:"adminPort,omitempty"`

	// grpc port
	// Read Only: true
	GrpcPort int32 `json:"grpcPort,omitempty"`

	// host
	// Required: true
	// Read Only: true
	Host string `json:"host"`

	// pools
	// Read Only: true
	Pools map[string]int32 `json:"pools,omitempty"`

	// port
	// Required: true
	// Read Only: true
	Port int32 `json:"port"`

	// queries disabled
	// Read Only: true
	QueriesDisabled *bool `json:"queriesDisabled,omitempty"`

	// query mailbox port
	// Read Only: true
	QueryMailboxPort int32 `json:"queryMailboxPort,omitempty"`

	// query service port
	// Read Only: true
	QueryServicePort int32 `json:"queryServicePort,omitempty"`

	// tags
	// Read Only: true
	Tags []string `json:"tags"`

	// type
	// Required: true
	// Read Only: true
	// Enum: [CONTROLLER BROKER SERVER MINION]
	Type string `json:"type"`
}

// Validate validates this instance
func (m *Instance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) validateHost(formats strfmt.Registry) error {

	if err := validate.RequiredString("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", int32(m.Port)); err != nil {
		return err
	}

	return nil
}

var instanceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONTROLLER","BROKER","SERVER","MINION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceTypeTypePropEnum = append(instanceTypeTypePropEnum, v)
	}
}

const (

	// InstanceTypeCONTROLLER captures enum value "CONTROLLER"
	InstanceTypeCONTROLLER string = "CONTROLLER"

	// InstanceTypeBROKER captures enum value "BROKER"
	InstanceTypeBROKER string = "BROKER"

	// InstanceTypeSERVER captures enum value "SERVER"
	InstanceTypeSERVER string = "SERVER"

	// InstanceTypeMINION captures enum value "MINION"
	InstanceTypeMINION string = "MINION"
)

// prop value enum
func (m *Instance) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, instanceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Instance) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this instance based on the context it is used
func (m *Instance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdminPort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrpcPort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePools(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueriesDisabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryMailboxPort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryServicePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) contextValidateAdminPort(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "adminPort", "body", int32(m.AdminPort)); err != nil {
		return err
	}

	return nil
}

func (m *Instance) contextValidateGrpcPort(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "grpcPort", "body", int32(m.GrpcPort)); err != nil {
		return err
	}

	return nil
}

func (m *Instance) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "host", "body", string(m.Host)); err != nil {
		return err
	}

	return nil
}

func (m *Instance) contextValidatePools(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *Instance) contextValidatePort(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "port", "body", int32(m.Port)); err != nil {
		return err
	}

	return nil
}

func (m *Instance) contextValidateQueriesDisabled(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "queriesDisabled", "body", m.QueriesDisabled); err != nil {
		return err
	}

	return nil
}

func (m *Instance) contextValidateQueryMailboxPort(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "queryMailboxPort", "body", int32(m.QueryMailboxPort)); err != nil {
		return err
	}

	return nil
}

func (m *Instance) contextValidateQueryServicePort(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "queryServicePort", "body", int32(m.QueryServicePort)); err != nil {
		return err
	}

	return nil
}

func (m *Instance) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "tags", "body", []string(m.Tags)); err != nil {
		return err
	}

	return nil
}

func (m *Instance) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Instance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Instance) UnmarshalBinary(b []byte) error {
	var res Instance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
