// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SegmentConsumerInfo segment consumer info
//
// swagger:model SegmentConsumerInfo
type SegmentConsumerInfo struct {

	// consumer state
	// Read Only: true
	ConsumerState string `json:"consumerState,omitempty"`

	// last consumed timestamp
	// Read Only: true
	LastConsumedTimestamp int64 `json:"lastConsumedTimestamp,omitempty"`

	// partition offset info
	// Read Only: true
	PartitionOffsetInfo *PartitionOffsetInfo `json:"partitionOffsetInfo,omitempty"`

	// partition to offset map
	// Read Only: true
	PartitionToOffsetMap map[string]string `json:"partitionToOffsetMap,omitempty"`

	// segment name
	// Read Only: true
	SegmentName string `json:"segmentName,omitempty"`
}

// Validate validates this segment consumer info
func (m *SegmentConsumerInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePartitionOffsetInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SegmentConsumerInfo) validatePartitionOffsetInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.PartitionOffsetInfo) { // not required
		return nil
	}

	if m.PartitionOffsetInfo != nil {
		if err := m.PartitionOffsetInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partitionOffsetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partitionOffsetInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this segment consumer info based on the context it is used
func (m *SegmentConsumerInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConsumerState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastConsumedTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartitionOffsetInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartitionToOffsetMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSegmentName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SegmentConsumerInfo) contextValidateConsumerState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "consumerState", "body", string(m.ConsumerState)); err != nil {
		return err
	}

	return nil
}

func (m *SegmentConsumerInfo) contextValidateLastConsumedTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastConsumedTimestamp", "body", int64(m.LastConsumedTimestamp)); err != nil {
		return err
	}

	return nil
}

func (m *SegmentConsumerInfo) contextValidatePartitionOffsetInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.PartitionOffsetInfo != nil {
		if err := m.PartitionOffsetInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partitionOffsetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partitionOffsetInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SegmentConsumerInfo) contextValidatePartitionToOffsetMap(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SegmentConsumerInfo) contextValidateSegmentName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "segmentName", "body", string(m.SegmentName)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SegmentConsumerInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SegmentConsumerInfo) UnmarshalBinary(b []byte) error {
	var res SegmentConsumerInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
