// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoutingConfig routing config
//
// swagger:model RoutingConfig
type RoutingConfig struct {

	// instance selector type
	// Read Only: true
	InstanceSelectorType string `json:"instanceSelectorType,omitempty"`

	// routing table builder name
	// Read Only: true
	RoutingTableBuilderName string `json:"routingTableBuilderName,omitempty"`

	// segment pruner types
	// Read Only: true
	SegmentPrunerTypes []string `json:"segmentPrunerTypes"`
}

// Validate validates this routing config
func (m *RoutingConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this routing config based on the context it is used
func (m *RoutingConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceSelectorType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoutingTableBuilderName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSegmentPrunerTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoutingConfig) contextValidateInstanceSelectorType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "instanceSelectorType", "body", string(m.InstanceSelectorType)); err != nil {
		return err
	}

	return nil
}

func (m *RoutingConfig) contextValidateRoutingTableBuilderName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "routingTableBuilderName", "body", string(m.RoutingTableBuilderName)); err != nil {
		return err
	}

	return nil
}

func (m *RoutingConfig) contextValidateSegmentPrunerTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "segmentPrunerTypes", "body", []string(m.SegmentPrunerTypes)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoutingConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoutingConfig) UnmarshalBinary(b []byte) error {
	var res RoutingConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
