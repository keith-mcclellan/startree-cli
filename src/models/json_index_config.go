// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JSONIndexConfig Json index config
//
// swagger:model JsonIndexConfig
type JSONIndexConfig struct {

	// disable cross array unnest
	DisableCrossArrayUnnest bool `json:"disableCrossArrayUnnest,omitempty"`

	// exclude array
	ExcludeArray bool `json:"excludeArray,omitempty"`

	// exclude fields
	// Unique: true
	ExcludeFields []string `json:"excludeFields"`

	// exclude paths
	// Unique: true
	ExcludePaths []string `json:"excludePaths"`

	// include paths
	// Unique: true
	IncludePaths []string `json:"includePaths"`

	// max levels
	MaxLevels int32 `json:"maxLevels,omitempty"`
}

// Validate validates this Json index config
func (m *JSONIndexConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExcludeFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludePaths(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JSONIndexConfig) validateExcludeFields(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeFields) { // not required
		return nil
	}

	if err := validate.UniqueItems("excludeFields", "body", m.ExcludeFields); err != nil {
		return err
	}

	return nil
}

func (m *JSONIndexConfig) validateExcludePaths(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludePaths) { // not required
		return nil
	}

	if err := validate.UniqueItems("excludePaths", "body", m.ExcludePaths); err != nil {
		return err
	}

	return nil
}

func (m *JSONIndexConfig) validateIncludePaths(formats strfmt.Registry) error {
	if swag.IsZero(m.IncludePaths) { // not required
		return nil
	}

	if err := validate.UniqueItems("includePaths", "body", m.IncludePaths); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Json index config based on context it is used
func (m *JSONIndexConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JSONIndexConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JSONIndexConfig) UnmarshalBinary(b []byte) error {
	var res JSONIndexConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
