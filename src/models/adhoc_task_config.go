// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdhocTaskConfig adhoc task config
//
// swagger:model AdhocTaskConfig
type AdhocTaskConfig struct {

	// table name
	// Required: true
	// Read Only: true
	TableName string `json:"tableName"`

	// task configs
	// Read Only: true
	TaskConfigs map[string]string `json:"taskConfigs,omitempty"`

	// task name
	// Read Only: true
	TaskName string `json:"taskName,omitempty"`

	// task type
	// Required: true
	// Read Only: true
	TaskType string `json:"taskType"`
}

// Validate validates this adhoc task config
func (m *AdhocTaskConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTableName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdhocTaskConfig) validateTableName(formats strfmt.Registry) error {

	if err := validate.RequiredString("tableName", "body", m.TableName); err != nil {
		return err
	}

	return nil
}

func (m *AdhocTaskConfig) validateTaskType(formats strfmt.Registry) error {

	if err := validate.RequiredString("taskType", "body", m.TaskType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this adhoc task config based on the context it is used
func (m *AdhocTaskConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTableName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdhocTaskConfig) contextValidateTableName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "tableName", "body", string(m.TableName)); err != nil {
		return err
	}

	return nil
}

func (m *AdhocTaskConfig) contextValidateTaskConfigs(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *AdhocTaskConfig) contextValidateTaskName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "taskName", "body", string(m.TaskName)); err != nil {
		return err
	}

	return nil
}

func (m *AdhocTaskConfig) contextValidateTaskType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "taskType", "body", string(m.TaskType)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdhocTaskConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdhocTaskConfig) UnmarshalBinary(b []byte) error {
	var res AdhocTaskConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
