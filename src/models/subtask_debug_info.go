// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubtaskDebugInfo subtask debug info
//
// swagger:model SubtaskDebugInfo
type SubtaskDebugInfo struct {

	// finish time
	FinishTime string `json:"finishTime,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// participant
	Participant string `json:"participant,omitempty"`

	// start time
	StartTime string `json:"startTime,omitempty"`

	// state
	// Enum: [INIT RUNNING STOPPED COMPLETED TIMED_OUT TASK_ERROR TASK_ABORTED ERROR DROPPED]
	State string `json:"state,omitempty"`

	// task config
	TaskConfig *PinotTaskConfig `json:"taskConfig,omitempty"`

	// task Id
	TaskID string `json:"taskId,omitempty"`
}

// Validate validates this subtask debug info
func (m *SubtaskDebugInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var subtaskDebugInfoTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INIT","RUNNING","STOPPED","COMPLETED","TIMED_OUT","TASK_ERROR","TASK_ABORTED","ERROR","DROPPED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subtaskDebugInfoTypeStatePropEnum = append(subtaskDebugInfoTypeStatePropEnum, v)
	}
}

const (

	// SubtaskDebugInfoStateINIT captures enum value "INIT"
	SubtaskDebugInfoStateINIT string = "INIT"

	// SubtaskDebugInfoStateRUNNING captures enum value "RUNNING"
	SubtaskDebugInfoStateRUNNING string = "RUNNING"

	// SubtaskDebugInfoStateSTOPPED captures enum value "STOPPED"
	SubtaskDebugInfoStateSTOPPED string = "STOPPED"

	// SubtaskDebugInfoStateCOMPLETED captures enum value "COMPLETED"
	SubtaskDebugInfoStateCOMPLETED string = "COMPLETED"

	// SubtaskDebugInfoStateTIMEDOUT captures enum value "TIMED_OUT"
	SubtaskDebugInfoStateTIMEDOUT string = "TIMED_OUT"

	// SubtaskDebugInfoStateTASKERROR captures enum value "TASK_ERROR"
	SubtaskDebugInfoStateTASKERROR string = "TASK_ERROR"

	// SubtaskDebugInfoStateTASKABORTED captures enum value "TASK_ABORTED"
	SubtaskDebugInfoStateTASKABORTED string = "TASK_ABORTED"

	// SubtaskDebugInfoStateERROR captures enum value "ERROR"
	SubtaskDebugInfoStateERROR string = "ERROR"

	// SubtaskDebugInfoStateDROPPED captures enum value "DROPPED"
	SubtaskDebugInfoStateDROPPED string = "DROPPED"
)

// prop value enum
func (m *SubtaskDebugInfo) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subtaskDebugInfoTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SubtaskDebugInfo) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *SubtaskDebugInfo) validateTaskConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskConfig) { // not required
		return nil
	}

	if m.TaskConfig != nil {
		if err := m.TaskConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taskConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this subtask debug info based on the context it is used
func (m *SubtaskDebugInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTaskConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubtaskDebugInfo) contextValidateTaskConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.TaskConfig != nil {
		if err := m.TaskConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taskConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubtaskDebugInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubtaskDebugInfo) UnmarshalBinary(b []byte) error {
	var res SubtaskDebugInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
