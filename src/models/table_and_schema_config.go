// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TableAndSchemaConfig table and schema config
//
// swagger:model TableAndSchemaConfig
type TableAndSchemaConfig struct {

	// schema
	// Read Only: true
	Schema *Schema `json:"schema,omitempty"`

	// table config
	// Required: true
	// Read Only: true
	TableConfig *TableConfig `json:"tableConfig"`
}

// Validate validates this table and schema config
func (m *TableAndSchemaConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTableConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TableAndSchemaConfig) validateSchema(formats strfmt.Registry) error {
	if swag.IsZero(m.Schema) { // not required
		return nil
	}

	if m.Schema != nil {
		if err := m.Schema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema")
			}
			return err
		}
	}

	return nil
}

func (m *TableAndSchemaConfig) validateTableConfig(formats strfmt.Registry) error {

	if err := validate.Required("tableConfig", "body", m.TableConfig); err != nil {
		return err
	}

	if m.TableConfig != nil {
		if err := m.TableConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tableConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tableConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this table and schema config based on the context it is used
func (m *TableAndSchemaConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTableConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TableAndSchemaConfig) contextValidateSchema(ctx context.Context, formats strfmt.Registry) error {

	if m.Schema != nil {
		if err := m.Schema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema")
			}
			return err
		}
	}

	return nil
}

func (m *TableAndSchemaConfig) contextValidateTableConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.TableConfig != nil {
		if err := m.TableConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tableConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tableConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TableAndSchemaConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TableAndSchemaConfig) UnmarshalBinary(b []byte) error {
	var res TableAndSchemaConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
