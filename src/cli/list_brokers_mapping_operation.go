// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/broker"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationBrokerListBrokersMappingCmd returns a cmd to handle operation listBrokersMapping
func makeOperationBrokerListBrokersMappingCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "listBrokersMapping",
		Short: `List tenants and tables to brokers mappings`,
		RunE:  runOperationBrokerListBrokersMapping,
	}

	if err := registerOperationBrokerListBrokersMappingParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationBrokerListBrokersMapping uses cmd flags to call endpoint api
func runOperationBrokerListBrokersMapping(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := broker.NewListBrokersMappingParams()
	if err, _ := retrieveOperationBrokerListBrokersMappingStateFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationBrokerListBrokersMappingResult(appCli.Broker.ListBrokersMapping(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationBrokerListBrokersMappingParamFlags registers all flags needed to fill params
func registerOperationBrokerListBrokersMappingParamFlags(cmd *cobra.Command) error {
	if err := registerOperationBrokerListBrokersMappingStateParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationBrokerListBrokersMappingStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	stateDescription := `ONLINE|OFFLINE`

	var stateFlagName string
	if cmdPrefix == "" {
		stateFlagName = "state"
	} else {
		stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var stateFlagDefault string

	_ = cmd.PersistentFlags().String(stateFlagName, stateFlagDefault, stateDescription)

	return nil
}

func retrieveOperationBrokerListBrokersMappingStateFlag(m *broker.ListBrokersMappingParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("state") {

		var stateFlagName string
		if cmdPrefix == "" {
			stateFlagName = "state"
		} else {
			stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		stateFlagValue, err := cmd.Flags().GetString(stateFlagName)
		if err != nil {
			return err, false
		}
		m.State = &stateFlagValue

	}
	return nil, retAdded
}

// parseOperationBrokerListBrokersMappingResult parses request result and return the string content
func parseOperationBrokerListBrokersMappingResult(resp0 *broker.ListBrokersMappingOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*broker.ListBrokersMappingOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
