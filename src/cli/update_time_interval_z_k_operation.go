// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/segment"

	"github.com/spf13/cobra"
)

// makeOperationSegmentUpdateTimeIntervalZKCmd returns a cmd to handle operation updateTimeIntervalZK
func makeOperationSegmentUpdateTimeIntervalZKCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "updateTimeIntervalZK",
		Short: `Update the start and end time of the segments based on latest schema`,
		RunE:  runOperationSegmentUpdateTimeIntervalZK,
	}

	if err := registerOperationSegmentUpdateTimeIntervalZKParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSegmentUpdateTimeIntervalZK uses cmd flags to call endpoint api
func runOperationSegmentUpdateTimeIntervalZK(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := segment.NewUpdateTimeIntervalZKParams()
	if err, _ := retrieveOperationSegmentUpdateTimeIntervalZKTableNameWithTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSegmentUpdateTimeIntervalZKResult(appCli.Segment.UpdateTimeIntervalZK(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSegmentUpdateTimeIntervalZKParamFlags registers all flags needed to fill params
func registerOperationSegmentUpdateTimeIntervalZKParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSegmentUpdateTimeIntervalZKTableNameWithTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSegmentUpdateTimeIntervalZKTableNameWithTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameWithTypeDescription := `Required. Table name with type`

	var tableNameWithTypeFlagName string
	if cmdPrefix == "" {
		tableNameWithTypeFlagName = "tableNameWithType"
	} else {
		tableNameWithTypeFlagName = fmt.Sprintf("%v.tableNameWithType", cmdPrefix)
	}

	var tableNameWithTypeFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameWithTypeFlagName, tableNameWithTypeFlagDefault, tableNameWithTypeDescription)

	return nil
}

func retrieveOperationSegmentUpdateTimeIntervalZKTableNameWithTypeFlag(m *segment.UpdateTimeIntervalZKParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableNameWithType") {

		var tableNameWithTypeFlagName string
		if cmdPrefix == "" {
			tableNameWithTypeFlagName = "tableNameWithType"
		} else {
			tableNameWithTypeFlagName = fmt.Sprintf("%v.tableNameWithType", cmdPrefix)
		}

		tableNameWithTypeFlagValue, err := cmd.Flags().GetString(tableNameWithTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TableNameWithType = tableNameWithTypeFlagValue

	}
	return nil, retAdded
}

// parseOperationSegmentUpdateTimeIntervalZKResult parses request result and return the string content
func parseOperationSegmentUpdateTimeIntervalZKResult(resp0 *segment.UpdateTimeIntervalZKOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updateTimeIntervalZKOK is not supported

		// Non schema case: warning updateTimeIntervalZKNotFound is not supported

		// Non schema case: warning updateTimeIntervalZKInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response updateTimeIntervalZKOK is not supported by go-swagger cli yet.

	return "", nil
}
