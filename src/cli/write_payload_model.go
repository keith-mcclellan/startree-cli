// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for WritePayload

// register flags to command
func registerModelWritePayloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWritePayloadColumnNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWritePayloadRows(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWritePayloadValues(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWritePayloadColumnNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: columnNames []string array type is not supported by go-swagger cli yet

	return nil
}

func registerWritePayloadRows(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: rows [][]interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerWritePayloadValues(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: values []map[string]interface{} array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWritePayloadFlags(depth int, m *models.WritePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, columnNamesAdded := retrieveWritePayloadColumnNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || columnNamesAdded

	err, rowsAdded := retrieveWritePayloadRowsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rowsAdded

	err, valuesAdded := retrieveWritePayloadValuesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valuesAdded

	return nil, retAdded
}

func retrieveWritePayloadColumnNamesFlags(depth int, m *models.WritePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	columnNamesFlagName := fmt.Sprintf("%v.columnNames", cmdPrefix)
	if cmd.Flags().Changed(columnNamesFlagName) {
		// warning: columnNames array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveWritePayloadRowsFlags(depth int, m *models.WritePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rowsFlagName := fmt.Sprintf("%v.rows", cmdPrefix)
	if cmd.Flags().Changed(rowsFlagName) {
		// warning: rows array type [][]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveWritePayloadValuesFlags(depth int, m *models.WritePayload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valuesFlagName := fmt.Sprintf("%v.values", cmdPrefix)
	if cmd.Flags().Changed(valuesFlagName) {
		// warning: values array type []map[string]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
