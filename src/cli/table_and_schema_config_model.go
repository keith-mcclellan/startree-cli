// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"startree.ai/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for TableAndSchemaConfig

// register flags to command
func registerModelTableAndSchemaConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableAndSchemaConfigSchema(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableAndSchemaConfigTableConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableAndSchemaConfigSchema(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var schemaFlagName string
	if cmdPrefix == "" {
		schemaFlagName = "schema"
	} else {
		schemaFlagName = fmt.Sprintf("%v.schema", cmdPrefix)
	}

	if err := registerModelSchemaFlags(depth+1, schemaFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableAndSchemaConfigTableConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tableConfigFlagName string
	if cmdPrefix == "" {
		tableConfigFlagName = "tableConfig"
	} else {
		tableConfigFlagName = fmt.Sprintf("%v.tableConfig", cmdPrefix)
	}

	if err := registerModelTableConfigFlags(depth+1, tableConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableAndSchemaConfigFlags(depth int, m *models.TableAndSchemaConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, schemaAdded := retrieveTableAndSchemaConfigSchemaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || schemaAdded

	err, tableConfigAdded := retrieveTableAndSchemaConfigTableConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableConfigAdded

	return nil, retAdded
}

func retrieveTableAndSchemaConfigSchemaFlags(depth int, m *models.TableAndSchemaConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	schemaFlagName := fmt.Sprintf("%v.schema", cmdPrefix)
	if cmd.Flags().Changed(schemaFlagName) {
		// info: complex object schema Schema is retrieved outside this Changed() block
	}
	schemaFlagValue := m.Schema
	if swag.IsZero(schemaFlagValue) {
		schemaFlagValue = &models.Schema{}
	}

	err, schemaAdded := retrieveModelSchemaFlags(depth+1, schemaFlagValue, schemaFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || schemaAdded
	if schemaAdded {
		m.Schema = schemaFlagValue
	}

	return nil, retAdded
}

func retrieveTableAndSchemaConfigTableConfigFlags(depth int, m *models.TableAndSchemaConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableConfigFlagName := fmt.Sprintf("%v.tableConfig", cmdPrefix)
	if cmd.Flags().Changed(tableConfigFlagName) {
		// info: complex object tableConfig TableConfig is retrieved outside this Changed() block
	}
	tableConfigFlagValue := m.TableConfig
	if swag.IsZero(tableConfigFlagValue) {
		tableConfigFlagValue = &models.TableConfig{}
	}

	err, tableConfigAdded := retrieveModelTableConfigFlags(depth+1, tableConfigFlagValue, tableConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableConfigAdded
	if tableConfigAdded {
		m.TableConfig = tableConfigFlagValue
	}

	return nil, retAdded
}
