// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/atomic_ingestion"

	"github.com/spf13/cobra"
)

// makeOperationAtomicIngestionStartDataIngestRequestCmd returns a cmd to handle operation startDataIngestRequest
func makeOperationAtomicIngestionStartDataIngestRequestCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "startDataIngestRequest",
		Short: ``,
		RunE:  runOperationAtomicIngestionStartDataIngestRequest,
	}

	if err := registerOperationAtomicIngestionStartDataIngestRequestParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationAtomicIngestionStartDataIngestRequest uses cmd flags to call endpoint api
func runOperationAtomicIngestionStartDataIngestRequest(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := atomic_ingestion.NewStartDataIngestRequestParams()
	if err, _ := retrieveOperationAtomicIngestionStartDataIngestRequestBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationAtomicIngestionStartDataIngestRequestTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationAtomicIngestionStartDataIngestRequestTableTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationAtomicIngestionStartDataIngestRequestTaskTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationAtomicIngestionStartDataIngestRequestResult(appCli.AtomicIngestion.StartDataIngestRequest(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationAtomicIngestionStartDataIngestRequestParamFlags registers all flags needed to fill params
func registerOperationAtomicIngestionStartDataIngestRequestParamFlags(cmd *cobra.Command) error {
	if err := registerOperationAtomicIngestionStartDataIngestRequestBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationAtomicIngestionStartDataIngestRequestTableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationAtomicIngestionStartDataIngestRequestTableTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationAtomicIngestionStartDataIngestRequestTaskTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationAtomicIngestionStartDataIngestRequestBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	bodyDescription := ``

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	var bodyFlagDefault string

	_ = cmd.PersistentFlags().String(bodyFlagName, bodyFlagDefault, bodyDescription)

	return nil
}
func registerOperationAtomicIngestionStartDataIngestRequestTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Name of the table`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}
func registerOperationAtomicIngestionStartDataIngestRequestTableTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableTypeDescription := `Required. OFFLINE|REALTIME`

	var tableTypeFlagName string
	if cmdPrefix == "" {
		tableTypeFlagName = "tableType"
	} else {
		tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
	}

	var tableTypeFlagDefault string

	_ = cmd.PersistentFlags().String(tableTypeFlagName, tableTypeFlagDefault, tableTypeDescription)

	return nil
}
func registerOperationAtomicIngestionStartDataIngestRequestTaskTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	taskTypeDescription := `Required. Task type`

	var taskTypeFlagName string
	if cmdPrefix == "" {
		taskTypeFlagName = "taskType"
	} else {
		taskTypeFlagName = fmt.Sprintf("%v.taskType", cmdPrefix)
	}

	var taskTypeFlagDefault string

	_ = cmd.PersistentFlags().String(taskTypeFlagName, taskTypeFlagDefault, taskTypeDescription)

	return nil
}

func retrieveOperationAtomicIngestionStartDataIngestRequestBodyFlag(m *atomic_ingestion.StartDataIngestRequestParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {

		var bodyFlagName string
		if cmdPrefix == "" {
			bodyFlagName = "body"
		} else {
			bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
		}

		bodyFlagValue, err := cmd.Flags().GetString(bodyFlagName)
		if err != nil {
			return err, false
		}
		m.Body = bodyFlagValue

	}
	return nil, retAdded
}
func retrieveOperationAtomicIngestionStartDataIngestRequestTableNameFlag(m *atomic_ingestion.StartDataIngestRequestParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationAtomicIngestionStartDataIngestRequestTableTypeFlag(m *atomic_ingestion.StartDataIngestRequestParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableType") {

		var tableTypeFlagName string
		if cmdPrefix == "" {
			tableTypeFlagName = "tableType"
		} else {
			tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
		}

		tableTypeFlagValue, err := cmd.Flags().GetString(tableTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TableType = tableTypeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationAtomicIngestionStartDataIngestRequestTaskTypeFlag(m *atomic_ingestion.StartDataIngestRequestParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("taskType") {

		var taskTypeFlagName string
		if cmdPrefix == "" {
			taskTypeFlagName = "taskType"
		} else {
			taskTypeFlagName = fmt.Sprintf("%v.taskType", cmdPrefix)
		}

		taskTypeFlagValue, err := cmd.Flags().GetString(taskTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TaskType = taskTypeFlagValue

	}
	return nil, retAdded
}

// parseOperationAtomicIngestionStartDataIngestRequestResult parses request result and return the string content
func parseOperationAtomicIngestionStartDataIngestRequestResult(respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning startDataIngestRequest default is not supported

		return "", respErr
	}
	return "", nil
}
