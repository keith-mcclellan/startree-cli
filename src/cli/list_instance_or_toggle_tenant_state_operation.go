// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/tenant"

	"github.com/spf13/cobra"
)

// makeOperationTenantListInstanceOrToggleTenantStateCmd returns a cmd to handle operation listInstanceOrToggleTenantState
func makeOperationTenantListInstanceOrToggleTenantStateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "listInstanceOrToggleTenantState",
		Short: ``,
		RunE:  runOperationTenantListInstanceOrToggleTenantState,
	}

	if err := registerOperationTenantListInstanceOrToggleTenantStateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTenantListInstanceOrToggleTenantState uses cmd flags to call endpoint api
func runOperationTenantListInstanceOrToggleTenantState(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := tenant.NewListInstanceOrToggleTenantStateParams()
	if err, _ := retrieveOperationTenantListInstanceOrToggleTenantStateStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTenantListInstanceOrToggleTenantStateTableTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTenantListInstanceOrToggleTenantStateTenantNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTenantListInstanceOrToggleTenantStateTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTenantListInstanceOrToggleTenantStateResult(appCli.Tenant.ListInstanceOrToggleTenantState(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTenantListInstanceOrToggleTenantStateParamFlags registers all flags needed to fill params
func registerOperationTenantListInstanceOrToggleTenantStateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTenantListInstanceOrToggleTenantStateStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTenantListInstanceOrToggleTenantStateTableTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTenantListInstanceOrToggleTenantStateTenantNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTenantListInstanceOrToggleTenantStateTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTenantListInstanceOrToggleTenantStateStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	stateDescription := `state`

	var stateFlagName string
	if cmdPrefix == "" {
		stateFlagName = "state"
	} else {
		stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var stateFlagDefault string

	_ = cmd.PersistentFlags().String(stateFlagName, stateFlagDefault, stateDescription)

	return nil
}
func registerOperationTenantListInstanceOrToggleTenantStateTableTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableTypeDescription := `Table type (offline|realtime)`

	var tableTypeFlagName string
	if cmdPrefix == "" {
		tableTypeFlagName = "tableType"
	} else {
		tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
	}

	var tableTypeFlagDefault string

	_ = cmd.PersistentFlags().String(tableTypeFlagName, tableTypeFlagDefault, tableTypeDescription)

	return nil
}
func registerOperationTenantListInstanceOrToggleTenantStateTenantNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tenantNameDescription := `Required. Tenant name`

	var tenantNameFlagName string
	if cmdPrefix == "" {
		tenantNameFlagName = "tenantName"
	} else {
		tenantNameFlagName = fmt.Sprintf("%v.tenantName", cmdPrefix)
	}

	var tenantNameFlagDefault string

	_ = cmd.PersistentFlags().String(tenantNameFlagName, tenantNameFlagDefault, tenantNameDescription)

	return nil
}
func registerOperationTenantListInstanceOrToggleTenantStateTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `Tenant type (server|broker)`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func retrieveOperationTenantListInstanceOrToggleTenantStateStateFlag(m *tenant.ListInstanceOrToggleTenantStateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("state") {

		var stateFlagName string
		if cmdPrefix == "" {
			stateFlagName = "state"
		} else {
			stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		stateFlagValue, err := cmd.Flags().GetString(stateFlagName)
		if err != nil {
			return err, false
		}
		m.State = &stateFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTenantListInstanceOrToggleTenantStateTableTypeFlag(m *tenant.ListInstanceOrToggleTenantStateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableType") {

		var tableTypeFlagName string
		if cmdPrefix == "" {
			tableTypeFlagName = "tableType"
		} else {
			tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
		}

		tableTypeFlagValue, err := cmd.Flags().GetString(tableTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TableType = &tableTypeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTenantListInstanceOrToggleTenantStateTenantNameFlag(m *tenant.ListInstanceOrToggleTenantStateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tenantName") {

		var tenantNameFlagName string
		if cmdPrefix == "" {
			tenantNameFlagName = "tenantName"
		} else {
			tenantNameFlagName = fmt.Sprintf("%v.tenantName", cmdPrefix)
		}

		tenantNameFlagValue, err := cmd.Flags().GetString(tenantNameFlagName)
		if err != nil {
			return err, false
		}
		m.TenantName = tenantNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTenantListInstanceOrToggleTenantStateTypeFlag(m *tenant.ListInstanceOrToggleTenantStateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

	}
	return nil, retAdded
}

// parseOperationTenantListInstanceOrToggleTenantStateResult parses request result and return the string content
func parseOperationTenantListInstanceOrToggleTenantStateResult(resp0 *tenant.ListInstanceOrToggleTenantStateOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning listInstanceOrToggleTenantStateOK is not supported

		// Non schema case: warning listInstanceOrToggleTenantStateInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response listInstanceOrToggleTenantStateOK is not supported by go-swagger cli yet.

	return "", nil
}
