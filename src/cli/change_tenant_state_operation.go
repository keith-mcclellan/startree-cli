// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/tenant"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTenantChangeTenantStateCmd returns a cmd to handle operation changeTenantState
func makeOperationTenantChangeTenantStateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "changeTenantState",
		Short: ``,
		RunE:  runOperationTenantChangeTenantState,
	}

	if err := registerOperationTenantChangeTenantStateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTenantChangeTenantState uses cmd flags to call endpoint api
func runOperationTenantChangeTenantState(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := tenant.NewChangeTenantStateParams()
	if err, _ := retrieveOperationTenantChangeTenantStateStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTenantChangeTenantStateTenantNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTenantChangeTenantStateTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTenantChangeTenantStateResult(appCli.Tenant.ChangeTenantState(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTenantChangeTenantStateParamFlags registers all flags needed to fill params
func registerOperationTenantChangeTenantStateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTenantChangeTenantStateStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTenantChangeTenantStateTenantNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTenantChangeTenantStateTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTenantChangeTenantStateStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	stateDescription := `Enum: ["enable","disable","drop"]. Required. state`

	var stateFlagName string
	if cmdPrefix == "" {
		stateFlagName = "state"
	} else {
		stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var stateFlagDefault string

	_ = cmd.PersistentFlags().String(stateFlagName, stateFlagDefault, stateDescription)

	if err := cmd.RegisterFlagCompletionFunc(stateFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enable","disable","drop"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}
func registerOperationTenantChangeTenantStateTenantNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tenantNameDescription := `Required. Tenant name`

	var tenantNameFlagName string
	if cmdPrefix == "" {
		tenantNameFlagName = "tenantName"
	} else {
		tenantNameFlagName = fmt.Sprintf("%v.tenantName", cmdPrefix)
	}

	var tenantNameFlagDefault string

	_ = cmd.PersistentFlags().String(tenantNameFlagName, tenantNameFlagDefault, tenantNameDescription)

	return nil
}
func registerOperationTenantChangeTenantStateTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `Enum: ["SERVER","BROKER"]. tenant type`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["SERVER","BROKER"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func retrieveOperationTenantChangeTenantStateStateFlag(m *tenant.ChangeTenantStateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("state") {

		var stateFlagName string
		if cmdPrefix == "" {
			stateFlagName = "state"
		} else {
			stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		stateFlagValue, err := cmd.Flags().GetString(stateFlagName)
		if err != nil {
			return err, false
		}
		m.State = stateFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTenantChangeTenantStateTenantNameFlag(m *tenant.ChangeTenantStateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tenantName") {

		var tenantNameFlagName string
		if cmdPrefix == "" {
			tenantNameFlagName = "tenantName"
		} else {
			tenantNameFlagName = fmt.Sprintf("%v.tenantName", cmdPrefix)
		}

		tenantNameFlagValue, err := cmd.Flags().GetString(tenantNameFlagName)
		if err != nil {
			return err, false
		}
		m.TenantName = tenantNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTenantChangeTenantStateTypeFlag(m *tenant.ChangeTenantStateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

	}
	return nil, retAdded
}

// parseOperationTenantChangeTenantStateResult parses request result and return the string content
func parseOperationTenantChangeTenantStateResult(resp0 *tenant.ChangeTenantStateOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*tenant.ChangeTenantStateOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning changeTenantStateNotFound is not supported

		// Non schema case: warning changeTenantStateInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		return string(msgStr), nil
	}

	return "", nil
}
