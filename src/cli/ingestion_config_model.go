// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"startree.ai/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for IngestionConfig

// register flags to command
func registerModelIngestionConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIngestionConfigAggregationConfigs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIngestionConfigBatchIngestionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIngestionConfigComplexTypeConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIngestionConfigContinueOnError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIngestionConfigFilterConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIngestionConfigRowTimeValueCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIngestionConfigSegmentTimeValueCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIngestionConfigStreamIngestionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIngestionConfigTransformConfigs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIngestionConfigAggregationConfigs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: aggregationConfigs []*AggregationConfig array type is not supported by go-swagger cli yet

	return nil
}

func registerIngestionConfigBatchIngestionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var batchIngestionConfigFlagName string
	if cmdPrefix == "" {
		batchIngestionConfigFlagName = "batchIngestionConfig"
	} else {
		batchIngestionConfigFlagName = fmt.Sprintf("%v.batchIngestionConfig", cmdPrefix)
	}

	if err := registerModelBatchIngestionConfigFlags(depth+1, batchIngestionConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIngestionConfigComplexTypeConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var complexTypeConfigFlagName string
	if cmdPrefix == "" {
		complexTypeConfigFlagName = "complexTypeConfig"
	} else {
		complexTypeConfigFlagName = fmt.Sprintf("%v.complexTypeConfig", cmdPrefix)
	}

	if err := registerModelComplexTypeConfigFlags(depth+1, complexTypeConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIngestionConfigContinueOnError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	continueOnErrorDescription := ``

	var continueOnErrorFlagName string
	if cmdPrefix == "" {
		continueOnErrorFlagName = "continueOnError"
	} else {
		continueOnErrorFlagName = fmt.Sprintf("%v.continueOnError", cmdPrefix)
	}

	var continueOnErrorFlagDefault bool

	_ = cmd.PersistentFlags().Bool(continueOnErrorFlagName, continueOnErrorFlagDefault, continueOnErrorDescription)

	return nil
}

func registerIngestionConfigFilterConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var filterConfigFlagName string
	if cmdPrefix == "" {
		filterConfigFlagName = "filterConfig"
	} else {
		filterConfigFlagName = fmt.Sprintf("%v.filterConfig", cmdPrefix)
	}

	if err := registerModelFilterConfigFlags(depth+1, filterConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIngestionConfigRowTimeValueCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rowTimeValueCheckDescription := ``

	var rowTimeValueCheckFlagName string
	if cmdPrefix == "" {
		rowTimeValueCheckFlagName = "rowTimeValueCheck"
	} else {
		rowTimeValueCheckFlagName = fmt.Sprintf("%v.rowTimeValueCheck", cmdPrefix)
	}

	var rowTimeValueCheckFlagDefault bool

	_ = cmd.PersistentFlags().Bool(rowTimeValueCheckFlagName, rowTimeValueCheckFlagDefault, rowTimeValueCheckDescription)

	return nil
}

func registerIngestionConfigSegmentTimeValueCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentTimeValueCheckDescription := ``

	var segmentTimeValueCheckFlagName string
	if cmdPrefix == "" {
		segmentTimeValueCheckFlagName = "segmentTimeValueCheck"
	} else {
		segmentTimeValueCheckFlagName = fmt.Sprintf("%v.segmentTimeValueCheck", cmdPrefix)
	}

	var segmentTimeValueCheckFlagDefault bool

	_ = cmd.PersistentFlags().Bool(segmentTimeValueCheckFlagName, segmentTimeValueCheckFlagDefault, segmentTimeValueCheckDescription)

	return nil
}

func registerIngestionConfigStreamIngestionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var streamIngestionConfigFlagName string
	if cmdPrefix == "" {
		streamIngestionConfigFlagName = "streamIngestionConfig"
	} else {
		streamIngestionConfigFlagName = fmt.Sprintf("%v.streamIngestionConfig", cmdPrefix)
	}

	if err := registerModelStreamIngestionConfigFlags(depth+1, streamIngestionConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIngestionConfigTransformConfigs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: transformConfigs []*TransformConfig array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIngestionConfigFlags(depth int, m *models.IngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, aggregationConfigsAdded := retrieveIngestionConfigAggregationConfigsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aggregationConfigsAdded

	err, batchIngestionConfigAdded := retrieveIngestionConfigBatchIngestionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || batchIngestionConfigAdded

	err, complexTypeConfigAdded := retrieveIngestionConfigComplexTypeConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || complexTypeConfigAdded

	err, continueOnErrorAdded := retrieveIngestionConfigContinueOnErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || continueOnErrorAdded

	err, filterConfigAdded := retrieveIngestionConfigFilterConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || filterConfigAdded

	err, rowTimeValueCheckAdded := retrieveIngestionConfigRowTimeValueCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rowTimeValueCheckAdded

	err, segmentTimeValueCheckAdded := retrieveIngestionConfigSegmentTimeValueCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentTimeValueCheckAdded

	err, streamIngestionConfigAdded := retrieveIngestionConfigStreamIngestionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamIngestionConfigAdded

	err, transformConfigsAdded := retrieveIngestionConfigTransformConfigsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transformConfigsAdded

	return nil, retAdded
}

func retrieveIngestionConfigAggregationConfigsFlags(depth int, m *models.IngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aggregationConfigsFlagName := fmt.Sprintf("%v.aggregationConfigs", cmdPrefix)
	if cmd.Flags().Changed(aggregationConfigsFlagName) {
		// warning: aggregationConfigs array type []*AggregationConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIngestionConfigBatchIngestionConfigFlags(depth int, m *models.IngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	batchIngestionConfigFlagName := fmt.Sprintf("%v.batchIngestionConfig", cmdPrefix)
	if cmd.Flags().Changed(batchIngestionConfigFlagName) {
		// info: complex object batchIngestionConfig BatchIngestionConfig is retrieved outside this Changed() block
	}
	batchIngestionConfigFlagValue := m.BatchIngestionConfig
	if swag.IsZero(batchIngestionConfigFlagValue) {
		batchIngestionConfigFlagValue = &models.BatchIngestionConfig{}
	}

	err, batchIngestionConfigAdded := retrieveModelBatchIngestionConfigFlags(depth+1, batchIngestionConfigFlagValue, batchIngestionConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || batchIngestionConfigAdded
	if batchIngestionConfigAdded {
		m.BatchIngestionConfig = batchIngestionConfigFlagValue
	}

	return nil, retAdded
}

func retrieveIngestionConfigComplexTypeConfigFlags(depth int, m *models.IngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	complexTypeConfigFlagName := fmt.Sprintf("%v.complexTypeConfig", cmdPrefix)
	if cmd.Flags().Changed(complexTypeConfigFlagName) {
		// info: complex object complexTypeConfig ComplexTypeConfig is retrieved outside this Changed() block
	}
	complexTypeConfigFlagValue := m.ComplexTypeConfig
	if swag.IsZero(complexTypeConfigFlagValue) {
		complexTypeConfigFlagValue = &models.ComplexTypeConfig{}
	}

	err, complexTypeConfigAdded := retrieveModelComplexTypeConfigFlags(depth+1, complexTypeConfigFlagValue, complexTypeConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || complexTypeConfigAdded
	if complexTypeConfigAdded {
		m.ComplexTypeConfig = complexTypeConfigFlagValue
	}

	return nil, retAdded
}

func retrieveIngestionConfigContinueOnErrorFlags(depth int, m *models.IngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	continueOnErrorFlagName := fmt.Sprintf("%v.continueOnError", cmdPrefix)
	if cmd.Flags().Changed(continueOnErrorFlagName) {

		var continueOnErrorFlagName string
		if cmdPrefix == "" {
			continueOnErrorFlagName = "continueOnError"
		} else {
			continueOnErrorFlagName = fmt.Sprintf("%v.continueOnError", cmdPrefix)
		}

		continueOnErrorFlagValue, err := cmd.Flags().GetBool(continueOnErrorFlagName)
		if err != nil {
			return err, false
		}
		m.ContinueOnError = continueOnErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIngestionConfigFilterConfigFlags(depth int, m *models.IngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	filterConfigFlagName := fmt.Sprintf("%v.filterConfig", cmdPrefix)
	if cmd.Flags().Changed(filterConfigFlagName) {
		// info: complex object filterConfig FilterConfig is retrieved outside this Changed() block
	}
	filterConfigFlagValue := m.FilterConfig
	if swag.IsZero(filterConfigFlagValue) {
		filterConfigFlagValue = &models.FilterConfig{}
	}

	err, filterConfigAdded := retrieveModelFilterConfigFlags(depth+1, filterConfigFlagValue, filterConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || filterConfigAdded
	if filterConfigAdded {
		m.FilterConfig = filterConfigFlagValue
	}

	return nil, retAdded
}

func retrieveIngestionConfigRowTimeValueCheckFlags(depth int, m *models.IngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rowTimeValueCheckFlagName := fmt.Sprintf("%v.rowTimeValueCheck", cmdPrefix)
	if cmd.Flags().Changed(rowTimeValueCheckFlagName) {

		var rowTimeValueCheckFlagName string
		if cmdPrefix == "" {
			rowTimeValueCheckFlagName = "rowTimeValueCheck"
		} else {
			rowTimeValueCheckFlagName = fmt.Sprintf("%v.rowTimeValueCheck", cmdPrefix)
		}

		rowTimeValueCheckFlagValue, err := cmd.Flags().GetBool(rowTimeValueCheckFlagName)
		if err != nil {
			return err, false
		}
		m.RowTimeValueCheck = rowTimeValueCheckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIngestionConfigSegmentTimeValueCheckFlags(depth int, m *models.IngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentTimeValueCheckFlagName := fmt.Sprintf("%v.segmentTimeValueCheck", cmdPrefix)
	if cmd.Flags().Changed(segmentTimeValueCheckFlagName) {

		var segmentTimeValueCheckFlagName string
		if cmdPrefix == "" {
			segmentTimeValueCheckFlagName = "segmentTimeValueCheck"
		} else {
			segmentTimeValueCheckFlagName = fmt.Sprintf("%v.segmentTimeValueCheck", cmdPrefix)
		}

		segmentTimeValueCheckFlagValue, err := cmd.Flags().GetBool(segmentTimeValueCheckFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentTimeValueCheck = segmentTimeValueCheckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIngestionConfigStreamIngestionConfigFlags(depth int, m *models.IngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamIngestionConfigFlagName := fmt.Sprintf("%v.streamIngestionConfig", cmdPrefix)
	if cmd.Flags().Changed(streamIngestionConfigFlagName) {
		// info: complex object streamIngestionConfig StreamIngestionConfig is retrieved outside this Changed() block
	}
	streamIngestionConfigFlagValue := m.StreamIngestionConfig
	if swag.IsZero(streamIngestionConfigFlagValue) {
		streamIngestionConfigFlagValue = &models.StreamIngestionConfig{}
	}

	err, streamIngestionConfigAdded := retrieveModelStreamIngestionConfigFlags(depth+1, streamIngestionConfigFlagValue, streamIngestionConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamIngestionConfigAdded
	if streamIngestionConfigAdded {
		m.StreamIngestionConfig = streamIngestionConfigFlagValue
	}

	return nil, retAdded
}

func retrieveIngestionConfigTransformConfigsFlags(depth int, m *models.IngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transformConfigsFlagName := fmt.Sprintf("%v.transformConfigs", cmdPrefix)
	if cmd.Flags().Changed(transformConfigsFlagName) {
		// warning: transformConfigs array type []*TransformConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
