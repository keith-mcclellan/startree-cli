// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for InstancePartitions

// register flags to command
func registerModelInstancePartitionsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInstancePartitionsInstancePartitionsName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstancePartitionsPartitionToInstancesMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInstancePartitionsInstancePartitionsName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	instancePartitionsNameDescription := ``

	var instancePartitionsNameFlagName string
	if cmdPrefix == "" {
		instancePartitionsNameFlagName = "instancePartitionsName"
	} else {
		instancePartitionsNameFlagName = fmt.Sprintf("%v.instancePartitionsName", cmdPrefix)
	}

	var instancePartitionsNameFlagDefault string

	_ = cmd.PersistentFlags().String(instancePartitionsNameFlagName, instancePartitionsNameFlagDefault, instancePartitionsNameDescription)

	return nil
}

func registerInstancePartitionsPartitionToInstancesMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: partitionToInstancesMap map[string][]string map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInstancePartitionsFlags(depth int, m *models.InstancePartitions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, instancePartitionsNameAdded := retrieveInstancePartitionsInstancePartitionsNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || instancePartitionsNameAdded

	err, partitionToInstancesMapAdded := retrieveInstancePartitionsPartitionToInstancesMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || partitionToInstancesMapAdded

	return nil, retAdded
}

func retrieveInstancePartitionsInstancePartitionsNameFlags(depth int, m *models.InstancePartitions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	instancePartitionsNameFlagName := fmt.Sprintf("%v.instancePartitionsName", cmdPrefix)
	if cmd.Flags().Changed(instancePartitionsNameFlagName) {

		var instancePartitionsNameFlagName string
		if cmdPrefix == "" {
			instancePartitionsNameFlagName = "instancePartitionsName"
		} else {
			instancePartitionsNameFlagName = fmt.Sprintf("%v.instancePartitionsName", cmdPrefix)
		}

		instancePartitionsNameFlagValue, err := cmd.Flags().GetString(instancePartitionsNameFlagName)
		if err != nil {
			return err, false
		}
		m.InstancePartitionsName = instancePartitionsNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstancePartitionsPartitionToInstancesMapFlags(depth int, m *models.InstancePartitions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	partitionToInstancesMapFlagName := fmt.Sprintf("%v.partitionToInstancesMap", cmdPrefix)
	if cmd.Flags().Changed(partitionToInstancesMapFlagName) {
		// warning: partitionToInstancesMap map type map[string][]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
