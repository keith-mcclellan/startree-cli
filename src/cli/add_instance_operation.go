// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/instance"
	"startree.ai/cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationInstanceAddInstanceCmd returns a cmd to handle operation addInstance
func makeOperationInstanceAddInstanceCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "addInstance",
		Short: `Creates a new instance with given instance config`,
		RunE:  runOperationInstanceAddInstance,
	}

	if err := registerOperationInstanceAddInstanceParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationInstanceAddInstance uses cmd flags to call endpoint api
func runOperationInstanceAddInstance(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := instance.NewAddInstanceParams()
	if err, _ := retrieveOperationInstanceAddInstanceBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationInstanceAddInstanceUpdateBrokerResourceFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationInstanceAddInstanceResult(appCli.Instance.AddInstance(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationInstanceAddInstanceParamFlags registers all flags needed to fill params
func registerOperationInstanceAddInstanceParamFlags(cmd *cobra.Command) error {
	if err := registerOperationInstanceAddInstanceBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationInstanceAddInstanceUpdateBrokerResourceParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationInstanceAddInstanceBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. ")

	// add flags for body
	if err := registerModelInstanceFlags(0, "instance", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationInstanceAddInstanceUpdateBrokerResourceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	updateBrokerResourceDescription := `Whether to update broker resource for broker instance`

	var updateBrokerResourceFlagName string
	if cmdPrefix == "" {
		updateBrokerResourceFlagName = "updateBrokerResource"
	} else {
		updateBrokerResourceFlagName = fmt.Sprintf("%v.updateBrokerResource", cmdPrefix)
	}

	var updateBrokerResourceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(updateBrokerResourceFlagName, updateBrokerResourceFlagDefault, updateBrokerResourceDescription)

	return nil
}

func retrieveOperationInstanceAddInstanceBodyFlag(m *instance.AddInstanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.Instance{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.Instance: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.Instance{}
	}
	err, added := retrieveModelInstanceFlags(0, bodyValueModel, "instance", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationInstanceAddInstanceUpdateBrokerResourceFlag(m *instance.AddInstanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("updateBrokerResource") {

		var updateBrokerResourceFlagName string
		if cmdPrefix == "" {
			updateBrokerResourceFlagName = "updateBrokerResource"
		} else {
			updateBrokerResourceFlagName = fmt.Sprintf("%v.updateBrokerResource", cmdPrefix)
		}

		updateBrokerResourceFlagValue, err := cmd.Flags().GetBool(updateBrokerResourceFlagName)
		if err != nil {
			return err, false
		}
		m.UpdateBrokerResource = &updateBrokerResourceFlagValue

	}
	return nil, retAdded
}

// parseOperationInstanceAddInstanceResult parses request result and return the string content
func parseOperationInstanceAddInstanceResult(resp0 *instance.AddInstanceOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning addInstanceOK is not supported

		// Non schema case: warning addInstanceConflict is not supported

		// Non schema case: warning addInstanceInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response addInstanceOK is not supported by go-swagger cli yet.

	return "", nil
}
