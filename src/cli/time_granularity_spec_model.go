// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for TimeGranularitySpec

// register flags to command
func registerModelTimeGranularitySpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTimeGranularitySpecDataType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTimeGranularitySpecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTimeGranularitySpecTimeFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTimeGranularitySpecTimeType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTimeGranularitySpecTimeUnitSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTimeGranularitySpecDataType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataTypeDescription := `Enum: ["INT","LONG","FLOAT","DOUBLE","BIG_DECIMAL","BOOLEAN","TIMESTAMP","STRING","JSON","BYTES","STRUCT","MAP","LIST"]. `

	var dataTypeFlagName string
	if cmdPrefix == "" {
		dataTypeFlagName = "dataType"
	} else {
		dataTypeFlagName = fmt.Sprintf("%v.dataType", cmdPrefix)
	}

	var dataTypeFlagDefault string

	_ = cmd.PersistentFlags().String(dataTypeFlagName, dataTypeFlagDefault, dataTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(dataTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["INT","LONG","FLOAT","DOUBLE","BIG_DECIMAL","BOOLEAN","TIMESTAMP","STRING","JSON","BYTES","STRUCT","MAP","LIST"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTimeGranularitySpecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerTimeGranularitySpecTimeFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeFormatDescription := ``

	var timeFormatFlagName string
	if cmdPrefix == "" {
		timeFormatFlagName = "timeFormat"
	} else {
		timeFormatFlagName = fmt.Sprintf("%v.timeFormat", cmdPrefix)
	}

	var timeFormatFlagDefault string

	_ = cmd.PersistentFlags().String(timeFormatFlagName, timeFormatFlagDefault, timeFormatDescription)

	return nil
}

func registerTimeGranularitySpecTimeType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeTypeDescription := `Enum: ["NANOSECONDS","MICROSECONDS","MILLISECONDS","SECONDS","MINUTES","HOURS","DAYS"]. `

	var timeTypeFlagName string
	if cmdPrefix == "" {
		timeTypeFlagName = "timeType"
	} else {
		timeTypeFlagName = fmt.Sprintf("%v.timeType", cmdPrefix)
	}

	var timeTypeFlagDefault string

	_ = cmd.PersistentFlags().String(timeTypeFlagName, timeTypeFlagDefault, timeTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(timeTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["NANOSECONDS","MICROSECONDS","MILLISECONDS","SECONDS","MINUTES","HOURS","DAYS"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTimeGranularitySpecTimeUnitSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeUnitSizeDescription := ``

	var timeUnitSizeFlagName string
	if cmdPrefix == "" {
		timeUnitSizeFlagName = "timeUnitSize"
	} else {
		timeUnitSizeFlagName = fmt.Sprintf("%v.timeUnitSize", cmdPrefix)
	}

	var timeUnitSizeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(timeUnitSizeFlagName, timeUnitSizeFlagDefault, timeUnitSizeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTimeGranularitySpecFlags(depth int, m *models.TimeGranularitySpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataTypeAdded := retrieveTimeGranularitySpecDataTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataTypeAdded

	err, nameAdded := retrieveTimeGranularitySpecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, timeFormatAdded := retrieveTimeGranularitySpecTimeFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeFormatAdded

	err, timeTypeAdded := retrieveTimeGranularitySpecTimeTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeTypeAdded

	err, timeUnitSizeAdded := retrieveTimeGranularitySpecTimeUnitSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeUnitSizeAdded

	return nil, retAdded
}

func retrieveTimeGranularitySpecDataTypeFlags(depth int, m *models.TimeGranularitySpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataTypeFlagName := fmt.Sprintf("%v.dataType", cmdPrefix)
	if cmd.Flags().Changed(dataTypeFlagName) {

		var dataTypeFlagName string
		if cmdPrefix == "" {
			dataTypeFlagName = "dataType"
		} else {
			dataTypeFlagName = fmt.Sprintf("%v.dataType", cmdPrefix)
		}

		dataTypeFlagValue, err := cmd.Flags().GetString(dataTypeFlagName)
		if err != nil {
			return err, false
		}
		m.DataType = dataTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTimeGranularitySpecNameFlags(depth int, m *models.TimeGranularitySpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTimeGranularitySpecTimeFormatFlags(depth int, m *models.TimeGranularitySpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeFormatFlagName := fmt.Sprintf("%v.timeFormat", cmdPrefix)
	if cmd.Flags().Changed(timeFormatFlagName) {

		var timeFormatFlagName string
		if cmdPrefix == "" {
			timeFormatFlagName = "timeFormat"
		} else {
			timeFormatFlagName = fmt.Sprintf("%v.timeFormat", cmdPrefix)
		}

		timeFormatFlagValue, err := cmd.Flags().GetString(timeFormatFlagName)
		if err != nil {
			return err, false
		}
		m.TimeFormat = timeFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTimeGranularitySpecTimeTypeFlags(depth int, m *models.TimeGranularitySpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeTypeFlagName := fmt.Sprintf("%v.timeType", cmdPrefix)
	if cmd.Flags().Changed(timeTypeFlagName) {

		var timeTypeFlagName string
		if cmdPrefix == "" {
			timeTypeFlagName = "timeType"
		} else {
			timeTypeFlagName = fmt.Sprintf("%v.timeType", cmdPrefix)
		}

		timeTypeFlagValue, err := cmd.Flags().GetString(timeTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TimeType = timeTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTimeGranularitySpecTimeUnitSizeFlags(depth int, m *models.TimeGranularitySpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeUnitSizeFlagName := fmt.Sprintf("%v.timeUnitSize", cmdPrefix)
	if cmd.Flags().Changed(timeUnitSizeFlagName) {

		var timeUnitSizeFlagName string
		if cmdPrefix == "" {
			timeUnitSizeFlagName = "timeUnitSize"
		} else {
			timeUnitSizeFlagName = fmt.Sprintf("%v.timeUnitSize", cmdPrefix)
		}

		timeUnitSizeFlagValue, err := cmd.Flags().GetInt32(timeUnitSizeFlagName)
		if err != nil {
			return err, false
		}
		m.TimeUnitSize = timeUnitSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
