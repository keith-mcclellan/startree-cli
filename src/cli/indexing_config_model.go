// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"startree.ai/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for IndexingConfig

// register flags to command
func registerModelIndexingConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIndexingConfigAggregateMetrics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigAutoGeneratedInvertedIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigBloomFilterColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigBloomFilterConfigs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigColumnMinMaxValueGeneratorMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigCreateInvertedIndexDuringSegmentGeneration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigEnableDefaultStarTree(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigEnableDynamicStarTreeCreation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigFstindexType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigInvertedIndexColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigJSONIndexColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigJSONIndexConfigs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigLoadMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigNoDictionaryColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigNoDictionaryConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigNoDictionarySizeRatioThreshold(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigNullHandlingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigOnHeapDictionaryColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigOptimizeDictionary(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigOptimizeDictionaryForMetrics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigRangeIndexColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigRangeIndexVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigSegmentFormatVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigSegmentNameGeneratorType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigSegmentPartitionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigSortedColumn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigStarTreeIndexConfigs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigStreamConfigs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexingConfigVarLengthDictionaryColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIndexingConfigAggregateMetrics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aggregateMetricsDescription := ``

	var aggregateMetricsFlagName string
	if cmdPrefix == "" {
		aggregateMetricsFlagName = "aggregateMetrics"
	} else {
		aggregateMetricsFlagName = fmt.Sprintf("%v.aggregateMetrics", cmdPrefix)
	}

	var aggregateMetricsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(aggregateMetricsFlagName, aggregateMetricsFlagDefault, aggregateMetricsDescription)

	return nil
}

func registerIndexingConfigAutoGeneratedInvertedIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	autoGeneratedInvertedIndexDescription := ``

	var autoGeneratedInvertedIndexFlagName string
	if cmdPrefix == "" {
		autoGeneratedInvertedIndexFlagName = "autoGeneratedInvertedIndex"
	} else {
		autoGeneratedInvertedIndexFlagName = fmt.Sprintf("%v.autoGeneratedInvertedIndex", cmdPrefix)
	}

	var autoGeneratedInvertedIndexFlagDefault bool

	_ = cmd.PersistentFlags().Bool(autoGeneratedInvertedIndexFlagName, autoGeneratedInvertedIndexFlagDefault, autoGeneratedInvertedIndexDescription)

	return nil
}

func registerIndexingConfigBloomFilterColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: bloomFilterColumns []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIndexingConfigBloomFilterConfigs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: bloomFilterConfigs map[string]BloomFilterConfig map type is not supported by go-swagger cli yet

	return nil
}

func registerIndexingConfigColumnMinMaxValueGeneratorMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	columnMinMaxValueGeneratorModeDescription := ``

	var columnMinMaxValueGeneratorModeFlagName string
	if cmdPrefix == "" {
		columnMinMaxValueGeneratorModeFlagName = "columnMinMaxValueGeneratorMode"
	} else {
		columnMinMaxValueGeneratorModeFlagName = fmt.Sprintf("%v.columnMinMaxValueGeneratorMode", cmdPrefix)
	}

	var columnMinMaxValueGeneratorModeFlagDefault string

	_ = cmd.PersistentFlags().String(columnMinMaxValueGeneratorModeFlagName, columnMinMaxValueGeneratorModeFlagDefault, columnMinMaxValueGeneratorModeDescription)

	return nil
}

func registerIndexingConfigCreateInvertedIndexDuringSegmentGeneration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createInvertedIndexDuringSegmentGenerationDescription := ``

	var createInvertedIndexDuringSegmentGenerationFlagName string
	if cmdPrefix == "" {
		createInvertedIndexDuringSegmentGenerationFlagName = "createInvertedIndexDuringSegmentGeneration"
	} else {
		createInvertedIndexDuringSegmentGenerationFlagName = fmt.Sprintf("%v.createInvertedIndexDuringSegmentGeneration", cmdPrefix)
	}

	var createInvertedIndexDuringSegmentGenerationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(createInvertedIndexDuringSegmentGenerationFlagName, createInvertedIndexDuringSegmentGenerationFlagDefault, createInvertedIndexDuringSegmentGenerationDescription)

	return nil
}

func registerIndexingConfigEnableDefaultStarTree(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableDefaultStarTreeDescription := ``

	var enableDefaultStarTreeFlagName string
	if cmdPrefix == "" {
		enableDefaultStarTreeFlagName = "enableDefaultStarTree"
	} else {
		enableDefaultStarTreeFlagName = fmt.Sprintf("%v.enableDefaultStarTree", cmdPrefix)
	}

	var enableDefaultStarTreeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableDefaultStarTreeFlagName, enableDefaultStarTreeFlagDefault, enableDefaultStarTreeDescription)

	return nil
}

func registerIndexingConfigEnableDynamicStarTreeCreation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableDynamicStarTreeCreationDescription := ``

	var enableDynamicStarTreeCreationFlagName string
	if cmdPrefix == "" {
		enableDynamicStarTreeCreationFlagName = "enableDynamicStarTreeCreation"
	} else {
		enableDynamicStarTreeCreationFlagName = fmt.Sprintf("%v.enableDynamicStarTreeCreation", cmdPrefix)
	}

	var enableDynamicStarTreeCreationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableDynamicStarTreeCreationFlagName, enableDynamicStarTreeCreationFlagDefault, enableDynamicStarTreeCreationDescription)

	return nil
}

func registerIndexingConfigFstindexType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fstindexTypeDescription := `Enum: ["LUCENE","NATIVE"]. `

	var fstindexTypeFlagName string
	if cmdPrefix == "" {
		fstindexTypeFlagName = "fstindexType"
	} else {
		fstindexTypeFlagName = fmt.Sprintf("%v.fstindexType", cmdPrefix)
	}

	var fstindexTypeFlagDefault string

	_ = cmd.PersistentFlags().String(fstindexTypeFlagName, fstindexTypeFlagDefault, fstindexTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(fstindexTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["LUCENE","NATIVE"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerIndexingConfigInvertedIndexColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: invertedIndexColumns []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIndexingConfigJSONIndexColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: jsonIndexColumns []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIndexingConfigJSONIndexConfigs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: jsonIndexConfigs map[string]JSONIndexConfig map type is not supported by go-swagger cli yet

	return nil
}

func registerIndexingConfigLoadMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	loadModeDescription := ``

	var loadModeFlagName string
	if cmdPrefix == "" {
		loadModeFlagName = "loadMode"
	} else {
		loadModeFlagName = fmt.Sprintf("%v.loadMode", cmdPrefix)
	}

	var loadModeFlagDefault string

	_ = cmd.PersistentFlags().String(loadModeFlagName, loadModeFlagDefault, loadModeDescription)

	return nil
}

func registerIndexingConfigNoDictionaryColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: noDictionaryColumns []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIndexingConfigNoDictionaryConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: noDictionaryConfig map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerIndexingConfigNoDictionarySizeRatioThreshold(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noDictionarySizeRatioThresholdDescription := ``

	var noDictionarySizeRatioThresholdFlagName string
	if cmdPrefix == "" {
		noDictionarySizeRatioThresholdFlagName = "noDictionarySizeRatioThreshold"
	} else {
		noDictionarySizeRatioThresholdFlagName = fmt.Sprintf("%v.noDictionarySizeRatioThreshold", cmdPrefix)
	}

	var noDictionarySizeRatioThresholdFlagDefault float64

	_ = cmd.PersistentFlags().Float64(noDictionarySizeRatioThresholdFlagName, noDictionarySizeRatioThresholdFlagDefault, noDictionarySizeRatioThresholdDescription)

	return nil
}

func registerIndexingConfigNullHandlingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nullHandlingEnabledDescription := ``

	var nullHandlingEnabledFlagName string
	if cmdPrefix == "" {
		nullHandlingEnabledFlagName = "nullHandlingEnabled"
	} else {
		nullHandlingEnabledFlagName = fmt.Sprintf("%v.nullHandlingEnabled", cmdPrefix)
	}

	var nullHandlingEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(nullHandlingEnabledFlagName, nullHandlingEnabledFlagDefault, nullHandlingEnabledDescription)

	return nil
}

func registerIndexingConfigOnHeapDictionaryColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: onHeapDictionaryColumns []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIndexingConfigOptimizeDictionary(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	optimizeDictionaryDescription := ``

	var optimizeDictionaryFlagName string
	if cmdPrefix == "" {
		optimizeDictionaryFlagName = "optimizeDictionary"
	} else {
		optimizeDictionaryFlagName = fmt.Sprintf("%v.optimizeDictionary", cmdPrefix)
	}

	var optimizeDictionaryFlagDefault bool

	_ = cmd.PersistentFlags().Bool(optimizeDictionaryFlagName, optimizeDictionaryFlagDefault, optimizeDictionaryDescription)

	return nil
}

func registerIndexingConfigOptimizeDictionaryForMetrics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	optimizeDictionaryForMetricsDescription := ``

	var optimizeDictionaryForMetricsFlagName string
	if cmdPrefix == "" {
		optimizeDictionaryForMetricsFlagName = "optimizeDictionaryForMetrics"
	} else {
		optimizeDictionaryForMetricsFlagName = fmt.Sprintf("%v.optimizeDictionaryForMetrics", cmdPrefix)
	}

	var optimizeDictionaryForMetricsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(optimizeDictionaryForMetricsFlagName, optimizeDictionaryForMetricsFlagDefault, optimizeDictionaryForMetricsDescription)

	return nil
}

func registerIndexingConfigRangeIndexColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: rangeIndexColumns []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIndexingConfigRangeIndexVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rangeIndexVersionDescription := ``

	var rangeIndexVersionFlagName string
	if cmdPrefix == "" {
		rangeIndexVersionFlagName = "rangeIndexVersion"
	} else {
		rangeIndexVersionFlagName = fmt.Sprintf("%v.rangeIndexVersion", cmdPrefix)
	}

	var rangeIndexVersionFlagDefault int32

	_ = cmd.PersistentFlags().Int32(rangeIndexVersionFlagName, rangeIndexVersionFlagDefault, rangeIndexVersionDescription)

	return nil
}

func registerIndexingConfigSegmentFormatVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentFormatVersionDescription := ``

	var segmentFormatVersionFlagName string
	if cmdPrefix == "" {
		segmentFormatVersionFlagName = "segmentFormatVersion"
	} else {
		segmentFormatVersionFlagName = fmt.Sprintf("%v.segmentFormatVersion", cmdPrefix)
	}

	var segmentFormatVersionFlagDefault string

	_ = cmd.PersistentFlags().String(segmentFormatVersionFlagName, segmentFormatVersionFlagDefault, segmentFormatVersionDescription)

	return nil
}

func registerIndexingConfigSegmentNameGeneratorType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentNameGeneratorTypeDescription := ``

	var segmentNameGeneratorTypeFlagName string
	if cmdPrefix == "" {
		segmentNameGeneratorTypeFlagName = "segmentNameGeneratorType"
	} else {
		segmentNameGeneratorTypeFlagName = fmt.Sprintf("%v.segmentNameGeneratorType", cmdPrefix)
	}

	var segmentNameGeneratorTypeFlagDefault string

	_ = cmd.PersistentFlags().String(segmentNameGeneratorTypeFlagName, segmentNameGeneratorTypeFlagDefault, segmentNameGeneratorTypeDescription)

	return nil
}

func registerIndexingConfigSegmentPartitionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var segmentPartitionConfigFlagName string
	if cmdPrefix == "" {
		segmentPartitionConfigFlagName = "segmentPartitionConfig"
	} else {
		segmentPartitionConfigFlagName = fmt.Sprintf("%v.segmentPartitionConfig", cmdPrefix)
	}

	if err := registerModelSegmentPartitionConfigFlags(depth+1, segmentPartitionConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIndexingConfigSortedColumn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: sortedColumn []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIndexingConfigStarTreeIndexConfigs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: starTreeIndexConfigs []*StarTreeIndexConfig array type is not supported by go-swagger cli yet

	return nil
}

func registerIndexingConfigStreamConfigs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: streamConfigs map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerIndexingConfigVarLengthDictionaryColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: varLengthDictionaryColumns []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIndexingConfigFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, aggregateMetricsAdded := retrieveIndexingConfigAggregateMetricsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aggregateMetricsAdded

	err, autoGeneratedInvertedIndexAdded := retrieveIndexingConfigAutoGeneratedInvertedIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoGeneratedInvertedIndexAdded

	err, bloomFilterColumnsAdded := retrieveIndexingConfigBloomFilterColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bloomFilterColumnsAdded

	err, bloomFilterConfigsAdded := retrieveIndexingConfigBloomFilterConfigsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bloomFilterConfigsAdded

	err, columnMinMaxValueGeneratorModeAdded := retrieveIndexingConfigColumnMinMaxValueGeneratorModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || columnMinMaxValueGeneratorModeAdded

	err, createInvertedIndexDuringSegmentGenerationAdded := retrieveIndexingConfigCreateInvertedIndexDuringSegmentGenerationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createInvertedIndexDuringSegmentGenerationAdded

	err, enableDefaultStarTreeAdded := retrieveIndexingConfigEnableDefaultStarTreeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableDefaultStarTreeAdded

	err, enableDynamicStarTreeCreationAdded := retrieveIndexingConfigEnableDynamicStarTreeCreationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableDynamicStarTreeCreationAdded

	err, fstindexTypeAdded := retrieveIndexingConfigFstindexTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fstindexTypeAdded

	err, invertedIndexColumnsAdded := retrieveIndexingConfigInvertedIndexColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || invertedIndexColumnsAdded

	err, jsonIndexColumnsAdded := retrieveIndexingConfigJSONIndexColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jsonIndexColumnsAdded

	err, jsonIndexConfigsAdded := retrieveIndexingConfigJSONIndexConfigsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jsonIndexConfigsAdded

	err, loadModeAdded := retrieveIndexingConfigLoadModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || loadModeAdded

	err, noDictionaryColumnsAdded := retrieveIndexingConfigNoDictionaryColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noDictionaryColumnsAdded

	err, noDictionaryConfigAdded := retrieveIndexingConfigNoDictionaryConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noDictionaryConfigAdded

	err, noDictionarySizeRatioThresholdAdded := retrieveIndexingConfigNoDictionarySizeRatioThresholdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noDictionarySizeRatioThresholdAdded

	err, nullHandlingEnabledAdded := retrieveIndexingConfigNullHandlingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nullHandlingEnabledAdded

	err, onHeapDictionaryColumnsAdded := retrieveIndexingConfigOnHeapDictionaryColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || onHeapDictionaryColumnsAdded

	err, optimizeDictionaryAdded := retrieveIndexingConfigOptimizeDictionaryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || optimizeDictionaryAdded

	err, optimizeDictionaryForMetricsAdded := retrieveIndexingConfigOptimizeDictionaryForMetricsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || optimizeDictionaryForMetricsAdded

	err, rangeIndexColumnsAdded := retrieveIndexingConfigRangeIndexColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rangeIndexColumnsAdded

	err, rangeIndexVersionAdded := retrieveIndexingConfigRangeIndexVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rangeIndexVersionAdded

	err, segmentFormatVersionAdded := retrieveIndexingConfigSegmentFormatVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentFormatVersionAdded

	err, segmentNameGeneratorTypeAdded := retrieveIndexingConfigSegmentNameGeneratorTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentNameGeneratorTypeAdded

	err, segmentPartitionConfigAdded := retrieveIndexingConfigSegmentPartitionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentPartitionConfigAdded

	err, sortedColumnAdded := retrieveIndexingConfigSortedColumnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sortedColumnAdded

	err, starTreeIndexConfigsAdded := retrieveIndexingConfigStarTreeIndexConfigsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || starTreeIndexConfigsAdded

	err, streamConfigsAdded := retrieveIndexingConfigStreamConfigsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamConfigsAdded

	err, varLengthDictionaryColumnsAdded := retrieveIndexingConfigVarLengthDictionaryColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varLengthDictionaryColumnsAdded

	return nil, retAdded
}

func retrieveIndexingConfigAggregateMetricsFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aggregateMetricsFlagName := fmt.Sprintf("%v.aggregateMetrics", cmdPrefix)
	if cmd.Flags().Changed(aggregateMetricsFlagName) {

		var aggregateMetricsFlagName string
		if cmdPrefix == "" {
			aggregateMetricsFlagName = "aggregateMetrics"
		} else {
			aggregateMetricsFlagName = fmt.Sprintf("%v.aggregateMetrics", cmdPrefix)
		}

		aggregateMetricsFlagValue, err := cmd.Flags().GetBool(aggregateMetricsFlagName)
		if err != nil {
			return err, false
		}
		m.AggregateMetrics = aggregateMetricsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigAutoGeneratedInvertedIndexFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoGeneratedInvertedIndexFlagName := fmt.Sprintf("%v.autoGeneratedInvertedIndex", cmdPrefix)
	if cmd.Flags().Changed(autoGeneratedInvertedIndexFlagName) {

		var autoGeneratedInvertedIndexFlagName string
		if cmdPrefix == "" {
			autoGeneratedInvertedIndexFlagName = "autoGeneratedInvertedIndex"
		} else {
			autoGeneratedInvertedIndexFlagName = fmt.Sprintf("%v.autoGeneratedInvertedIndex", cmdPrefix)
		}

		autoGeneratedInvertedIndexFlagValue, err := cmd.Flags().GetBool(autoGeneratedInvertedIndexFlagName)
		if err != nil {
			return err, false
		}
		m.AutoGeneratedInvertedIndex = autoGeneratedInvertedIndexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigBloomFilterColumnsFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bloomFilterColumnsFlagName := fmt.Sprintf("%v.bloomFilterColumns", cmdPrefix)
	if cmd.Flags().Changed(bloomFilterColumnsFlagName) {
		// warning: bloomFilterColumns array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIndexingConfigBloomFilterConfigsFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bloomFilterConfigsFlagName := fmt.Sprintf("%v.bloomFilterConfigs", cmdPrefix)
	if cmd.Flags().Changed(bloomFilterConfigsFlagName) {
		// warning: bloomFilterConfigs map type map[string]BloomFilterConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIndexingConfigColumnMinMaxValueGeneratorModeFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	columnMinMaxValueGeneratorModeFlagName := fmt.Sprintf("%v.columnMinMaxValueGeneratorMode", cmdPrefix)
	if cmd.Flags().Changed(columnMinMaxValueGeneratorModeFlagName) {

		var columnMinMaxValueGeneratorModeFlagName string
		if cmdPrefix == "" {
			columnMinMaxValueGeneratorModeFlagName = "columnMinMaxValueGeneratorMode"
		} else {
			columnMinMaxValueGeneratorModeFlagName = fmt.Sprintf("%v.columnMinMaxValueGeneratorMode", cmdPrefix)
		}

		columnMinMaxValueGeneratorModeFlagValue, err := cmd.Flags().GetString(columnMinMaxValueGeneratorModeFlagName)
		if err != nil {
			return err, false
		}
		m.ColumnMinMaxValueGeneratorMode = columnMinMaxValueGeneratorModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigCreateInvertedIndexDuringSegmentGenerationFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createInvertedIndexDuringSegmentGenerationFlagName := fmt.Sprintf("%v.createInvertedIndexDuringSegmentGeneration", cmdPrefix)
	if cmd.Flags().Changed(createInvertedIndexDuringSegmentGenerationFlagName) {

		var createInvertedIndexDuringSegmentGenerationFlagName string
		if cmdPrefix == "" {
			createInvertedIndexDuringSegmentGenerationFlagName = "createInvertedIndexDuringSegmentGeneration"
		} else {
			createInvertedIndexDuringSegmentGenerationFlagName = fmt.Sprintf("%v.createInvertedIndexDuringSegmentGeneration", cmdPrefix)
		}

		createInvertedIndexDuringSegmentGenerationFlagValue, err := cmd.Flags().GetBool(createInvertedIndexDuringSegmentGenerationFlagName)
		if err != nil {
			return err, false
		}
		m.CreateInvertedIndexDuringSegmentGeneration = createInvertedIndexDuringSegmentGenerationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigEnableDefaultStarTreeFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableDefaultStarTreeFlagName := fmt.Sprintf("%v.enableDefaultStarTree", cmdPrefix)
	if cmd.Flags().Changed(enableDefaultStarTreeFlagName) {

		var enableDefaultStarTreeFlagName string
		if cmdPrefix == "" {
			enableDefaultStarTreeFlagName = "enableDefaultStarTree"
		} else {
			enableDefaultStarTreeFlagName = fmt.Sprintf("%v.enableDefaultStarTree", cmdPrefix)
		}

		enableDefaultStarTreeFlagValue, err := cmd.Flags().GetBool(enableDefaultStarTreeFlagName)
		if err != nil {
			return err, false
		}
		m.EnableDefaultStarTree = enableDefaultStarTreeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigEnableDynamicStarTreeCreationFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableDynamicStarTreeCreationFlagName := fmt.Sprintf("%v.enableDynamicStarTreeCreation", cmdPrefix)
	if cmd.Flags().Changed(enableDynamicStarTreeCreationFlagName) {

		var enableDynamicStarTreeCreationFlagName string
		if cmdPrefix == "" {
			enableDynamicStarTreeCreationFlagName = "enableDynamicStarTreeCreation"
		} else {
			enableDynamicStarTreeCreationFlagName = fmt.Sprintf("%v.enableDynamicStarTreeCreation", cmdPrefix)
		}

		enableDynamicStarTreeCreationFlagValue, err := cmd.Flags().GetBool(enableDynamicStarTreeCreationFlagName)
		if err != nil {
			return err, false
		}
		m.EnableDynamicStarTreeCreation = enableDynamicStarTreeCreationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigFstindexTypeFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fstindexTypeFlagName := fmt.Sprintf("%v.fstindexType", cmdPrefix)
	if cmd.Flags().Changed(fstindexTypeFlagName) {

		var fstindexTypeFlagName string
		if cmdPrefix == "" {
			fstindexTypeFlagName = "fstindexType"
		} else {
			fstindexTypeFlagName = fmt.Sprintf("%v.fstindexType", cmdPrefix)
		}

		fstindexTypeFlagValue, err := cmd.Flags().GetString(fstindexTypeFlagName)
		if err != nil {
			return err, false
		}
		m.FstindexType = fstindexTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigInvertedIndexColumnsFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	invertedIndexColumnsFlagName := fmt.Sprintf("%v.invertedIndexColumns", cmdPrefix)
	if cmd.Flags().Changed(invertedIndexColumnsFlagName) {
		// warning: invertedIndexColumns array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIndexingConfigJSONIndexColumnsFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jsonIndexColumnsFlagName := fmt.Sprintf("%v.jsonIndexColumns", cmdPrefix)
	if cmd.Flags().Changed(jsonIndexColumnsFlagName) {
		// warning: jsonIndexColumns array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIndexingConfigJSONIndexConfigsFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jsonIndexConfigsFlagName := fmt.Sprintf("%v.jsonIndexConfigs", cmdPrefix)
	if cmd.Flags().Changed(jsonIndexConfigsFlagName) {
		// warning: jsonIndexConfigs map type map[string]JSONIndexConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIndexingConfigLoadModeFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	loadModeFlagName := fmt.Sprintf("%v.loadMode", cmdPrefix)
	if cmd.Flags().Changed(loadModeFlagName) {

		var loadModeFlagName string
		if cmdPrefix == "" {
			loadModeFlagName = "loadMode"
		} else {
			loadModeFlagName = fmt.Sprintf("%v.loadMode", cmdPrefix)
		}

		loadModeFlagValue, err := cmd.Flags().GetString(loadModeFlagName)
		if err != nil {
			return err, false
		}
		m.LoadMode = loadModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigNoDictionaryColumnsFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noDictionaryColumnsFlagName := fmt.Sprintf("%v.noDictionaryColumns", cmdPrefix)
	if cmd.Flags().Changed(noDictionaryColumnsFlagName) {
		// warning: noDictionaryColumns array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIndexingConfigNoDictionaryConfigFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noDictionaryConfigFlagName := fmt.Sprintf("%v.noDictionaryConfig", cmdPrefix)
	if cmd.Flags().Changed(noDictionaryConfigFlagName) {
		// warning: noDictionaryConfig map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIndexingConfigNoDictionarySizeRatioThresholdFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noDictionarySizeRatioThresholdFlagName := fmt.Sprintf("%v.noDictionarySizeRatioThreshold", cmdPrefix)
	if cmd.Flags().Changed(noDictionarySizeRatioThresholdFlagName) {

		var noDictionarySizeRatioThresholdFlagName string
		if cmdPrefix == "" {
			noDictionarySizeRatioThresholdFlagName = "noDictionarySizeRatioThreshold"
		} else {
			noDictionarySizeRatioThresholdFlagName = fmt.Sprintf("%v.noDictionarySizeRatioThreshold", cmdPrefix)
		}

		noDictionarySizeRatioThresholdFlagValue, err := cmd.Flags().GetFloat64(noDictionarySizeRatioThresholdFlagName)
		if err != nil {
			return err, false
		}
		m.NoDictionarySizeRatioThreshold = noDictionarySizeRatioThresholdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigNullHandlingEnabledFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nullHandlingEnabledFlagName := fmt.Sprintf("%v.nullHandlingEnabled", cmdPrefix)
	if cmd.Flags().Changed(nullHandlingEnabledFlagName) {

		var nullHandlingEnabledFlagName string
		if cmdPrefix == "" {
			nullHandlingEnabledFlagName = "nullHandlingEnabled"
		} else {
			nullHandlingEnabledFlagName = fmt.Sprintf("%v.nullHandlingEnabled", cmdPrefix)
		}

		nullHandlingEnabledFlagValue, err := cmd.Flags().GetBool(nullHandlingEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.NullHandlingEnabled = nullHandlingEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigOnHeapDictionaryColumnsFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	onHeapDictionaryColumnsFlagName := fmt.Sprintf("%v.onHeapDictionaryColumns", cmdPrefix)
	if cmd.Flags().Changed(onHeapDictionaryColumnsFlagName) {
		// warning: onHeapDictionaryColumns array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIndexingConfigOptimizeDictionaryFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	optimizeDictionaryFlagName := fmt.Sprintf("%v.optimizeDictionary", cmdPrefix)
	if cmd.Flags().Changed(optimizeDictionaryFlagName) {

		var optimizeDictionaryFlagName string
		if cmdPrefix == "" {
			optimizeDictionaryFlagName = "optimizeDictionary"
		} else {
			optimizeDictionaryFlagName = fmt.Sprintf("%v.optimizeDictionary", cmdPrefix)
		}

		optimizeDictionaryFlagValue, err := cmd.Flags().GetBool(optimizeDictionaryFlagName)
		if err != nil {
			return err, false
		}
		m.OptimizeDictionary = optimizeDictionaryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigOptimizeDictionaryForMetricsFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	optimizeDictionaryForMetricsFlagName := fmt.Sprintf("%v.optimizeDictionaryForMetrics", cmdPrefix)
	if cmd.Flags().Changed(optimizeDictionaryForMetricsFlagName) {

		var optimizeDictionaryForMetricsFlagName string
		if cmdPrefix == "" {
			optimizeDictionaryForMetricsFlagName = "optimizeDictionaryForMetrics"
		} else {
			optimizeDictionaryForMetricsFlagName = fmt.Sprintf("%v.optimizeDictionaryForMetrics", cmdPrefix)
		}

		optimizeDictionaryForMetricsFlagValue, err := cmd.Flags().GetBool(optimizeDictionaryForMetricsFlagName)
		if err != nil {
			return err, false
		}
		m.OptimizeDictionaryForMetrics = optimizeDictionaryForMetricsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigRangeIndexColumnsFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rangeIndexColumnsFlagName := fmt.Sprintf("%v.rangeIndexColumns", cmdPrefix)
	if cmd.Flags().Changed(rangeIndexColumnsFlagName) {
		// warning: rangeIndexColumns array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIndexingConfigRangeIndexVersionFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rangeIndexVersionFlagName := fmt.Sprintf("%v.rangeIndexVersion", cmdPrefix)
	if cmd.Flags().Changed(rangeIndexVersionFlagName) {

		var rangeIndexVersionFlagName string
		if cmdPrefix == "" {
			rangeIndexVersionFlagName = "rangeIndexVersion"
		} else {
			rangeIndexVersionFlagName = fmt.Sprintf("%v.rangeIndexVersion", cmdPrefix)
		}

		rangeIndexVersionFlagValue, err := cmd.Flags().GetInt32(rangeIndexVersionFlagName)
		if err != nil {
			return err, false
		}
		m.RangeIndexVersion = rangeIndexVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigSegmentFormatVersionFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentFormatVersionFlagName := fmt.Sprintf("%v.segmentFormatVersion", cmdPrefix)
	if cmd.Flags().Changed(segmentFormatVersionFlagName) {

		var segmentFormatVersionFlagName string
		if cmdPrefix == "" {
			segmentFormatVersionFlagName = "segmentFormatVersion"
		} else {
			segmentFormatVersionFlagName = fmt.Sprintf("%v.segmentFormatVersion", cmdPrefix)
		}

		segmentFormatVersionFlagValue, err := cmd.Flags().GetString(segmentFormatVersionFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentFormatVersion = segmentFormatVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigSegmentNameGeneratorTypeFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentNameGeneratorTypeFlagName := fmt.Sprintf("%v.segmentNameGeneratorType", cmdPrefix)
	if cmd.Flags().Changed(segmentNameGeneratorTypeFlagName) {

		var segmentNameGeneratorTypeFlagName string
		if cmdPrefix == "" {
			segmentNameGeneratorTypeFlagName = "segmentNameGeneratorType"
		} else {
			segmentNameGeneratorTypeFlagName = fmt.Sprintf("%v.segmentNameGeneratorType", cmdPrefix)
		}

		segmentNameGeneratorTypeFlagValue, err := cmd.Flags().GetString(segmentNameGeneratorTypeFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentNameGeneratorType = segmentNameGeneratorTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexingConfigSegmentPartitionConfigFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentPartitionConfigFlagName := fmt.Sprintf("%v.segmentPartitionConfig", cmdPrefix)
	if cmd.Flags().Changed(segmentPartitionConfigFlagName) {
		// info: complex object segmentPartitionConfig SegmentPartitionConfig is retrieved outside this Changed() block
	}
	segmentPartitionConfigFlagValue := m.SegmentPartitionConfig
	if swag.IsZero(segmentPartitionConfigFlagValue) {
		segmentPartitionConfigFlagValue = &models.SegmentPartitionConfig{}
	}

	err, segmentPartitionConfigAdded := retrieveModelSegmentPartitionConfigFlags(depth+1, segmentPartitionConfigFlagValue, segmentPartitionConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentPartitionConfigAdded
	if segmentPartitionConfigAdded {
		m.SegmentPartitionConfig = segmentPartitionConfigFlagValue
	}

	return nil, retAdded
}

func retrieveIndexingConfigSortedColumnFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sortedColumnFlagName := fmt.Sprintf("%v.sortedColumn", cmdPrefix)
	if cmd.Flags().Changed(sortedColumnFlagName) {
		// warning: sortedColumn array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIndexingConfigStarTreeIndexConfigsFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	starTreeIndexConfigsFlagName := fmt.Sprintf("%v.starTreeIndexConfigs", cmdPrefix)
	if cmd.Flags().Changed(starTreeIndexConfigsFlagName) {
		// warning: starTreeIndexConfigs array type []*StarTreeIndexConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIndexingConfigStreamConfigsFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamConfigsFlagName := fmt.Sprintf("%v.streamConfigs", cmdPrefix)
	if cmd.Flags().Changed(streamConfigsFlagName) {
		// warning: streamConfigs map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIndexingConfigVarLengthDictionaryColumnsFlags(depth int, m *models.IndexingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varLengthDictionaryColumnsFlagName := fmt.Sprintf("%v.varLengthDictionaryColumns", cmdPrefix)
	if cmd.Flags().Changed(varLengthDictionaryColumnsFlagName) {
		// warning: varLengthDictionaryColumns array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
