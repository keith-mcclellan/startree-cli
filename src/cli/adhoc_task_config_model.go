// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for AdhocTaskConfig

// register flags to command
func registerModelAdhocTaskConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAdhocTaskConfigTableName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAdhocTaskConfigTaskConfigs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAdhocTaskConfigTaskName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAdhocTaskConfigTaskType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAdhocTaskConfigTableName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tableNameDescription := `Required. `

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}

func registerAdhocTaskConfigTaskConfigs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: taskConfigs map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerAdhocTaskConfigTaskName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	taskNameDescription := ``

	var taskNameFlagName string
	if cmdPrefix == "" {
		taskNameFlagName = "taskName"
	} else {
		taskNameFlagName = fmt.Sprintf("%v.taskName", cmdPrefix)
	}

	var taskNameFlagDefault string

	_ = cmd.PersistentFlags().String(taskNameFlagName, taskNameFlagDefault, taskNameDescription)

	return nil
}

func registerAdhocTaskConfigTaskType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	taskTypeDescription := `Required. `

	var taskTypeFlagName string
	if cmdPrefix == "" {
		taskTypeFlagName = "taskType"
	} else {
		taskTypeFlagName = fmt.Sprintf("%v.taskType", cmdPrefix)
	}

	var taskTypeFlagDefault string

	_ = cmd.PersistentFlags().String(taskTypeFlagName, taskTypeFlagDefault, taskTypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAdhocTaskConfigFlags(depth int, m *models.AdhocTaskConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, tableNameAdded := retrieveAdhocTaskConfigTableNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableNameAdded

	err, taskConfigsAdded := retrieveAdhocTaskConfigTaskConfigsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskConfigsAdded

	err, taskNameAdded := retrieveAdhocTaskConfigTaskNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskNameAdded

	err, taskTypeAdded := retrieveAdhocTaskConfigTaskTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskTypeAdded

	return nil, retAdded
}

func retrieveAdhocTaskConfigTableNameFlags(depth int, m *models.AdhocTaskConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableNameFlagName := fmt.Sprintf("%v.tableName", cmdPrefix)
	if cmd.Flags().Changed(tableNameFlagName) {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAdhocTaskConfigTaskConfigsFlags(depth int, m *models.AdhocTaskConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskConfigsFlagName := fmt.Sprintf("%v.taskConfigs", cmdPrefix)
	if cmd.Flags().Changed(taskConfigsFlagName) {
		// warning: taskConfigs map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAdhocTaskConfigTaskNameFlags(depth int, m *models.AdhocTaskConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskNameFlagName := fmt.Sprintf("%v.taskName", cmdPrefix)
	if cmd.Flags().Changed(taskNameFlagName) {

		var taskNameFlagName string
		if cmdPrefix == "" {
			taskNameFlagName = "taskName"
		} else {
			taskNameFlagName = fmt.Sprintf("%v.taskName", cmdPrefix)
		}

		taskNameFlagValue, err := cmd.Flags().GetString(taskNameFlagName)
		if err != nil {
			return err, false
		}
		m.TaskName = taskNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAdhocTaskConfigTaskTypeFlags(depth int, m *models.AdhocTaskConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskTypeFlagName := fmt.Sprintf("%v.taskType", cmdPrefix)
	if cmd.Flags().Changed(taskTypeFlagName) {

		var taskTypeFlagName string
		if cmdPrefix == "" {
			taskTypeFlagName = "taskType"
		} else {
			taskTypeFlagName = fmt.Sprintf("%v.taskType", cmdPrefix)
		}

		taskTypeFlagValue, err := cmd.Flags().GetString(taskTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TaskType = taskTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
