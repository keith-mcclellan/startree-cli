// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for ContentDisposition

// register flags to command
func registerModelContentDispositionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContentDispositionCreationDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContentDispositionFileName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContentDispositionModificationDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContentDispositionParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContentDispositionReadDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContentDispositionSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContentDispositionType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContentDispositionCreationDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationDateDescription := ``

	var creationDateFlagName string
	if cmdPrefix == "" {
		creationDateFlagName = "creationDate"
	} else {
		creationDateFlagName = fmt.Sprintf("%v.creationDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(creationDateFlagName, "", creationDateDescription)

	return nil
}

func registerContentDispositionFileName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fileNameDescription := ``

	var fileNameFlagName string
	if cmdPrefix == "" {
		fileNameFlagName = "fileName"
	} else {
		fileNameFlagName = fmt.Sprintf("%v.fileName", cmdPrefix)
	}

	var fileNameFlagDefault string

	_ = cmd.PersistentFlags().String(fileNameFlagName, fileNameFlagDefault, fileNameDescription)

	return nil
}

func registerContentDispositionModificationDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modificationDateDescription := ``

	var modificationDateFlagName string
	if cmdPrefix == "" {
		modificationDateFlagName = "modificationDate"
	} else {
		modificationDateFlagName = fmt.Sprintf("%v.modificationDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(modificationDateFlagName, "", modificationDateDescription)

	return nil
}

func registerContentDispositionParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: parameters map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerContentDispositionReadDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	readDateDescription := ``

	var readDateFlagName string
	if cmdPrefix == "" {
		readDateFlagName = "readDate"
	} else {
		readDateFlagName = fmt.Sprintf("%v.readDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(readDateFlagName, "", readDateDescription)

	return nil
}

func registerContentDispositionSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sizeDescription := ``

	var sizeFlagName string
	if cmdPrefix == "" {
		sizeFlagName = "size"
	} else {
		sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var sizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sizeFlagName, sizeFlagDefault, sizeDescription)

	return nil
}

func registerContentDispositionType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContentDispositionFlags(depth int, m *models.ContentDisposition, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, creationDateAdded := retrieveContentDispositionCreationDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationDateAdded

	err, fileNameAdded := retrieveContentDispositionFileNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileNameAdded

	err, modificationDateAdded := retrieveContentDispositionModificationDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modificationDateAdded

	err, parametersAdded := retrieveContentDispositionParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parametersAdded

	err, readDateAdded := retrieveContentDispositionReadDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readDateAdded

	err, sizeAdded := retrieveContentDispositionSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sizeAdded

	err, typeAdded := retrieveContentDispositionTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveContentDispositionCreationDateFlags(depth int, m *models.ContentDisposition, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationDateFlagName := fmt.Sprintf("%v.creationDate", cmdPrefix)
	if cmd.Flags().Changed(creationDateFlagName) {

		var creationDateFlagName string
		if cmdPrefix == "" {
			creationDateFlagName = "creationDate"
		} else {
			creationDateFlagName = fmt.Sprintf("%v.creationDate", cmdPrefix)
		}

		creationDateFlagValueStr, err := cmd.Flags().GetString(creationDateFlagName)
		if err != nil {
			return err, false
		}
		var creationDateFlagValue strfmt.DateTime
		if err := creationDateFlagValue.UnmarshalText([]byte(creationDateFlagValueStr)); err != nil {
			return err, false
		}
		m.CreationDate = creationDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContentDispositionFileNameFlags(depth int, m *models.ContentDisposition, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fileNameFlagName := fmt.Sprintf("%v.fileName", cmdPrefix)
	if cmd.Flags().Changed(fileNameFlagName) {

		var fileNameFlagName string
		if cmdPrefix == "" {
			fileNameFlagName = "fileName"
		} else {
			fileNameFlagName = fmt.Sprintf("%v.fileName", cmdPrefix)
		}

		fileNameFlagValue, err := cmd.Flags().GetString(fileNameFlagName)
		if err != nil {
			return err, false
		}
		m.FileName = fileNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContentDispositionModificationDateFlags(depth int, m *models.ContentDisposition, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modificationDateFlagName := fmt.Sprintf("%v.modificationDate", cmdPrefix)
	if cmd.Flags().Changed(modificationDateFlagName) {

		var modificationDateFlagName string
		if cmdPrefix == "" {
			modificationDateFlagName = "modificationDate"
		} else {
			modificationDateFlagName = fmt.Sprintf("%v.modificationDate", cmdPrefix)
		}

		modificationDateFlagValueStr, err := cmd.Flags().GetString(modificationDateFlagName)
		if err != nil {
			return err, false
		}
		var modificationDateFlagValue strfmt.DateTime
		if err := modificationDateFlagValue.UnmarshalText([]byte(modificationDateFlagValueStr)); err != nil {
			return err, false
		}
		m.ModificationDate = modificationDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContentDispositionParametersFlags(depth int, m *models.ContentDisposition, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parametersFlagName := fmt.Sprintf("%v.parameters", cmdPrefix)
	if cmd.Flags().Changed(parametersFlagName) {
		// warning: parameters map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContentDispositionReadDateFlags(depth int, m *models.ContentDisposition, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readDateFlagName := fmt.Sprintf("%v.readDate", cmdPrefix)
	if cmd.Flags().Changed(readDateFlagName) {

		var readDateFlagName string
		if cmdPrefix == "" {
			readDateFlagName = "readDate"
		} else {
			readDateFlagName = fmt.Sprintf("%v.readDate", cmdPrefix)
		}

		readDateFlagValueStr, err := cmd.Flags().GetString(readDateFlagName)
		if err != nil {
			return err, false
		}
		var readDateFlagValue strfmt.DateTime
		if err := readDateFlagValue.UnmarshalText([]byte(readDateFlagValueStr)); err != nil {
			return err, false
		}
		m.ReadDate = readDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContentDispositionSizeFlags(depth int, m *models.ContentDisposition, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sizeFlagName := fmt.Sprintf("%v.size", cmdPrefix)
	if cmd.Flags().Changed(sizeFlagName) {

		var sizeFlagName string
		if cmdPrefix == "" {
			sizeFlagName = "size"
		} else {
			sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		sizeFlagValue, err := cmd.Flags().GetInt64(sizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = sizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContentDispositionTypeFlags(depth int, m *models.ContentDisposition, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
