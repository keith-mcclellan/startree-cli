// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"log"
	"os"
	"path"
	"path/filepath"

	"startree.ai/cli/client"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	homedir "github.com/mitchellh/go-homedir"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// debug flag indicating that cli should output debug logs
var debug bool

// config file location
var configFile string

// dry run flag
var dryRun bool

// name of the executable
var exeName string = filepath.Base(os.Args[0])

// logDebugf writes debug log to stdout
func logDebugf(format string, v ...interface{}) {
	if !debug {
		return
	}
	log.Printf(format, v...)
}

// depth of recursion to construct model flags
var maxDepth int = 5

// makeClient constructs a client object
func makeClient(cmd *cobra.Command, args []string) (*client.PinotControllerAPI, error) {
	hostname := viper.GetString("hostname")
	viper.SetDefault("base_path", client.DefaultBasePath)
	basePath := viper.GetString("base_path")
	scheme := viper.GetString("scheme")

	r := httptransport.New(hostname, basePath, []string{scheme})
	r.SetDebug(debug)
	// set custom producer and consumer to use the default ones

	r.Consumers["application/json"] = runtime.JSONConsumer()

	// warning: consumes multipart/form-data is not supported by go-swagger cli yet

	// warning: consumes text/plain is not supported by go-swagger cli yet

	// warning: produces application/octet-stream is not supported by go-swagger cli yet

	r.Producers["application/json"] = runtime.JSONProducer()

	// warning: produces text/plain is not supported by go-swagger cli yet

	auth, err := makeAuthInfoWriter(cmd)
	if err != nil {
		return nil, err
	}
	r.DefaultAuthentication = auth

	appCli := client.New(r, strfmt.Default)
	logDebugf("Server url: %v://%v", scheme, hostname)
	return appCli, nil
}

// MakeRootCmd returns the root cmd
func MakeRootCmd() (*cobra.Command, error) {
	cobra.OnInitialize(initViperConfigs)

	// Use executable name as the command name
	rootCmd := &cobra.Command{
		Use: exeName,
	}

	// register basic flags
	rootCmd.PersistentFlags().String("hostname", client.DefaultHost, "hostname of the service")
	viper.BindPFlag("hostname", rootCmd.PersistentFlags().Lookup("hostname"))
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))
	viper.BindPFlag("scheme", rootCmd.PersistentFlags().Lookup("scheme"))
	rootCmd.PersistentFlags().String("base-path", client.DefaultBasePath, fmt.Sprintf("For example: %v", client.DefaultBasePath))
	viper.BindPFlag("base_path", rootCmd.PersistentFlags().Lookup("base-path"))

	// configure debug flag
	rootCmd.PersistentFlags().BoolVar(&debug, "debug", false, "output debug logs")
	// configure config location
	rootCmd.PersistentFlags().StringVar(&configFile, "config", "", "config file path")
	// configure dry run flag
	rootCmd.PersistentFlags().BoolVar(&dryRun, "dry-run", false, "do not send the request to server")

	// register security flags
	if err := registerAuthInoWriterFlags(rootCmd); err != nil {
		return nil, err
	}
	// add all operation groups
	operationGroupAppConfigsCmd, err := makeOperationGroupAppConfigsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupAppConfigsCmd)

	operationGroupAtomicIngestionCmd, err := makeOperationGroupAtomicIngestionCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupAtomicIngestionCmd)

	operationGroupAuthCmd, err := makeOperationGroupAuthCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupAuthCmd)

	operationGroupBrokerCmd, err := makeOperationGroupBrokerCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupBrokerCmd)

	operationGroupClusterCmd, err := makeOperationGroupClusterCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupClusterCmd)

	operationGroupClusterHealthCmd, err := makeOperationGroupClusterHealthCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupClusterHealthCmd)

	operationGroupHealthCmd, err := makeOperationGroupHealthCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupHealthCmd)

	operationGroupInstanceCmd, err := makeOperationGroupInstanceCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupInstanceCmd)

	operationGroupLeaderCmd, err := makeOperationGroupLeaderCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupLeaderCmd)

	operationGroupLoggerCmd, err := makeOperationGroupLoggerCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupLoggerCmd)

	operationGroupPeriodicTaskCmd, err := makeOperationGroupPeriodicTaskCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupPeriodicTaskCmd)

	operationGroupQueryCmd, err := makeOperationGroupQueryCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupQueryCmd)

	operationGroupSchemaCmd, err := makeOperationGroupSchemaCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSchemaCmd)

	operationGroupSegmentCmd, err := makeOperationGroupSegmentCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSegmentCmd)

	operationGroupTableCmd, err := makeOperationGroupTableCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTableCmd)

	operationGroupTaskCmd, err := makeOperationGroupTaskCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTaskCmd)

	operationGroupTenantCmd, err := makeOperationGroupTenantCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTenantCmd)

	operationGroupTunerCmd, err := makeOperationGroupTunerCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTunerCmd)

	operationGroupUpsertCmd, err := makeOperationGroupUpsertCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupUpsertCmd)

	operationGroupUserCmd, err := makeOperationGroupUserCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupUserCmd)

	operationGroupVersionCmd, err := makeOperationGroupVersionCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupVersionCmd)

	operationGroupWriteAPICmd, err := makeOperationGroupWriteAPICmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupWriteAPICmd)

	operationGroupZookeeperCmd, err := makeOperationGroupZookeeperCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupZookeeperCmd)

	// add cobra completion
	rootCmd.AddCommand(makeGenCompletionCmd())

	return rootCmd, nil
}

// initViperConfigs initialize viper config using config file in '$HOME/.config/<cli name>/config.<json|yaml...>'
// currently hostname, scheme and auth tokens can be specified in this config file.
func initViperConfigs() {
	if configFile != "" {
		// use user specified config file location
		viper.SetConfigFile(configFile)
	} else {
		// look for default config
		// Find home directory.
		home, err := homedir.Dir()
		cobra.CheckErr(err)

		// Search config in home directory with name ".cobra" (without extension).
		viper.AddConfigPath(path.Join(home, ".config", exeName))
		viper.SetConfigName("config")
	}

	if err := viper.ReadInConfig(); err != nil {
		logDebugf("Error: loading config file: %v", err)
		return
	}
	logDebugf("Using config file: %v", viper.ConfigFileUsed())
}

// registerAuthInoWriterFlags registers all flags needed to perform authentication
func registerAuthInoWriterFlags(cmd *cobra.Command) error {
	/*Authorization */
	cmd.PersistentFlags().String("Authorization", "", ``)
	viper.BindPFlag("Authorization", cmd.PersistentFlags().Lookup("Authorization"))
	return nil
}

// makeAuthInfoWriter retrieves cmd flags and construct an auth info writer
func makeAuthInfoWriter(cmd *cobra.Command) (runtime.ClientAuthInfoWriter, error) {
	auths := []runtime.ClientAuthInfoWriter{}
	/*Authorization */
	if viper.IsSet("Authorization") {
		AuthorizationKey := viper.GetString("Authorization")
		auths = append(auths, httptransport.APIKeyAuth("Authorization", "header", AuthorizationKey))
	}
	if len(auths) == 0 {
		logDebugf("Warning: No auth params detected.")
		return nil, nil
	}
	// compose all auths together
	return httptransport.Compose(auths...), nil
}

func makeOperationGroupAppConfigsCmd() (*cobra.Command, error) {
	operationGroupAppConfigsCmd := &cobra.Command{
		Use:  "app_configs",
		Long: ``,
	}

	operationGetAppConfigsCmd, err := makeOperationAppConfigsGetAppConfigsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupAppConfigsCmd.AddCommand(operationGetAppConfigsCmd)

	return operationGroupAppConfigsCmd, nil
}
func makeOperationGroupAtomicIngestionCmd() (*cobra.Command, error) {
	operationGroupAtomicIngestionCmd := &cobra.Command{
		Use:  "atomic_ingestion",
		Long: ``,
	}

	operationEndDataIngestRequestCmd, err := makeOperationAtomicIngestionEndDataIngestRequestCmd()
	if err != nil {
		return nil, err
	}
	operationGroupAtomicIngestionCmd.AddCommand(operationEndDataIngestRequestCmd)

	operationStartDataIngestRequestCmd, err := makeOperationAtomicIngestionStartDataIngestRequestCmd()
	if err != nil {
		return nil, err
	}
	operationGroupAtomicIngestionCmd.AddCommand(operationStartDataIngestRequestCmd)

	return operationGroupAtomicIngestionCmd, nil
}
func makeOperationGroupAuthCmd() (*cobra.Command, error) {
	operationGroupAuthCmd := &cobra.Command{
		Use:  "auth",
		Long: ``,
	}

	operationInfoCmd, err := makeOperationAuthInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupAuthCmd.AddCommand(operationInfoCmd)

	operationVerifyCmd, err := makeOperationAuthVerifyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupAuthCmd.AddCommand(operationVerifyCmd)

	return operationGroupAuthCmd, nil
}
func makeOperationGroupBrokerCmd() (*cobra.Command, error) {
	operationGroupBrokerCmd := &cobra.Command{
		Use:  "broker",
		Long: ``,
	}

	operationGetBrokersForTableCmd, err := makeOperationBrokerGetBrokersForTableCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBrokerCmd.AddCommand(operationGetBrokersForTableCmd)

	operationGetBrokersForTableV2Cmd, err := makeOperationBrokerGetBrokersForTableV2Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupBrokerCmd.AddCommand(operationGetBrokersForTableV2Cmd)

	operationGetBrokersForTenantCmd, err := makeOperationBrokerGetBrokersForTenantCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBrokerCmd.AddCommand(operationGetBrokersForTenantCmd)

	operationGetBrokersForTenantV2Cmd, err := makeOperationBrokerGetBrokersForTenantV2Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupBrokerCmd.AddCommand(operationGetBrokersForTenantV2Cmd)

	operationGetTablesToBrokersMappingCmd, err := makeOperationBrokerGetTablesToBrokersMappingCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBrokerCmd.AddCommand(operationGetTablesToBrokersMappingCmd)

	operationGetTablesToBrokersMappingV2Cmd, err := makeOperationBrokerGetTablesToBrokersMappingV2Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupBrokerCmd.AddCommand(operationGetTablesToBrokersMappingV2Cmd)

	operationGetTenantsToBrokersMappingCmd, err := makeOperationBrokerGetTenantsToBrokersMappingCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBrokerCmd.AddCommand(operationGetTenantsToBrokersMappingCmd)

	operationGetTenantsToBrokersMappingV2Cmd, err := makeOperationBrokerGetTenantsToBrokersMappingV2Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupBrokerCmd.AddCommand(operationGetTenantsToBrokersMappingV2Cmd)

	operationListBrokersMappingCmd, err := makeOperationBrokerListBrokersMappingCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBrokerCmd.AddCommand(operationListBrokersMappingCmd)

	operationListBrokersMappingV2Cmd, err := makeOperationBrokerListBrokersMappingV2Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupBrokerCmd.AddCommand(operationListBrokersMappingV2Cmd)

	operationToggleQueryRateLimitingCmd, err := makeOperationBrokerToggleQueryRateLimitingCmd()
	if err != nil {
		return nil, err
	}
	operationGroupBrokerCmd.AddCommand(operationToggleQueryRateLimitingCmd)

	return operationGroupBrokerCmd, nil
}
func makeOperationGroupClusterCmd() (*cobra.Command, error) {
	operationGroupClusterCmd := &cobra.Command{
		Use:  "cluster",
		Long: ``,
	}

	operationDeleteClusterConfigCmd, err := makeOperationClusterDeleteClusterConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupClusterCmd.AddCommand(operationDeleteClusterConfigCmd)

	operationGetClusterInfoCmd, err := makeOperationClusterGetClusterInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupClusterCmd.AddCommand(operationGetClusterInfoCmd)

	operationGetSegmentDebugInfoCmd, err := makeOperationClusterGetSegmentDebugInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupClusterCmd.AddCommand(operationGetSegmentDebugInfoCmd)

	operationGetTableDebugInfoCmd, err := makeOperationClusterGetTableDebugInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupClusterCmd.AddCommand(operationGetTableDebugInfoCmd)

	operationListClusterConfigsCmd, err := makeOperationClusterListClusterConfigsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupClusterCmd.AddCommand(operationListClusterConfigsCmd)

	operationUpdateClusterConfigCmd, err := makeOperationClusterUpdateClusterConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupClusterCmd.AddCommand(operationUpdateClusterConfigCmd)

	return operationGroupClusterCmd, nil
}
func makeOperationGroupClusterHealthCmd() (*cobra.Command, error) {
	operationGroupClusterHealthCmd := &cobra.Command{
		Use:  "cluster_health",
		Long: ``,
	}

	operationGetClusterHealthDetailsCmd, err := makeOperationClusterHealthGetClusterHealthDetailsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupClusterHealthCmd.AddCommand(operationGetClusterHealthDetailsCmd)

	return operationGroupClusterHealthCmd, nil
}
func makeOperationGroupHealthCmd() (*cobra.Command, error) {
	operationGroupHealthCmd := &cobra.Command{
		Use:  "health",
		Long: ``,
	}

	operationCheckHealthCmd, err := makeOperationHealthCheckHealthCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHealthCmd.AddCommand(operationCheckHealthCmd)

	operationCheckHealthLegacyCmd, err := makeOperationHealthCheckHealthLegacyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHealthCmd.AddCommand(operationCheckHealthLegacyCmd)

	return operationGroupHealthCmd, nil
}
func makeOperationGroupInstanceCmd() (*cobra.Command, error) {
	operationGroupInstanceCmd := &cobra.Command{
		Use:  "instance",
		Long: ``,
	}

	operationAddInstanceCmd, err := makeOperationInstanceAddInstanceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupInstanceCmd.AddCommand(operationAddInstanceCmd)

	operationDropInstanceCmd, err := makeOperationInstanceDropInstanceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupInstanceCmd.AddCommand(operationDropInstanceCmd)

	operationGetAllInstancesCmd, err := makeOperationInstanceGetAllInstancesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupInstanceCmd.AddCommand(operationGetAllInstancesCmd)

	operationGetInstanceCmd, err := makeOperationInstanceGetInstanceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupInstanceCmd.AddCommand(operationGetInstanceCmd)

	operationToggleInstanceStateCmd, err := makeOperationInstanceToggleInstanceStateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupInstanceCmd.AddCommand(operationToggleInstanceStateCmd)

	operationUpdateBrokerResourceCmd, err := makeOperationInstanceUpdateBrokerResourceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupInstanceCmd.AddCommand(operationUpdateBrokerResourceCmd)

	operationUpdateInstanceCmd, err := makeOperationInstanceUpdateInstanceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupInstanceCmd.AddCommand(operationUpdateInstanceCmd)

	operationUpdateInstanceTagsCmd, err := makeOperationInstanceUpdateInstanceTagsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupInstanceCmd.AddCommand(operationUpdateInstanceTagsCmd)

	return operationGroupInstanceCmd, nil
}
func makeOperationGroupLeaderCmd() (*cobra.Command, error) {
	operationGroupLeaderCmd := &cobra.Command{
		Use:  "leader",
		Long: ``,
	}

	operationGetLeaderForTableCmd, err := makeOperationLeaderGetLeaderForTableCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLeaderCmd.AddCommand(operationGetLeaderForTableCmd)

	operationGetLeadersForAllTablesCmd, err := makeOperationLeaderGetLeadersForAllTablesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLeaderCmd.AddCommand(operationGetLeadersForAllTablesCmd)

	return operationGroupLeaderCmd, nil
}
func makeOperationGroupLoggerCmd() (*cobra.Command, error) {
	operationGroupLoggerCmd := &cobra.Command{
		Use:  "logger",
		Long: ``,
	}

	operationDownloadLogFileCmd, err := makeOperationLoggerDownloadLogFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLoggerCmd.AddCommand(operationDownloadLogFileCmd)

	operationDownloadLogFileFromInstanceCmd, err := makeOperationLoggerDownloadLogFileFromInstanceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLoggerCmd.AddCommand(operationDownloadLogFileFromInstanceCmd)

	operationGetLocalLogFilesCmd, err := makeOperationLoggerGetLocalLogFilesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLoggerCmd.AddCommand(operationGetLocalLogFilesCmd)

	operationGetLogFilesFromAllInstancesCmd, err := makeOperationLoggerGetLogFilesFromAllInstancesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLoggerCmd.AddCommand(operationGetLogFilesFromAllInstancesCmd)

	operationGetLogFilesFromInstanceCmd, err := makeOperationLoggerGetLogFilesFromInstanceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLoggerCmd.AddCommand(operationGetLogFilesFromInstanceCmd)

	operationGetLoggerCmd, err := makeOperationLoggerGetLoggerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLoggerCmd.AddCommand(operationGetLoggerCmd)

	operationGetLoggersCmd, err := makeOperationLoggerGetLoggersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLoggerCmd.AddCommand(operationGetLoggersCmd)

	operationSetLoggerLevelCmd, err := makeOperationLoggerSetLoggerLevelCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLoggerCmd.AddCommand(operationSetLoggerLevelCmd)

	return operationGroupLoggerCmd, nil
}
func makeOperationGroupPeriodicTaskCmd() (*cobra.Command, error) {
	operationGroupPeriodicTaskCmd := &cobra.Command{
		Use:  "periodic_task",
		Long: ``,
	}

	operationGetPeriodicTaskNamesCmd, err := makeOperationPeriodicTaskGetPeriodicTaskNamesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPeriodicTaskCmd.AddCommand(operationGetPeriodicTaskNamesCmd)

	operationRunPeriodicTaskCmd, err := makeOperationPeriodicTaskRunPeriodicTaskCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPeriodicTaskCmd.AddCommand(operationRunPeriodicTaskCmd)

	return operationGroupPeriodicTaskCmd, nil
}
func makeOperationGroupQueryCmd() (*cobra.Command, error) {
	operationGroupQueryCmd := &cobra.Command{
		Use:  "query",
		Long: ``,
	}

	operationCancelQueryCmd, err := makeOperationQueryCancelQueryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupQueryCmd.AddCommand(operationCancelQueryCmd)

	operationGetRunningQueriesCmd, err := makeOperationQueryGetRunningQueriesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupQueryCmd.AddCommand(operationGetRunningQueriesCmd)

	return operationGroupQueryCmd, nil
}
func makeOperationGroupSchemaCmd() (*cobra.Command, error) {
	operationGroupSchemaCmd := &cobra.Command{
		Use:  "schema",
		Long: ``,
	}

	operationAddSchema1Cmd, err := makeOperationSchemaAddSchema1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupSchemaCmd.AddCommand(operationAddSchema1Cmd)

	operationDeleteSchemaCmd, err := makeOperationSchemaDeleteSchemaCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSchemaCmd.AddCommand(operationDeleteSchemaCmd)

	operationGetSchemaCmd, err := makeOperationSchemaGetSchemaCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSchemaCmd.AddCommand(operationGetSchemaCmd)

	operationGetTableSchemaCmd, err := makeOperationSchemaGetTableSchemaCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSchemaCmd.AddCommand(operationGetTableSchemaCmd)

	operationListSchemaNamesCmd, err := makeOperationSchemaListSchemaNamesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSchemaCmd.AddCommand(operationListSchemaNamesCmd)

	operationUpdateSchema1Cmd, err := makeOperationSchemaUpdateSchema1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupSchemaCmd.AddCommand(operationUpdateSchema1Cmd)

	operationValidateSchema1Cmd, err := makeOperationSchemaValidateSchema1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupSchemaCmd.AddCommand(operationValidateSchema1Cmd)

	return operationGroupSchemaCmd, nil
}
func makeOperationGroupSegmentCmd() (*cobra.Command, error) {
	operationGroupSegmentCmd := &cobra.Command{
		Use:  "segment",
		Long: ``,
	}

	operationDeleteAllSegmentsCmd, err := makeOperationSegmentDeleteAllSegmentsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationDeleteAllSegmentsCmd)

	operationDeleteSegmentCmd, err := makeOperationSegmentDeleteSegmentCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationDeleteSegmentCmd)

	operationDeleteSegmentsCmd, err := makeOperationSegmentDeleteSegmentsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationDeleteSegmentsCmd)

	operationDownloadSegmentCmd, err := makeOperationSegmentDownloadSegmentCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationDownloadSegmentCmd)

	operationEndReplaceSegmentsCmd, err := makeOperationSegmentEndReplaceSegmentsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationEndReplaceSegmentsCmd)

	operationGetReloadJobStatusCmd, err := makeOperationSegmentGetReloadJobStatusCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetReloadJobStatusCmd)

	operationGetSegmentMetadataCmd, err := makeOperationSegmentGetSegmentMetadataCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetSegmentMetadataCmd)

	operationGetSegmentMetadataDeprecated1Cmd, err := makeOperationSegmentGetSegmentMetadataDeprecated1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetSegmentMetadataDeprecated1Cmd)

	operationGetSegmentMetadataDeprecated2Cmd, err := makeOperationSegmentGetSegmentMetadataDeprecated2Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetSegmentMetadataDeprecated2Cmd)

	operationGetSegmentTiersCmd, err := makeOperationSegmentGetSegmentTiersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetSegmentTiersCmd)

	operationGetSegmentToCrcMapCmd, err := makeOperationSegmentGetSegmentToCrcMapCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetSegmentToCrcMapCmd)

	operationGetSegmentToCrcMapDeprecatedCmd, err := makeOperationSegmentGetSegmentToCrcMapDeprecatedCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetSegmentToCrcMapDeprecatedCmd)

	operationGetSegmentsCmd, err := makeOperationSegmentGetSegmentsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetSegmentsCmd)

	operationGetSelectedSegmentsCmd, err := makeOperationSegmentGetSelectedSegmentsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetSelectedSegmentsCmd)

	operationGetServerMetadataCmd, err := makeOperationSegmentGetServerMetadataCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetServerMetadataCmd)

	operationGetServerToSegmentsMapCmd, err := makeOperationSegmentGetServerToSegmentsMapCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetServerToSegmentsMapCmd)

	operationGetServerToSegmentsMapDeprecated1Cmd, err := makeOperationSegmentGetServerToSegmentsMapDeprecated1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetServerToSegmentsMapDeprecated1Cmd)

	operationGetServerToSegmentsMapDeprecated2Cmd, err := makeOperationSegmentGetServerToSegmentsMapDeprecated2Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetServerToSegmentsMapDeprecated2Cmd)

	operationGetTableTiersCmd, err := makeOperationSegmentGetTableTiersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationGetTableTiersCmd)

	operationListSegmentLineageCmd, err := makeOperationSegmentListSegmentLineageCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationListSegmentLineageCmd)

	operationReloadAllSegmentsCmd, err := makeOperationSegmentReloadAllSegmentsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationReloadAllSegmentsCmd)

	operationReloadAllSegmentsDeprecated1Cmd, err := makeOperationSegmentReloadAllSegmentsDeprecated1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationReloadAllSegmentsDeprecated1Cmd)

	operationReloadAllSegmentsDeprecated2Cmd, err := makeOperationSegmentReloadAllSegmentsDeprecated2Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationReloadAllSegmentsDeprecated2Cmd)

	operationReloadSegmentCmd, err := makeOperationSegmentReloadSegmentCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationReloadSegmentCmd)

	operationReloadSegmentDeprecated1Cmd, err := makeOperationSegmentReloadSegmentDeprecated1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationReloadSegmentDeprecated1Cmd)

	operationReloadSegmentDeprecated2Cmd, err := makeOperationSegmentReloadSegmentDeprecated2Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationReloadSegmentDeprecated2Cmd)

	operationResetSegmentCmd, err := makeOperationSegmentResetSegmentCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationResetSegmentCmd)

	operationResetSegmentsCmd, err := makeOperationSegmentResetSegmentsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationResetSegmentsCmd)

	operationRevertReplaceSegmentsCmd, err := makeOperationSegmentRevertReplaceSegmentsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationRevertReplaceSegmentsCmd)

	operationStartReplaceSegmentsCmd, err := makeOperationSegmentStartReplaceSegmentsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationStartReplaceSegmentsCmd)

	operationUpdateTimeIntervalZKCmd, err := makeOperationSegmentUpdateTimeIntervalZKCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationUpdateTimeIntervalZKCmd)

	operationUploadSegmentAsMultiPartCmd, err := makeOperationSegmentUploadSegmentAsMultiPartCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationUploadSegmentAsMultiPartCmd)

	operationUploadSegmentAsMultiPartV2Cmd, err := makeOperationSegmentUploadSegmentAsMultiPartV2Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupSegmentCmd.AddCommand(operationUploadSegmentAsMultiPartV2Cmd)

	return operationGroupSegmentCmd, nil
}
func makeOperationGroupTableCmd() (*cobra.Command, error) {
	operationGroupTableCmd := &cobra.Command{
		Use:  "table",
		Long: ``,
	}

	operationAddConfigCmd, err := makeOperationTableAddConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationAddConfigCmd)

	operationAddTableCmd, err := makeOperationTableAddTableCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationAddTableCmd)

	operationAlterTableStateOrListTableConfigCmd, err := makeOperationTableAlterTableStateOrListTableConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationAlterTableStateOrListTableConfigCmd)

	operationAssignInstancesCmd, err := makeOperationTableAssignInstancesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationAssignInstancesCmd)

	operationCheckTableConfigCmd, err := makeOperationTableCheckTableConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationCheckTableConfigCmd)

	operationDeleteConfigCmd, err := makeOperationTableDeleteConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationDeleteConfigCmd)

	operationDeleteTableCmd, err := makeOperationTableDeleteTableCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationDeleteTableCmd)

	operationDeleteTimeBoundaryCmd, err := makeOperationTableDeleteTimeBoundaryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationDeleteTimeBoundaryCmd)

	operationForceCommitCmd, err := makeOperationTableForceCommitCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationForceCommitCmd)

	operationGetConfigCmd, err := makeOperationTableGetConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetConfigCmd)

	operationGetConsumingSegmentsInfoCmd, err := makeOperationTableGetConsumingSegmentsInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetConsumingSegmentsInfoCmd)

	operationGetControllerJobsCmd, err := makeOperationTableGetControllerJobsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetControllerJobsCmd)

	operationGetExternalViewCmd, err := makeOperationTableGetExternalViewCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetExternalViewCmd)

	operationGetForceCommitJobStatusCmd, err := makeOperationTableGetForceCommitJobStatusCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetForceCommitJobStatusCmd)

	operationGetIdealStateCmd, err := makeOperationTableGetIdealStateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetIdealStateCmd)

	operationGetInstancePartitionsCmd, err := makeOperationTableGetInstancePartitionsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetInstancePartitionsCmd)

	operationGetLiveBrokersCmd, err := makeOperationTableGetLiveBrokersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetLiveBrokersCmd)

	operationGetLiveBrokersForTableCmd, err := makeOperationTableGetLiveBrokersForTableCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetLiveBrokersForTableCmd)

	operationGetPauseStatusCmd, err := makeOperationTableGetPauseStatusCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetPauseStatusCmd)

	operationGetTableAggregateMetadataCmd, err := makeOperationTableGetTableAggregateMetadataCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetTableAggregateMetadataCmd)

	operationGetTableInstancesCmd, err := makeOperationTableGetTableInstancesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetTableInstancesCmd)

	operationGetTableSizeCmd, err := makeOperationTableGetTableSizeCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetTableSizeCmd)

	operationGetTableStateCmd, err := makeOperationTableGetTableStateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetTableStateCmd)

	operationGetTableStatsCmd, err := makeOperationTableGetTableStatsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetTableStatsCmd)

	operationGetTableStatusCmd, err := makeOperationTableGetTableStatusCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationGetTableStatusCmd)

	operationIngestFromFileCmd, err := makeOperationTableIngestFromFileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationIngestFromFileCmd)

	operationIngestFromURICmd, err := makeOperationTableIngestFromURICmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationIngestFromURICmd)

	operationListConfigsCmd, err := makeOperationTableListConfigsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationListConfigsCmd)

	operationListTablesCmd, err := makeOperationTableListTablesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationListTablesCmd)

	operationPauseConsumptionCmd, err := makeOperationTablePauseConsumptionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationPauseConsumptionCmd)

	operationPutCmd, err := makeOperationTablePutCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationPutCmd)

	operationRebalanceCmd, err := makeOperationTableRebalanceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationRebalanceCmd)

	operationRebuildBrokerResourceCmd, err := makeOperationTableRebuildBrokerResourceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationRebuildBrokerResourceCmd)

	operationRecommendConfigCmd, err := makeOperationTableRecommendConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationRecommendConfigCmd)

	operationRemoveInstancePartitionsCmd, err := makeOperationTableRemoveInstancePartitionsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationRemoveInstancePartitionsCmd)

	operationReplaceInstanceCmd, err := makeOperationTableReplaceInstanceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationReplaceInstanceCmd)

	operationResumeConsumptionCmd, err := makeOperationTableResumeConsumptionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationResumeConsumptionCmd)

	operationSetInstancePartitionsCmd, err := makeOperationTableSetInstancePartitionsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationSetInstancePartitionsCmd)

	operationSetTimeBoundaryCmd, err := makeOperationTableSetTimeBoundaryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationSetTimeBoundaryCmd)

	operationUpdateConfigCmd, err := makeOperationTableUpdateConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationUpdateConfigCmd)

	operationUpdateIndexingConfigCmd, err := makeOperationTableUpdateIndexingConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationUpdateIndexingConfigCmd)

	operationUpdateTableConfigCmd, err := makeOperationTableUpdateTableConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationUpdateTableConfigCmd)

	operationUpdateTableMetadataCmd, err := makeOperationTableUpdateTableMetadataCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationUpdateTableMetadataCmd)

	operationValidateConfigCmd, err := makeOperationTableValidateConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationValidateConfigCmd)

	operationValidateTableAndSchemaCmd, err := makeOperationTableValidateTableAndSchemaCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTableCmd.AddCommand(operationValidateTableAndSchemaCmd)

	return operationGroupTableCmd, nil
}
func makeOperationGroupTaskCmd() (*cobra.Command, error) {
	operationGroupTaskCmd := &cobra.Command{
		Use:  "task",
		Long: ``,
	}

	operationCleanUpTasksCmd, err := makeOperationTaskCleanUpTasksCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationCleanUpTasksCmd)

	operationCleanUpTasksDeprecatedCmd, err := makeOperationTaskCleanUpTasksDeprecatedCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationCleanUpTasksDeprecatedCmd)

	operationDeleteTaskCmd, err := makeOperationTaskDeleteTaskCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationDeleteTaskCmd)

	operationDeleteTaskMetadataByTableCmd, err := makeOperationTaskDeleteTaskMetadataByTableCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationDeleteTaskMetadataByTableCmd)

	operationDeleteTaskQueueCmd, err := makeOperationTaskDeleteTaskQueueCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationDeleteTaskQueueCmd)

	operationDeleteTasksCmd, err := makeOperationTaskDeleteTasksCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationDeleteTasksCmd)

	operationExecuteAdhocTaskCmd, err := makeOperationTaskExecuteAdhocTaskCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationExecuteAdhocTaskCmd)

	operationGetCronSchedulerInformationCmd, err := makeOperationTaskGetCronSchedulerInformationCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetCronSchedulerInformationCmd)

	operationGetCronSchedulerJobDetailsCmd, err := makeOperationTaskGetCronSchedulerJobDetailsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetCronSchedulerJobDetailsCmd)

	operationGetCronSchedulerJobKeysCmd, err := makeOperationTaskGetCronSchedulerJobKeysCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetCronSchedulerJobKeysCmd)

	operationGetSubtaskConfigsCmd, err := makeOperationTaskGetSubtaskConfigsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetSubtaskConfigsCmd)

	operationGetSubtaskOnWorkerProgressCmd, err := makeOperationTaskGetSubtaskOnWorkerProgressCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetSubtaskOnWorkerProgressCmd)

	operationGetSubtaskProgressCmd, err := makeOperationTaskGetSubtaskProgressCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetSubtaskProgressCmd)

	operationGetSubtaskStatesCmd, err := makeOperationTaskGetSubtaskStatesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetSubtaskStatesCmd)

	operationGetTaskConfigCmd, err := makeOperationTaskGetTaskConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskConfigCmd)

	operationGetTaskConfigsCmd, err := makeOperationTaskGetTaskConfigsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskConfigsCmd)

	operationGetTaskConfigsDeprecatedCmd, err := makeOperationTaskGetTaskConfigsDeprecatedCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskConfigsDeprecatedCmd)

	operationGetTaskCountsCmd, err := makeOperationTaskGetTaskCountsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskCountsCmd)

	operationGetTaskDebugInfoCmd, err := makeOperationTaskGetTaskDebugInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskDebugInfoCmd)

	operationGetTaskGenerationDebugIntoCmd, err := makeOperationTaskGetTaskGenerationDebugIntoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskGenerationDebugIntoCmd)

	operationGetTaskMetadataByTableCmd, err := makeOperationTaskGetTaskMetadataByTableCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskMetadataByTableCmd)

	operationGetTaskQueueStateCmd, err := makeOperationTaskGetTaskQueueStateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskQueueStateCmd)

	operationGetTaskQueueStateDeprecatedCmd, err := makeOperationTaskGetTaskQueueStateDeprecatedCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskQueueStateDeprecatedCmd)

	operationGetTaskQueuesCmd, err := makeOperationTaskGetTaskQueuesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskQueuesCmd)

	operationGetTaskStateCmd, err := makeOperationTaskGetTaskStateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskStateCmd)

	operationGetTaskStateDeprecatedCmd, err := makeOperationTaskGetTaskStateDeprecatedCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskStateDeprecatedCmd)

	operationGetTaskStatesCmd, err := makeOperationTaskGetTaskStatesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskStatesCmd)

	operationGetTaskStatesByTableCmd, err := makeOperationTaskGetTaskStatesByTableCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskStatesByTableCmd)

	operationGetTaskStatesDeprecatedCmd, err := makeOperationTaskGetTaskStatesDeprecatedCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTaskStatesDeprecatedCmd)

	operationGetTasksCmd, err := makeOperationTaskGetTasksCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTasksCmd)

	operationGetTasksDebugInfoCmd, err := makeOperationTaskGetTasksDebugInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTasksDebugInfoCmd)

	operationGetTasksDebugInfo1Cmd, err := makeOperationTaskGetTasksDebugInfo1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTasksDebugInfo1Cmd)

	operationGetTasksDeprecatedCmd, err := makeOperationTaskGetTasksDeprecatedCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationGetTasksDeprecatedCmd)

	operationListTaskTypesCmd, err := makeOperationTaskListTaskTypesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationListTaskTypesCmd)

	operationResumeTasksCmd, err := makeOperationTaskResumeTasksCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationResumeTasksCmd)

	operationScheduleTasksCmd, err := makeOperationTaskScheduleTasksCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationScheduleTasksCmd)

	operationScheduleTasksDeprecatedCmd, err := makeOperationTaskScheduleTasksDeprecatedCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationScheduleTasksDeprecatedCmd)

	operationStopTasksCmd, err := makeOperationTaskStopTasksCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationStopTasksCmd)

	operationToggleTaskQueueStateCmd, err := makeOperationTaskToggleTaskQueueStateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationToggleTaskQueueStateCmd)

	return operationGroupTaskCmd, nil
}
func makeOperationGroupTenantCmd() (*cobra.Command, error) {
	operationGroupTenantCmd := &cobra.Command{
		Use:  "tenant",
		Long: ``,
	}

	operationChangeTenantStateCmd, err := makeOperationTenantChangeTenantStateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTenantCmd.AddCommand(operationChangeTenantStateCmd)

	operationCreateTenantCmd, err := makeOperationTenantCreateTenantCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTenantCmd.AddCommand(operationCreateTenantCmd)

	operationDeleteTenantCmd, err := makeOperationTenantDeleteTenantCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTenantCmd.AddCommand(operationDeleteTenantCmd)

	operationGetAllTenantsCmd, err := makeOperationTenantGetAllTenantsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTenantCmd.AddCommand(operationGetAllTenantsCmd)

	operationGetTablesOnTenantCmd, err := makeOperationTenantGetTablesOnTenantCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTenantCmd.AddCommand(operationGetTablesOnTenantCmd)

	operationGetTenantMetadataCmd, err := makeOperationTenantGetTenantMetadataCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTenantCmd.AddCommand(operationGetTenantMetadataCmd)

	operationListInstanceOrToggleTenantStateCmd, err := makeOperationTenantListInstanceOrToggleTenantStateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTenantCmd.AddCommand(operationListInstanceOrToggleTenantStateCmd)

	operationUpdateTenantCmd, err := makeOperationTenantUpdateTenantCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTenantCmd.AddCommand(operationUpdateTenantCmd)

	return operationGroupTenantCmd, nil
}
func makeOperationGroupTunerCmd() (*cobra.Command, error) {
	operationGroupTunerCmd := &cobra.Command{
		Use:  "tuner",
		Long: ``,
	}

	operationTuneTableCmd, err := makeOperationTunerTuneTableCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTunerCmd.AddCommand(operationTuneTableCmd)

	operationTuneTable1Cmd, err := makeOperationTunerTuneTable1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupTunerCmd.AddCommand(operationTuneTable1Cmd)

	return operationGroupTunerCmd, nil
}
func makeOperationGroupUpsertCmd() (*cobra.Command, error) {
	operationGroupUpsertCmd := &cobra.Command{
		Use:  "upsert",
		Long: ``,
	}

	operationEstimateHeapUsageCmd, err := makeOperationUpsertEstimateHeapUsageCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUpsertCmd.AddCommand(operationEstimateHeapUsageCmd)

	return operationGroupUpsertCmd, nil
}
func makeOperationGroupUserCmd() (*cobra.Command, error) {
	operationGroupUserCmd := &cobra.Command{
		Use:  "user",
		Long: ``,
	}

	operationAddUserCmd, err := makeOperationUserAddUserCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationAddUserCmd)

	operationDeleteUserCmd, err := makeOperationUserDeleteUserCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationDeleteUserCmd)

	operationGetUserCmd, err := makeOperationUserGetUserCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationGetUserCmd)

	operationListUersCmd, err := makeOperationUserListUersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationListUersCmd)

	operationUpdateUserConfigCmd, err := makeOperationUserUpdateUserConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationUpdateUserConfigCmd)

	return operationGroupUserCmd, nil
}
func makeOperationGroupVersionCmd() (*cobra.Command, error) {
	operationGroupVersionCmd := &cobra.Command{
		Use:  "version",
		Long: ``,
	}

	operationGetVersionNumberCmd, err := makeOperationVersionGetVersionNumberCmd()
	if err != nil {
		return nil, err
	}
	operationGroupVersionCmd.AddCommand(operationGetVersionNumberCmd)

	return operationGroupVersionCmd, nil
}
func makeOperationGroupWriteAPICmd() (*cobra.Command, error) {
	operationGroupWriteAPICmd := &cobra.Command{
		Use:  "write_api",
		Long: ``,
	}

	operationGetWriteConfigCmd, err := makeOperationWriteAPIGetWriteConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWriteAPICmd.AddCommand(operationGetWriteConfigCmd)

	operationInsertCmd, err := makeOperationWriteAPIInsertCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWriteAPICmd.AddCommand(operationInsertCmd)

	operationUpdateWriteConfigCmd, err := makeOperationWriteAPIUpdateWriteConfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWriteAPICmd.AddCommand(operationUpdateWriteConfigCmd)

	return operationGroupWriteAPICmd, nil
}
func makeOperationGroupZookeeperCmd() (*cobra.Command, error) {
	operationGroupZookeeperCmd := &cobra.Command{
		Use:  "zookeeper",
		Long: ``,
	}

	operationDeleteCmd, err := makeOperationZookeeperDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupZookeeperCmd.AddCommand(operationDeleteCmd)

	operationGetChildrenCmd, err := makeOperationZookeeperGetChildrenCmd()
	if err != nil {
		return nil, err
	}
	operationGroupZookeeperCmd.AddCommand(operationGetChildrenCmd)

	operationGetDataCmd, err := makeOperationZookeeperGetDataCmd()
	if err != nil {
		return nil, err
	}
	operationGroupZookeeperCmd.AddCommand(operationGetDataCmd)

	operationLsCmd, err := makeOperationZookeeperLsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupZookeeperCmd.AddCommand(operationLsCmd)

	operationLslCmd, err := makeOperationZookeeperLslCmd()
	if err != nil {
		return nil, err
	}
	operationGroupZookeeperCmd.AddCommand(operationLslCmd)

	operationPutChildrenCmd, err := makeOperationZookeeperPutChildrenCmd()
	if err != nil {
		return nil, err
	}
	operationGroupZookeeperCmd.AddCommand(operationPutChildrenCmd)

	operationPutDataCmd, err := makeOperationZookeeperPutDataCmd()
	if err != nil {
		return nil, err
	}
	operationGroupZookeeperCmd.AddCommand(operationPutDataCmd)

	operationStatCmd, err := makeOperationZookeeperStatCmd()
	if err != nil {
		return nil, err
	}
	operationGroupZookeeperCmd.AddCommand(operationStatCmd)

	return operationGroupZookeeperCmd, nil
}
