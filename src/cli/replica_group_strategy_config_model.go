// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for ReplicaGroupStrategyConfig

// register flags to command
func registerModelReplicaGroupStrategyConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReplicaGroupStrategyConfigNumInstancesPerPartition(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicaGroupStrategyConfigPartitionColumn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReplicaGroupStrategyConfigNumInstancesPerPartition(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numInstancesPerPartitionDescription := `Required. `

	var numInstancesPerPartitionFlagName string
	if cmdPrefix == "" {
		numInstancesPerPartitionFlagName = "numInstancesPerPartition"
	} else {
		numInstancesPerPartitionFlagName = fmt.Sprintf("%v.numInstancesPerPartition", cmdPrefix)
	}

	var numInstancesPerPartitionFlagDefault int32

	_ = cmd.PersistentFlags().Int32(numInstancesPerPartitionFlagName, numInstancesPerPartitionFlagDefault, numInstancesPerPartitionDescription)

	return nil
}

func registerReplicaGroupStrategyConfigPartitionColumn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	partitionColumnDescription := ``

	var partitionColumnFlagName string
	if cmdPrefix == "" {
		partitionColumnFlagName = "partitionColumn"
	} else {
		partitionColumnFlagName = fmt.Sprintf("%v.partitionColumn", cmdPrefix)
	}

	var partitionColumnFlagDefault string

	_ = cmd.PersistentFlags().String(partitionColumnFlagName, partitionColumnFlagDefault, partitionColumnDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReplicaGroupStrategyConfigFlags(depth int, m *models.ReplicaGroupStrategyConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, numInstancesPerPartitionAdded := retrieveReplicaGroupStrategyConfigNumInstancesPerPartitionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numInstancesPerPartitionAdded

	err, partitionColumnAdded := retrieveReplicaGroupStrategyConfigPartitionColumnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || partitionColumnAdded

	return nil, retAdded
}

func retrieveReplicaGroupStrategyConfigNumInstancesPerPartitionFlags(depth int, m *models.ReplicaGroupStrategyConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numInstancesPerPartitionFlagName := fmt.Sprintf("%v.numInstancesPerPartition", cmdPrefix)
	if cmd.Flags().Changed(numInstancesPerPartitionFlagName) {

		var numInstancesPerPartitionFlagName string
		if cmdPrefix == "" {
			numInstancesPerPartitionFlagName = "numInstancesPerPartition"
		} else {
			numInstancesPerPartitionFlagName = fmt.Sprintf("%v.numInstancesPerPartition", cmdPrefix)
		}

		numInstancesPerPartitionFlagValue, err := cmd.Flags().GetInt32(numInstancesPerPartitionFlagName)
		if err != nil {
			return err, false
		}
		m.NumInstancesPerPartition = numInstancesPerPartitionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicaGroupStrategyConfigPartitionColumnFlags(depth int, m *models.ReplicaGroupStrategyConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	partitionColumnFlagName := fmt.Sprintf("%v.partitionColumn", cmdPrefix)
	if cmd.Flags().Changed(partitionColumnFlagName) {

		var partitionColumnFlagName string
		if cmdPrefix == "" {
			partitionColumnFlagName = "partitionColumn"
		} else {
			partitionColumnFlagName = fmt.Sprintf("%v.partitionColumn", cmdPrefix)
		}

		partitionColumnFlagValue, err := cmd.Flags().GetString(partitionColumnFlagName)
		if err != nil {
			return err, false
		}
		m.PartitionColumn = partitionColumnFlagValue

		retAdded = true
	}

	return nil, retAdded
}
