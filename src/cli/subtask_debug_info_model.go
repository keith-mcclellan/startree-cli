// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"startree.ai/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for SubtaskDebugInfo

// register flags to command
func registerModelSubtaskDebugInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSubtaskDebugInfoFinishTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubtaskDebugInfoInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubtaskDebugInfoParticipant(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubtaskDebugInfoStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubtaskDebugInfoState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubtaskDebugInfoTaskConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubtaskDebugInfoTaskID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSubtaskDebugInfoFinishTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	finishTimeDescription := ``

	var finishTimeFlagName string
	if cmdPrefix == "" {
		finishTimeFlagName = "finishTime"
	} else {
		finishTimeFlagName = fmt.Sprintf("%v.finishTime", cmdPrefix)
	}

	var finishTimeFlagDefault string

	_ = cmd.PersistentFlags().String(finishTimeFlagName, finishTimeFlagDefault, finishTimeDescription)

	return nil
}

func registerSubtaskDebugInfoInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	infoDescription := ``

	var infoFlagName string
	if cmdPrefix == "" {
		infoFlagName = "info"
	} else {
		infoFlagName = fmt.Sprintf("%v.info", cmdPrefix)
	}

	var infoFlagDefault string

	_ = cmd.PersistentFlags().String(infoFlagName, infoFlagDefault, infoDescription)

	return nil
}

func registerSubtaskDebugInfoParticipant(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	participantDescription := ``

	var participantFlagName string
	if cmdPrefix == "" {
		participantFlagName = "participant"
	} else {
		participantFlagName = fmt.Sprintf("%v.participant", cmdPrefix)
	}

	var participantFlagDefault string

	_ = cmd.PersistentFlags().String(participantFlagName, participantFlagDefault, participantDescription)

	return nil
}

func registerSubtaskDebugInfoStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimeDescription := ``

	var startTimeFlagName string
	if cmdPrefix == "" {
		startTimeFlagName = "startTime"
	} else {
		startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
	}

	var startTimeFlagDefault string

	_ = cmd.PersistentFlags().String(startTimeFlagName, startTimeFlagDefault, startTimeDescription)

	return nil
}

func registerSubtaskDebugInfoState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stateDescription := `Enum: ["INIT","RUNNING","STOPPED","COMPLETED","TIMED_OUT","TASK_ERROR","TASK_ABORTED","ERROR","DROPPED"]. `

	var stateFlagName string
	if cmdPrefix == "" {
		stateFlagName = "state"
	} else {
		stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var stateFlagDefault string

	_ = cmd.PersistentFlags().String(stateFlagName, stateFlagDefault, stateDescription)

	if err := cmd.RegisterFlagCompletionFunc(stateFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["INIT","RUNNING","STOPPED","COMPLETED","TIMED_OUT","TASK_ERROR","TASK_ABORTED","ERROR","DROPPED"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSubtaskDebugInfoTaskConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var taskConfigFlagName string
	if cmdPrefix == "" {
		taskConfigFlagName = "taskConfig"
	} else {
		taskConfigFlagName = fmt.Sprintf("%v.taskConfig", cmdPrefix)
	}

	if err := registerModelPinotTaskConfigFlags(depth+1, taskConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSubtaskDebugInfoTaskID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	taskIdDescription := ``

	var taskIdFlagName string
	if cmdPrefix == "" {
		taskIdFlagName = "taskId"
	} else {
		taskIdFlagName = fmt.Sprintf("%v.taskId", cmdPrefix)
	}

	var taskIdFlagDefault string

	_ = cmd.PersistentFlags().String(taskIdFlagName, taskIdFlagDefault, taskIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSubtaskDebugInfoFlags(depth int, m *models.SubtaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, finishTimeAdded := retrieveSubtaskDebugInfoFinishTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || finishTimeAdded

	err, infoAdded := retrieveSubtaskDebugInfoInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || infoAdded

	err, participantAdded := retrieveSubtaskDebugInfoParticipantFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || participantAdded

	err, startTimeAdded := retrieveSubtaskDebugInfoStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimeAdded

	err, stateAdded := retrieveSubtaskDebugInfoStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stateAdded

	err, taskConfigAdded := retrieveSubtaskDebugInfoTaskConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskConfigAdded

	err, taskIdAdded := retrieveSubtaskDebugInfoTaskIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskIdAdded

	return nil, retAdded
}

func retrieveSubtaskDebugInfoFinishTimeFlags(depth int, m *models.SubtaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	finishTimeFlagName := fmt.Sprintf("%v.finishTime", cmdPrefix)
	if cmd.Flags().Changed(finishTimeFlagName) {

		var finishTimeFlagName string
		if cmdPrefix == "" {
			finishTimeFlagName = "finishTime"
		} else {
			finishTimeFlagName = fmt.Sprintf("%v.finishTime", cmdPrefix)
		}

		finishTimeFlagValue, err := cmd.Flags().GetString(finishTimeFlagName)
		if err != nil {
			return err, false
		}
		m.FinishTime = finishTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSubtaskDebugInfoInfoFlags(depth int, m *models.SubtaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	infoFlagName := fmt.Sprintf("%v.info", cmdPrefix)
	if cmd.Flags().Changed(infoFlagName) {

		var infoFlagName string
		if cmdPrefix == "" {
			infoFlagName = "info"
		} else {
			infoFlagName = fmt.Sprintf("%v.info", cmdPrefix)
		}

		infoFlagValue, err := cmd.Flags().GetString(infoFlagName)
		if err != nil {
			return err, false
		}
		m.Info = infoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSubtaskDebugInfoParticipantFlags(depth int, m *models.SubtaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	participantFlagName := fmt.Sprintf("%v.participant", cmdPrefix)
	if cmd.Flags().Changed(participantFlagName) {

		var participantFlagName string
		if cmdPrefix == "" {
			participantFlagName = "participant"
		} else {
			participantFlagName = fmt.Sprintf("%v.participant", cmdPrefix)
		}

		participantFlagValue, err := cmd.Flags().GetString(participantFlagName)
		if err != nil {
			return err, false
		}
		m.Participant = participantFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSubtaskDebugInfoStartTimeFlags(depth int, m *models.SubtaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimeFlagName := fmt.Sprintf("%v.startTime", cmdPrefix)
	if cmd.Flags().Changed(startTimeFlagName) {

		var startTimeFlagName string
		if cmdPrefix == "" {
			startTimeFlagName = "startTime"
		} else {
			startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
		}

		startTimeFlagValue, err := cmd.Flags().GetString(startTimeFlagName)
		if err != nil {
			return err, false
		}
		m.StartTime = startTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSubtaskDebugInfoStateFlags(depth int, m *models.SubtaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stateFlagName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(stateFlagName) {

		var stateFlagName string
		if cmdPrefix == "" {
			stateFlagName = "state"
		} else {
			stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		stateFlagValue, err := cmd.Flags().GetString(stateFlagName)
		if err != nil {
			return err, false
		}
		m.State = stateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSubtaskDebugInfoTaskConfigFlags(depth int, m *models.SubtaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskConfigFlagName := fmt.Sprintf("%v.taskConfig", cmdPrefix)
	if cmd.Flags().Changed(taskConfigFlagName) {
		// info: complex object taskConfig PinotTaskConfig is retrieved outside this Changed() block
	}
	taskConfigFlagValue := m.TaskConfig
	if swag.IsZero(taskConfigFlagValue) {
		taskConfigFlagValue = &models.PinotTaskConfig{}
	}

	err, taskConfigAdded := retrieveModelPinotTaskConfigFlags(depth+1, taskConfigFlagValue, taskConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskConfigAdded
	if taskConfigAdded {
		m.TaskConfig = taskConfigFlagValue
	}

	return nil, retAdded
}

func retrieveSubtaskDebugInfoTaskIDFlags(depth int, m *models.SubtaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskIdFlagName := fmt.Sprintf("%v.taskId", cmdPrefix)
	if cmd.Flags().Changed(taskIdFlagName) {

		var taskIdFlagName string
		if cmdPrefix == "" {
			taskIdFlagName = "taskId"
		} else {
			taskIdFlagName = fmt.Sprintf("%v.taskId", cmdPrefix)
		}

		taskIdFlagValue, err := cmd.Flags().GetString(taskIdFlagName)
		if err != nil {
			return err, false
		}
		m.TaskID = taskIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
