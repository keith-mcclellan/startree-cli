// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for AggregationConfig

// register flags to command
func registerModelAggregationConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAggregationConfigAggregationFunction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAggregationConfigColumnName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAggregationConfigAggregationFunction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aggregationFunctionDescription := ``

	var aggregationFunctionFlagName string
	if cmdPrefix == "" {
		aggregationFunctionFlagName = "aggregationFunction"
	} else {
		aggregationFunctionFlagName = fmt.Sprintf("%v.aggregationFunction", cmdPrefix)
	}

	var aggregationFunctionFlagDefault string

	_ = cmd.PersistentFlags().String(aggregationFunctionFlagName, aggregationFunctionFlagDefault, aggregationFunctionDescription)

	return nil
}

func registerAggregationConfigColumnName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	columnNameDescription := ``

	var columnNameFlagName string
	if cmdPrefix == "" {
		columnNameFlagName = "columnName"
	} else {
		columnNameFlagName = fmt.Sprintf("%v.columnName", cmdPrefix)
	}

	var columnNameFlagDefault string

	_ = cmd.PersistentFlags().String(columnNameFlagName, columnNameFlagDefault, columnNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAggregationConfigFlags(depth int, m *models.AggregationConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, aggregationFunctionAdded := retrieveAggregationConfigAggregationFunctionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aggregationFunctionAdded

	err, columnNameAdded := retrieveAggregationConfigColumnNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || columnNameAdded

	return nil, retAdded
}

func retrieveAggregationConfigAggregationFunctionFlags(depth int, m *models.AggregationConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aggregationFunctionFlagName := fmt.Sprintf("%v.aggregationFunction", cmdPrefix)
	if cmd.Flags().Changed(aggregationFunctionFlagName) {

		var aggregationFunctionFlagName string
		if cmdPrefix == "" {
			aggregationFunctionFlagName = "aggregationFunction"
		} else {
			aggregationFunctionFlagName = fmt.Sprintf("%v.aggregationFunction", cmdPrefix)
		}

		aggregationFunctionFlagValue, err := cmd.Flags().GetString(aggregationFunctionFlagName)
		if err != nil {
			return err, false
		}
		m.AggregationFunction = aggregationFunctionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAggregationConfigColumnNameFlags(depth int, m *models.AggregationConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	columnNameFlagName := fmt.Sprintf("%v.columnName", cmdPrefix)
	if cmd.Flags().Changed(columnNameFlagName) {

		var columnNameFlagName string
		if cmdPrefix == "" {
			columnNameFlagName = "columnName"
		} else {
			columnNameFlagName = fmt.Sprintf("%v.columnName", cmdPrefix)
		}

		columnNameFlagValue, err := cmd.Flags().GetString(columnNameFlagName)
		if err != nil {
			return err, false
		}
		m.ColumnName = columnNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
