// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for CompletionConfig

// register flags to command
func registerModelCompletionConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCompletionConfigCompletionMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCompletionConfigCompletionMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	completionModeDescription := `Required. `

	var completionModeFlagName string
	if cmdPrefix == "" {
		completionModeFlagName = "completionMode"
	} else {
		completionModeFlagName = fmt.Sprintf("%v.completionMode", cmdPrefix)
	}

	var completionModeFlagDefault string

	_ = cmd.PersistentFlags().String(completionModeFlagName, completionModeFlagDefault, completionModeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCompletionConfigFlags(depth int, m *models.CompletionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, completionModeAdded := retrieveCompletionConfigCompletionModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || completionModeAdded

	return nil, retAdded
}

func retrieveCompletionConfigCompletionModeFlags(depth int, m *models.CompletionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	completionModeFlagName := fmt.Sprintf("%v.completionMode", cmdPrefix)
	if cmd.Flags().Changed(completionModeFlagName) {

		var completionModeFlagName string
		if cmdPrefix == "" {
			completionModeFlagName = "completionMode"
		} else {
			completionModeFlagName = fmt.Sprintf("%v.completionMode", cmdPrefix)
		}

		completionModeFlagValue, err := cmd.Flags().GetString(completionModeFlagName)
		if err != nil {
			return err, false
		}
		m.CompletionMode = completionModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
