// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/table"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTableListTablesCmd returns a cmd to handle operation listTables
func makeOperationTableListTablesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "listTables",
		Short: `Lists all tables in cluster`,
		RunE:  runOperationTableListTables,
	}

	if err := registerOperationTableListTablesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTableListTables uses cmd flags to call endpoint api
func runOperationTableListTables(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := table.NewListTablesParams()
	if err, _ := retrieveOperationTableListTablesSortAscFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableListTablesSortTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableListTablesTaskTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableListTablesTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTableListTablesResult(appCli.Table.ListTables(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTableListTablesParamFlags registers all flags needed to fill params
func registerOperationTableListTablesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTableListTablesSortAscParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableListTablesSortTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableListTablesTaskTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableListTablesTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTableListTablesSortAscParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sortAscDescription := `true|false`

	var sortAscFlagName string
	if cmdPrefix == "" {
		sortAscFlagName = "sortAsc"
	} else {
		sortAscFlagName = fmt.Sprintf("%v.sortAsc", cmdPrefix)
	}

	var sortAscFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(sortAscFlagName, sortAscFlagDefault, sortAscDescription)

	return nil
}
func registerOperationTableListTablesSortTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sortTypeDescription := `name|creationTime|lastModifiedTime`

	var sortTypeFlagName string
	if cmdPrefix == "" {
		sortTypeFlagName = "sortType"
	} else {
		sortTypeFlagName = fmt.Sprintf("%v.sortType", cmdPrefix)
	}

	var sortTypeFlagDefault string

	_ = cmd.PersistentFlags().String(sortTypeFlagName, sortTypeFlagDefault, sortTypeDescription)

	return nil
}
func registerOperationTableListTablesTaskTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	taskTypeDescription := `Task type`

	var taskTypeFlagName string
	if cmdPrefix == "" {
		taskTypeFlagName = "taskType"
	} else {
		taskTypeFlagName = fmt.Sprintf("%v.taskType", cmdPrefix)
	}

	var taskTypeFlagDefault string

	_ = cmd.PersistentFlags().String(taskTypeFlagName, taskTypeFlagDefault, taskTypeDescription)

	return nil
}
func registerOperationTableListTablesTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `realtime|offline`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func retrieveOperationTableListTablesSortAscFlag(m *table.ListTablesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sortAsc") {

		var sortAscFlagName string
		if cmdPrefix == "" {
			sortAscFlagName = "sortAsc"
		} else {
			sortAscFlagName = fmt.Sprintf("%v.sortAsc", cmdPrefix)
		}

		sortAscFlagValue, err := cmd.Flags().GetBool(sortAscFlagName)
		if err != nil {
			return err, false
		}
		m.SortAsc = &sortAscFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableListTablesSortTypeFlag(m *table.ListTablesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sortType") {

		var sortTypeFlagName string
		if cmdPrefix == "" {
			sortTypeFlagName = "sortType"
		} else {
			sortTypeFlagName = fmt.Sprintf("%v.sortType", cmdPrefix)
		}

		sortTypeFlagValue, err := cmd.Flags().GetString(sortTypeFlagName)
		if err != nil {
			return err, false
		}
		m.SortType = &sortTypeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableListTablesTaskTypeFlag(m *table.ListTablesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("taskType") {

		var taskTypeFlagName string
		if cmdPrefix == "" {
			taskTypeFlagName = "taskType"
		} else {
			taskTypeFlagName = fmt.Sprintf("%v.taskType", cmdPrefix)
		}

		taskTypeFlagValue, err := cmd.Flags().GetString(taskTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TaskType = &taskTypeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableListTablesTypeFlag(m *table.ListTablesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

	}
	return nil, retAdded
}

// parseOperationTableListTablesResult parses request result and return the string content
func parseOperationTableListTablesResult(resp0 *table.ListTablesOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*table.ListTablesOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		return string(msgStr), nil
	}

	return "", nil
}
