// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for TableSubTypeSizeDetails

// register flags to command
func registerModelTableSubTypeSizeDetailsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableSubTypeSizeDetailsEstimatedSizeInBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableSubTypeSizeDetailsMissingSegments(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableSubTypeSizeDetailsReportedSizeInBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableSubTypeSizeDetailsSegments(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableSubTypeSizeDetailsEstimatedSizeInBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	estimatedSizeInBytesDescription := ``

	var estimatedSizeInBytesFlagName string
	if cmdPrefix == "" {
		estimatedSizeInBytesFlagName = "estimatedSizeInBytes"
	} else {
		estimatedSizeInBytesFlagName = fmt.Sprintf("%v.estimatedSizeInBytes", cmdPrefix)
	}

	var estimatedSizeInBytesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(estimatedSizeInBytesFlagName, estimatedSizeInBytesFlagDefault, estimatedSizeInBytesDescription)

	return nil
}

func registerTableSubTypeSizeDetailsMissingSegments(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	missingSegmentsDescription := ``

	var missingSegmentsFlagName string
	if cmdPrefix == "" {
		missingSegmentsFlagName = "missingSegments"
	} else {
		missingSegmentsFlagName = fmt.Sprintf("%v.missingSegments", cmdPrefix)
	}

	var missingSegmentsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(missingSegmentsFlagName, missingSegmentsFlagDefault, missingSegmentsDescription)

	return nil
}

func registerTableSubTypeSizeDetailsReportedSizeInBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	reportedSizeInBytesDescription := ``

	var reportedSizeInBytesFlagName string
	if cmdPrefix == "" {
		reportedSizeInBytesFlagName = "reportedSizeInBytes"
	} else {
		reportedSizeInBytesFlagName = fmt.Sprintf("%v.reportedSizeInBytes", cmdPrefix)
	}

	var reportedSizeInBytesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(reportedSizeInBytesFlagName, reportedSizeInBytesFlagDefault, reportedSizeInBytesDescription)

	return nil
}

func registerTableSubTypeSizeDetailsSegments(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: segments map[string]SegmentSizeDetails map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableSubTypeSizeDetailsFlags(depth int, m *models.TableSubTypeSizeDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, estimatedSizeInBytesAdded := retrieveTableSubTypeSizeDetailsEstimatedSizeInBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || estimatedSizeInBytesAdded

	err, missingSegmentsAdded := retrieveTableSubTypeSizeDetailsMissingSegmentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || missingSegmentsAdded

	err, reportedSizeInBytesAdded := retrieveTableSubTypeSizeDetailsReportedSizeInBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || reportedSizeInBytesAdded

	err, segmentsAdded := retrieveTableSubTypeSizeDetailsSegmentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentsAdded

	return nil, retAdded
}

func retrieveTableSubTypeSizeDetailsEstimatedSizeInBytesFlags(depth int, m *models.TableSubTypeSizeDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	estimatedSizeInBytesFlagName := fmt.Sprintf("%v.estimatedSizeInBytes", cmdPrefix)
	if cmd.Flags().Changed(estimatedSizeInBytesFlagName) {

		var estimatedSizeInBytesFlagName string
		if cmdPrefix == "" {
			estimatedSizeInBytesFlagName = "estimatedSizeInBytes"
		} else {
			estimatedSizeInBytesFlagName = fmt.Sprintf("%v.estimatedSizeInBytes", cmdPrefix)
		}

		estimatedSizeInBytesFlagValue, err := cmd.Flags().GetInt64(estimatedSizeInBytesFlagName)
		if err != nil {
			return err, false
		}
		m.EstimatedSizeInBytes = estimatedSizeInBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableSubTypeSizeDetailsMissingSegmentsFlags(depth int, m *models.TableSubTypeSizeDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	missingSegmentsFlagName := fmt.Sprintf("%v.missingSegments", cmdPrefix)
	if cmd.Flags().Changed(missingSegmentsFlagName) {

		var missingSegmentsFlagName string
		if cmdPrefix == "" {
			missingSegmentsFlagName = "missingSegments"
		} else {
			missingSegmentsFlagName = fmt.Sprintf("%v.missingSegments", cmdPrefix)
		}

		missingSegmentsFlagValue, err := cmd.Flags().GetInt32(missingSegmentsFlagName)
		if err != nil {
			return err, false
		}
		m.MissingSegments = missingSegmentsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableSubTypeSizeDetailsReportedSizeInBytesFlags(depth int, m *models.TableSubTypeSizeDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	reportedSizeInBytesFlagName := fmt.Sprintf("%v.reportedSizeInBytes", cmdPrefix)
	if cmd.Flags().Changed(reportedSizeInBytesFlagName) {

		var reportedSizeInBytesFlagName string
		if cmdPrefix == "" {
			reportedSizeInBytesFlagName = "reportedSizeInBytes"
		} else {
			reportedSizeInBytesFlagName = fmt.Sprintf("%v.reportedSizeInBytes", cmdPrefix)
		}

		reportedSizeInBytesFlagValue, err := cmd.Flags().GetInt64(reportedSizeInBytesFlagName)
		if err != nil {
			return err, false
		}
		m.ReportedSizeInBytes = reportedSizeInBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableSubTypeSizeDetailsSegmentsFlags(depth int, m *models.TableSubTypeSizeDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentsFlagName := fmt.Sprintf("%v.segments", cmdPrefix)
	if cmd.Flags().Changed(segmentsFlagName) {
		// warning: segments map type map[string]SegmentSizeDetails is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
