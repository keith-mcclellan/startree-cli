// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"startree.ai/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for InstanceAssignmentConfig

// register flags to command
func registerModelInstanceAssignmentConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInstanceAssignmentConfigConstraintConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceAssignmentConfigPartitionSelector(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceAssignmentConfigReplicaGroupPartitionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceAssignmentConfigTagPoolConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInstanceAssignmentConfigConstraintConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var constraintConfigFlagName string
	if cmdPrefix == "" {
		constraintConfigFlagName = "constraintConfig"
	} else {
		constraintConfigFlagName = fmt.Sprintf("%v.constraintConfig", cmdPrefix)
	}

	if err := registerModelInstanceConstraintConfigFlags(depth+1, constraintConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerInstanceAssignmentConfigPartitionSelector(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	partitionSelectorDescription := `Enum: ["FD_AWARE_INSTANCE_PARTITION_SELECTOR","INSTANCE_REPLICA_GROUP_PARTITION_SELECTOR"]. `

	var partitionSelectorFlagName string
	if cmdPrefix == "" {
		partitionSelectorFlagName = "partitionSelector"
	} else {
		partitionSelectorFlagName = fmt.Sprintf("%v.partitionSelector", cmdPrefix)
	}

	var partitionSelectorFlagDefault string

	_ = cmd.PersistentFlags().String(partitionSelectorFlagName, partitionSelectorFlagDefault, partitionSelectorDescription)

	if err := cmd.RegisterFlagCompletionFunc(partitionSelectorFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["FD_AWARE_INSTANCE_PARTITION_SELECTOR","INSTANCE_REPLICA_GROUP_PARTITION_SELECTOR"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerInstanceAssignmentConfigReplicaGroupPartitionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var replicaGroupPartitionConfigFlagName string
	if cmdPrefix == "" {
		replicaGroupPartitionConfigFlagName = "replicaGroupPartitionConfig"
	} else {
		replicaGroupPartitionConfigFlagName = fmt.Sprintf("%v.replicaGroupPartitionConfig", cmdPrefix)
	}

	if err := registerModelInstanceReplicaGroupPartitionConfigFlags(depth+1, replicaGroupPartitionConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerInstanceAssignmentConfigTagPoolConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tagPoolConfigFlagName string
	if cmdPrefix == "" {
		tagPoolConfigFlagName = "tagPoolConfig"
	} else {
		tagPoolConfigFlagName = fmt.Sprintf("%v.tagPoolConfig", cmdPrefix)
	}

	if err := registerModelInstanceTagPoolConfigFlags(depth+1, tagPoolConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInstanceAssignmentConfigFlags(depth int, m *models.InstanceAssignmentConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, constraintConfigAdded := retrieveInstanceAssignmentConfigConstraintConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || constraintConfigAdded

	err, partitionSelectorAdded := retrieveInstanceAssignmentConfigPartitionSelectorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || partitionSelectorAdded

	err, replicaGroupPartitionConfigAdded := retrieveInstanceAssignmentConfigReplicaGroupPartitionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || replicaGroupPartitionConfigAdded

	err, tagPoolConfigAdded := retrieveInstanceAssignmentConfigTagPoolConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagPoolConfigAdded

	return nil, retAdded
}

func retrieveInstanceAssignmentConfigConstraintConfigFlags(depth int, m *models.InstanceAssignmentConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	constraintConfigFlagName := fmt.Sprintf("%v.constraintConfig", cmdPrefix)
	if cmd.Flags().Changed(constraintConfigFlagName) {
		// info: complex object constraintConfig InstanceConstraintConfig is retrieved outside this Changed() block
	}
	constraintConfigFlagValue := m.ConstraintConfig
	if swag.IsZero(constraintConfigFlagValue) {
		constraintConfigFlagValue = &models.InstanceConstraintConfig{}
	}

	err, constraintConfigAdded := retrieveModelInstanceConstraintConfigFlags(depth+1, constraintConfigFlagValue, constraintConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || constraintConfigAdded
	if constraintConfigAdded {
		m.ConstraintConfig = constraintConfigFlagValue
	}

	return nil, retAdded
}

func retrieveInstanceAssignmentConfigPartitionSelectorFlags(depth int, m *models.InstanceAssignmentConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	partitionSelectorFlagName := fmt.Sprintf("%v.partitionSelector", cmdPrefix)
	if cmd.Flags().Changed(partitionSelectorFlagName) {

		var partitionSelectorFlagName string
		if cmdPrefix == "" {
			partitionSelectorFlagName = "partitionSelector"
		} else {
			partitionSelectorFlagName = fmt.Sprintf("%v.partitionSelector", cmdPrefix)
		}

		partitionSelectorFlagValue, err := cmd.Flags().GetString(partitionSelectorFlagName)
		if err != nil {
			return err, false
		}
		m.PartitionSelector = partitionSelectorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceAssignmentConfigReplicaGroupPartitionConfigFlags(depth int, m *models.InstanceAssignmentConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	replicaGroupPartitionConfigFlagName := fmt.Sprintf("%v.replicaGroupPartitionConfig", cmdPrefix)
	if cmd.Flags().Changed(replicaGroupPartitionConfigFlagName) {
		// info: complex object replicaGroupPartitionConfig InstanceReplicaGroupPartitionConfig is retrieved outside this Changed() block
	}
	replicaGroupPartitionConfigFlagValue := m.ReplicaGroupPartitionConfig
	if swag.IsZero(replicaGroupPartitionConfigFlagValue) {
		replicaGroupPartitionConfigFlagValue = &models.InstanceReplicaGroupPartitionConfig{}
	}

	err, replicaGroupPartitionConfigAdded := retrieveModelInstanceReplicaGroupPartitionConfigFlags(depth+1, replicaGroupPartitionConfigFlagValue, replicaGroupPartitionConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || replicaGroupPartitionConfigAdded
	if replicaGroupPartitionConfigAdded {
		m.ReplicaGroupPartitionConfig = replicaGroupPartitionConfigFlagValue
	}

	return nil, retAdded
}

func retrieveInstanceAssignmentConfigTagPoolConfigFlags(depth int, m *models.InstanceAssignmentConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagPoolConfigFlagName := fmt.Sprintf("%v.tagPoolConfig", cmdPrefix)
	if cmd.Flags().Changed(tagPoolConfigFlagName) {
		// info: complex object tagPoolConfig InstanceTagPoolConfig is retrieved outside this Changed() block
	}
	tagPoolConfigFlagValue := m.TagPoolConfig
	if swag.IsZero(tagPoolConfigFlagValue) {
		tagPoolConfigFlagValue = &models.InstanceTagPoolConfig{}
	}

	err, tagPoolConfigAdded := retrieveModelInstanceTagPoolConfigFlags(depth+1, tagPoolConfigFlagValue, tagPoolConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagPoolConfigAdded
	if tagPoolConfigAdded {
		m.TagPoolConfig = tagPoolConfigFlagValue
	}

	return nil, retAdded
}
