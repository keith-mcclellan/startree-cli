// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"startree.ai/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for TableConfigV2

// register flags to command
func registerModelTableConfigV2Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2Offline(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2Realtime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2Schema(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2TableName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2Offline(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var offlineFlagName string
	if cmdPrefix == "" {
		offlineFlagName = "offline"
	} else {
		offlineFlagName = fmt.Sprintf("%v.offline", cmdPrefix)
	}

	if err := registerModelTableConfigV2OfflineFlags(depth+1, offlineFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2Realtime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var realtimeFlagName string
	if cmdPrefix == "" {
		realtimeFlagName = "realtime"
	} else {
		realtimeFlagName = fmt.Sprintf("%v.realtime", cmdPrefix)
	}

	if err := registerModelTableConfigV2RealtimeFlags(depth+1, realtimeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2Schema(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var schemaFlagName string
	if cmdPrefix == "" {
		schemaFlagName = "schema"
	} else {
		schemaFlagName = fmt.Sprintf("%v.schema", cmdPrefix)
	}

	if err := registerModelTableConfigV2SchemaFlags(depth+1, schemaFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2TableName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tableNameDescription := `Required. `

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2Flags(depth int, m *models.TableConfigV2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, offlineAdded := retrieveTableConfigV2OfflineFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || offlineAdded

	err, realtimeAdded := retrieveTableConfigV2RealtimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || realtimeAdded

	err, schemaAdded := retrieveTableConfigV2SchemaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || schemaAdded

	err, tableNameAdded := retrieveTableConfigV2TableNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableNameAdded

	return nil, retAdded
}

func retrieveTableConfigV2OfflineFlags(depth int, m *models.TableConfigV2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	offlineFlagName := fmt.Sprintf("%v.offline", cmdPrefix)
	if cmd.Flags().Changed(offlineFlagName) {
		// info: complex object offline TableConfigV2Offline is retrieved outside this Changed() block
	}
	offlineFlagValue := m.Offline
	if swag.IsZero(offlineFlagValue) {
		offlineFlagValue = &models.TableConfigV2Offline{}
	}

	err, offlineAdded := retrieveModelTableConfigV2OfflineFlags(depth+1, offlineFlagValue, offlineFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || offlineAdded
	if offlineAdded {
		m.Offline = offlineFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeFlags(depth int, m *models.TableConfigV2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	realtimeFlagName := fmt.Sprintf("%v.realtime", cmdPrefix)
	if cmd.Flags().Changed(realtimeFlagName) {
		// info: complex object realtime TableConfigV2Realtime is retrieved outside this Changed() block
	}
	realtimeFlagValue := m.Realtime
	if swag.IsZero(realtimeFlagValue) {
		realtimeFlagValue = &models.TableConfigV2Realtime{}
	}

	err, realtimeAdded := retrieveModelTableConfigV2RealtimeFlags(depth+1, realtimeFlagValue, realtimeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || realtimeAdded
	if realtimeAdded {
		m.Realtime = realtimeFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2SchemaFlags(depth int, m *models.TableConfigV2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	schemaFlagName := fmt.Sprintf("%v.schema", cmdPrefix)
	if cmd.Flags().Changed(schemaFlagName) {
		// info: complex object schema TableConfigV2Schema is retrieved outside this Changed() block
	}
	schemaFlagValue := m.Schema
	if swag.IsZero(schemaFlagValue) {
		schemaFlagValue = &models.TableConfigV2Schema{}
	}

	err, schemaAdded := retrieveModelTableConfigV2SchemaFlags(depth+1, schemaFlagValue, schemaFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || schemaAdded
	if schemaAdded {
		m.Schema = schemaFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2TableNameFlags(depth int, m *models.TableConfigV2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableNameFlagName := fmt.Sprintf("%v.tableName", cmdPrefix)
	if cmd.Flags().Changed(tableNameFlagName) {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = &tableNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2Offline

// register flags to command
func registerModelTableConfigV2OfflineFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2OfflineIngestionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineIsDimTable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineSegmentsConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTask(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTenants(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineIngestionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ingestionConfigFlagName string
	if cmdPrefix == "" {
		ingestionConfigFlagName = "ingestionConfig"
	} else {
		ingestionConfigFlagName = fmt.Sprintf("%v.ingestionConfig", cmdPrefix)
	}

	if err := registerModelTableConfigV2OfflineIngestionConfigFlags(depth+1, ingestionConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineIsDimTable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isDimTableDescription := `Required. `

	var isDimTableFlagName string
	if cmdPrefix == "" {
		isDimTableFlagName = "isDimTable"
	} else {
		isDimTableFlagName = fmt.Sprintf("%v.isDimTable", cmdPrefix)
	}

	var isDimTableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isDimTableFlagName, isDimTableFlagDefault, isDimTableDescription)

	return nil
}

func registerTableConfigV2OfflineMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: metadata interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigV2OfflineSegmentsConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var segmentsConfigFlagName string
	if cmdPrefix == "" {
		segmentsConfigFlagName = "segmentsConfig"
	} else {
		segmentsConfigFlagName = fmt.Sprintf("%v.segmentsConfig", cmdPrefix)
	}

	if err := registerModelTableConfigV2OfflineSegmentsConfigFlags(depth+1, segmentsConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineTableIndexConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tableIndexConfigFlagName string
	if cmdPrefix == "" {
		tableIndexConfigFlagName = "tableIndexConfig"
	} else {
		tableIndexConfigFlagName = fmt.Sprintf("%v.tableIndexConfig", cmdPrefix)
	}

	if err := registerModelTableConfigV2OfflineTableIndexConfigFlags(depth+1, tableIndexConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineTableName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tableNameDescription := `Required. `

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}

func registerTableConfigV2OfflineTableType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tableTypeDescription := `Required. `

	var tableTypeFlagName string
	if cmdPrefix == "" {
		tableTypeFlagName = "tableType"
	} else {
		tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
	}

	var tableTypeFlagDefault string

	_ = cmd.PersistentFlags().String(tableTypeFlagName, tableTypeFlagDefault, tableTypeDescription)

	return nil
}

func registerTableConfigV2OfflineTask(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var taskFlagName string
	if cmdPrefix == "" {
		taskFlagName = "task"
	} else {
		taskFlagName = fmt.Sprintf("%v.task", cmdPrefix)
	}

	if err := registerModelTableConfigV2OfflineTaskFlags(depth+1, taskFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineTenants(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tenantsFlagName string
	if cmdPrefix == "" {
		tenantsFlagName = "tenants"
	} else {
		tenantsFlagName = fmt.Sprintf("%v.tenants", cmdPrefix)
	}

	if err := registerModelTableConfigV2OfflineTenantsFlags(depth+1, tenantsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2OfflineFlags(depth int, m *models.TableConfigV2Offline, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ingestionConfigAdded := retrieveTableConfigV2OfflineIngestionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ingestionConfigAdded

	err, isDimTableAdded := retrieveTableConfigV2OfflineIsDimTableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isDimTableAdded

	err, metadataAdded := retrieveTableConfigV2OfflineMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded

	err, segmentsConfigAdded := retrieveTableConfigV2OfflineSegmentsConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentsConfigAdded

	err, tableIndexConfigAdded := retrieveTableConfigV2OfflineTableIndexConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableIndexConfigAdded

	err, tableNameAdded := retrieveTableConfigV2OfflineTableNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableNameAdded

	err, tableTypeAdded := retrieveTableConfigV2OfflineTableTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableTypeAdded

	err, taskAdded := retrieveTableConfigV2OfflineTaskFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskAdded

	err, tenantsAdded := retrieveTableConfigV2OfflineTenantsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tenantsAdded

	return nil, retAdded
}

func retrieveTableConfigV2OfflineIngestionConfigFlags(depth int, m *models.TableConfigV2Offline, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ingestionConfigFlagName := fmt.Sprintf("%v.ingestionConfig", cmdPrefix)
	if cmd.Flags().Changed(ingestionConfigFlagName) {
		// info: complex object ingestionConfig TableConfigV2OfflineIngestionConfig is retrieved outside this Changed() block
	}
	ingestionConfigFlagValue := m.IngestionConfig
	if swag.IsZero(ingestionConfigFlagValue) {
		ingestionConfigFlagValue = &models.TableConfigV2OfflineIngestionConfig{}
	}

	err, ingestionConfigAdded := retrieveModelTableConfigV2OfflineIngestionConfigFlags(depth+1, ingestionConfigFlagValue, ingestionConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ingestionConfigAdded
	if ingestionConfigAdded {
		m.IngestionConfig = ingestionConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineIsDimTableFlags(depth int, m *models.TableConfigV2Offline, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isDimTableFlagName := fmt.Sprintf("%v.isDimTable", cmdPrefix)
	if cmd.Flags().Changed(isDimTableFlagName) {

		var isDimTableFlagName string
		if cmdPrefix == "" {
			isDimTableFlagName = "isDimTable"
		} else {
			isDimTableFlagName = fmt.Sprintf("%v.isDimTable", cmdPrefix)
		}

		isDimTableFlagValue, err := cmd.Flags().GetBool(isDimTableFlagName)
		if err != nil {
			return err, false
		}
		m.IsDimTable = &isDimTableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineMetadataFlags(depth int, m *models.TableConfigV2Offline, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metadataFlagName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(metadataFlagName) {
		// warning: metadata map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineSegmentsConfigFlags(depth int, m *models.TableConfigV2Offline, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentsConfigFlagName := fmt.Sprintf("%v.segmentsConfig", cmdPrefix)
	if cmd.Flags().Changed(segmentsConfigFlagName) {
		// info: complex object segmentsConfig TableConfigV2OfflineSegmentsConfig is retrieved outside this Changed() block
	}
	segmentsConfigFlagValue := m.SegmentsConfig
	if swag.IsZero(segmentsConfigFlagValue) {
		segmentsConfigFlagValue = &models.TableConfigV2OfflineSegmentsConfig{}
	}

	err, segmentsConfigAdded := retrieveModelTableConfigV2OfflineSegmentsConfigFlags(depth+1, segmentsConfigFlagValue, segmentsConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentsConfigAdded
	if segmentsConfigAdded {
		m.SegmentsConfig = segmentsConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigFlags(depth int, m *models.TableConfigV2Offline, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableIndexConfigFlagName := fmt.Sprintf("%v.tableIndexConfig", cmdPrefix)
	if cmd.Flags().Changed(tableIndexConfigFlagName) {
		// info: complex object tableIndexConfig TableConfigV2OfflineTableIndexConfig is retrieved outside this Changed() block
	}
	tableIndexConfigFlagValue := m.TableIndexConfig
	if swag.IsZero(tableIndexConfigFlagValue) {
		tableIndexConfigFlagValue = &models.TableConfigV2OfflineTableIndexConfig{}
	}

	err, tableIndexConfigAdded := retrieveModelTableConfigV2OfflineTableIndexConfigFlags(depth+1, tableIndexConfigFlagValue, tableIndexConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableIndexConfigAdded
	if tableIndexConfigAdded {
		m.TableIndexConfig = tableIndexConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableNameFlags(depth int, m *models.TableConfigV2Offline, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableNameFlagName := fmt.Sprintf("%v.tableName", cmdPrefix)
	if cmd.Flags().Changed(tableNameFlagName) {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = &tableNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableTypeFlags(depth int, m *models.TableConfigV2Offline, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableTypeFlagName := fmt.Sprintf("%v.tableType", cmdPrefix)
	if cmd.Flags().Changed(tableTypeFlagName) {

		var tableTypeFlagName string
		if cmdPrefix == "" {
			tableTypeFlagName = "tableType"
		} else {
			tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
		}

		tableTypeFlagValue, err := cmd.Flags().GetString(tableTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TableType = &tableTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTaskFlags(depth int, m *models.TableConfigV2Offline, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskFlagName := fmt.Sprintf("%v.task", cmdPrefix)
	if cmd.Flags().Changed(taskFlagName) {
		// info: complex object task TableConfigV2OfflineTask is retrieved outside this Changed() block
	}
	taskFlagValue := m.Task
	if swag.IsZero(taskFlagValue) {
		taskFlagValue = &models.TableConfigV2OfflineTask{}
	}

	err, taskAdded := retrieveModelTableConfigV2OfflineTaskFlags(depth+1, taskFlagValue, taskFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskAdded
	if taskAdded {
		m.Task = taskFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTenantsFlags(depth int, m *models.TableConfigV2Offline, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tenantsFlagName := fmt.Sprintf("%v.tenants", cmdPrefix)
	if cmd.Flags().Changed(tenantsFlagName) {
		// info: complex object tenants TableConfigV2OfflineTenants is retrieved outside this Changed() block
	}
	tenantsFlagValue := m.Tenants
	if swag.IsZero(tenantsFlagValue) {
		tenantsFlagValue = &models.TableConfigV2OfflineTenants{}
	}

	err, tenantsAdded := retrieveModelTableConfigV2OfflineTenantsFlags(depth+1, tenantsFlagValue, tenantsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tenantsAdded
	if tenantsAdded {
		m.Tenants = tenantsFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2OfflineIngestionConfig

// register flags to command
func registerModelTableConfigV2OfflineIngestionConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2OfflineIngestionConfigBatchIngestionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineIngestionConfigContinueOnError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineIngestionConfigRowTimeValueCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineIngestionConfigSegmentTimeValueCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineIngestionConfigTransformConfigs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineIngestionConfigBatchIngestionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var batchIngestionConfigFlagName string
	if cmdPrefix == "" {
		batchIngestionConfigFlagName = "batchIngestionConfig"
	} else {
		batchIngestionConfigFlagName = fmt.Sprintf("%v.batchIngestionConfig", cmdPrefix)
	}

	if err := registerModelTableConfigV2OfflineIngestionConfigBatchIngestionConfigFlags(depth+1, batchIngestionConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineIngestionConfigContinueOnError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	continueOnErrorDescription := `Required. `

	var continueOnErrorFlagName string
	if cmdPrefix == "" {
		continueOnErrorFlagName = "continueOnError"
	} else {
		continueOnErrorFlagName = fmt.Sprintf("%v.continueOnError", cmdPrefix)
	}

	var continueOnErrorFlagDefault bool

	_ = cmd.PersistentFlags().Bool(continueOnErrorFlagName, continueOnErrorFlagDefault, continueOnErrorDescription)

	return nil
}

func registerTableConfigV2OfflineIngestionConfigRowTimeValueCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rowTimeValueCheckDescription := `Required. `

	var rowTimeValueCheckFlagName string
	if cmdPrefix == "" {
		rowTimeValueCheckFlagName = "rowTimeValueCheck"
	} else {
		rowTimeValueCheckFlagName = fmt.Sprintf("%v.rowTimeValueCheck", cmdPrefix)
	}

	var rowTimeValueCheckFlagDefault bool

	_ = cmd.PersistentFlags().Bool(rowTimeValueCheckFlagName, rowTimeValueCheckFlagDefault, rowTimeValueCheckDescription)

	return nil
}

func registerTableConfigV2OfflineIngestionConfigSegmentTimeValueCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentTimeValueCheckDescription := `Required. `

	var segmentTimeValueCheckFlagName string
	if cmdPrefix == "" {
		segmentTimeValueCheckFlagName = "segmentTimeValueCheck"
	} else {
		segmentTimeValueCheckFlagName = fmt.Sprintf("%v.segmentTimeValueCheck", cmdPrefix)
	}

	var segmentTimeValueCheckFlagDefault bool

	_ = cmd.PersistentFlags().Bool(segmentTimeValueCheckFlagName, segmentTimeValueCheckFlagDefault, segmentTimeValueCheckDescription)

	return nil
}

func registerTableConfigV2OfflineIngestionConfigTransformConfigs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: transformConfigs []interface{} array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2OfflineIngestionConfigFlags(depth int, m *models.TableConfigV2OfflineIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, batchIngestionConfigAdded := retrieveTableConfigV2OfflineIngestionConfigBatchIngestionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || batchIngestionConfigAdded

	err, continueOnErrorAdded := retrieveTableConfigV2OfflineIngestionConfigContinueOnErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || continueOnErrorAdded

	err, rowTimeValueCheckAdded := retrieveTableConfigV2OfflineIngestionConfigRowTimeValueCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rowTimeValueCheckAdded

	err, segmentTimeValueCheckAdded := retrieveTableConfigV2OfflineIngestionConfigSegmentTimeValueCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentTimeValueCheckAdded

	err, transformConfigsAdded := retrieveTableConfigV2OfflineIngestionConfigTransformConfigsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transformConfigsAdded

	return nil, retAdded
}

func retrieveTableConfigV2OfflineIngestionConfigBatchIngestionConfigFlags(depth int, m *models.TableConfigV2OfflineIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	batchIngestionConfigFlagName := fmt.Sprintf("%v.batchIngestionConfig", cmdPrefix)
	if cmd.Flags().Changed(batchIngestionConfigFlagName) {
		// info: complex object batchIngestionConfig TableConfigV2OfflineIngestionConfigBatchIngestionConfig is retrieved outside this Changed() block
	}
	batchIngestionConfigFlagValue := m.BatchIngestionConfig
	if swag.IsZero(batchIngestionConfigFlagValue) {
		batchIngestionConfigFlagValue = &models.TableConfigV2OfflineIngestionConfigBatchIngestionConfig{}
	}

	err, batchIngestionConfigAdded := retrieveModelTableConfigV2OfflineIngestionConfigBatchIngestionConfigFlags(depth+1, batchIngestionConfigFlagValue, batchIngestionConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || batchIngestionConfigAdded
	if batchIngestionConfigAdded {
		m.BatchIngestionConfig = batchIngestionConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineIngestionConfigContinueOnErrorFlags(depth int, m *models.TableConfigV2OfflineIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	continueOnErrorFlagName := fmt.Sprintf("%v.continueOnError", cmdPrefix)
	if cmd.Flags().Changed(continueOnErrorFlagName) {

		var continueOnErrorFlagName string
		if cmdPrefix == "" {
			continueOnErrorFlagName = "continueOnError"
		} else {
			continueOnErrorFlagName = fmt.Sprintf("%v.continueOnError", cmdPrefix)
		}

		continueOnErrorFlagValue, err := cmd.Flags().GetBool(continueOnErrorFlagName)
		if err != nil {
			return err, false
		}
		m.ContinueOnError = &continueOnErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineIngestionConfigRowTimeValueCheckFlags(depth int, m *models.TableConfigV2OfflineIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rowTimeValueCheckFlagName := fmt.Sprintf("%v.rowTimeValueCheck", cmdPrefix)
	if cmd.Flags().Changed(rowTimeValueCheckFlagName) {

		var rowTimeValueCheckFlagName string
		if cmdPrefix == "" {
			rowTimeValueCheckFlagName = "rowTimeValueCheck"
		} else {
			rowTimeValueCheckFlagName = fmt.Sprintf("%v.rowTimeValueCheck", cmdPrefix)
		}

		rowTimeValueCheckFlagValue, err := cmd.Flags().GetBool(rowTimeValueCheckFlagName)
		if err != nil {
			return err, false
		}
		m.RowTimeValueCheck = &rowTimeValueCheckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineIngestionConfigSegmentTimeValueCheckFlags(depth int, m *models.TableConfigV2OfflineIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentTimeValueCheckFlagName := fmt.Sprintf("%v.segmentTimeValueCheck", cmdPrefix)
	if cmd.Flags().Changed(segmentTimeValueCheckFlagName) {

		var segmentTimeValueCheckFlagName string
		if cmdPrefix == "" {
			segmentTimeValueCheckFlagName = "segmentTimeValueCheck"
		} else {
			segmentTimeValueCheckFlagName = fmt.Sprintf("%v.segmentTimeValueCheck", cmdPrefix)
		}

		segmentTimeValueCheckFlagValue, err := cmd.Flags().GetBool(segmentTimeValueCheckFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentTimeValueCheck = &segmentTimeValueCheckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineIngestionConfigTransformConfigsFlags(depth int, m *models.TableConfigV2OfflineIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transformConfigsFlagName := fmt.Sprintf("%v.transformConfigs", cmdPrefix)
	if cmd.Flags().Changed(transformConfigsFlagName) {
		// warning: transformConfigs array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2OfflineIngestionConfigBatchIngestionConfig

// register flags to command
func registerModelTableConfigV2OfflineIngestionConfigBatchIngestionConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2OfflineIngestionConfigBatchIngestionConfigConsistentDataPush(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineIngestionConfigBatchIngestionConfigSegmentIngestionType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineIngestionConfigBatchIngestionConfigConsistentDataPush(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	consistentDataPushDescription := `Required. `

	var consistentDataPushFlagName string
	if cmdPrefix == "" {
		consistentDataPushFlagName = "consistentDataPush"
	} else {
		consistentDataPushFlagName = fmt.Sprintf("%v.consistentDataPush", cmdPrefix)
	}

	var consistentDataPushFlagDefault bool

	_ = cmd.PersistentFlags().Bool(consistentDataPushFlagName, consistentDataPushFlagDefault, consistentDataPushDescription)

	return nil
}

func registerTableConfigV2OfflineIngestionConfigBatchIngestionConfigSegmentIngestionType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentIngestionTypeDescription := `Required. `

	var segmentIngestionTypeFlagName string
	if cmdPrefix == "" {
		segmentIngestionTypeFlagName = "segmentIngestionType"
	} else {
		segmentIngestionTypeFlagName = fmt.Sprintf("%v.segmentIngestionType", cmdPrefix)
	}

	var segmentIngestionTypeFlagDefault string

	_ = cmd.PersistentFlags().String(segmentIngestionTypeFlagName, segmentIngestionTypeFlagDefault, segmentIngestionTypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2OfflineIngestionConfigBatchIngestionConfigFlags(depth int, m *models.TableConfigV2OfflineIngestionConfigBatchIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, consistentDataPushAdded := retrieveTableConfigV2OfflineIngestionConfigBatchIngestionConfigConsistentDataPushFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || consistentDataPushAdded

	err, segmentIngestionTypeAdded := retrieveTableConfigV2OfflineIngestionConfigBatchIngestionConfigSegmentIngestionTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentIngestionTypeAdded

	return nil, retAdded
}

func retrieveTableConfigV2OfflineIngestionConfigBatchIngestionConfigConsistentDataPushFlags(depth int, m *models.TableConfigV2OfflineIngestionConfigBatchIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	consistentDataPushFlagName := fmt.Sprintf("%v.consistentDataPush", cmdPrefix)
	if cmd.Flags().Changed(consistentDataPushFlagName) {

		var consistentDataPushFlagName string
		if cmdPrefix == "" {
			consistentDataPushFlagName = "consistentDataPush"
		} else {
			consistentDataPushFlagName = fmt.Sprintf("%v.consistentDataPush", cmdPrefix)
		}

		consistentDataPushFlagValue, err := cmd.Flags().GetBool(consistentDataPushFlagName)
		if err != nil {
			return err, false
		}
		m.ConsistentDataPush = &consistentDataPushFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineIngestionConfigBatchIngestionConfigSegmentIngestionTypeFlags(depth int, m *models.TableConfigV2OfflineIngestionConfigBatchIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentIngestionTypeFlagName := fmt.Sprintf("%v.segmentIngestionType", cmdPrefix)
	if cmd.Flags().Changed(segmentIngestionTypeFlagName) {

		var segmentIngestionTypeFlagName string
		if cmdPrefix == "" {
			segmentIngestionTypeFlagName = "segmentIngestionType"
		} else {
			segmentIngestionTypeFlagName = fmt.Sprintf("%v.segmentIngestionType", cmdPrefix)
		}

		segmentIngestionTypeFlagValue, err := cmd.Flags().GetString(segmentIngestionTypeFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentIngestionType = &segmentIngestionTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2OfflineSegmentsConfig

// register flags to command
func registerModelTableConfigV2OfflineSegmentsConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2OfflineSegmentsConfigDeletedSegmentsRetentionPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineSegmentsConfigMinimizeDataMovement(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineSegmentsConfigReplication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineSegmentsConfigRetentionTimeUnit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineSegmentsConfigRetentionTimeValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineSegmentsConfigSchemaName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineSegmentsConfigSegmentAssignmentStrategy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineSegmentsConfigSegmentPushType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineSegmentsConfigTimeColumnName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineSegmentsConfigDeletedSegmentsRetentionPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deletedSegmentsRetentionPeriodDescription := `Required. `

	var deletedSegmentsRetentionPeriodFlagName string
	if cmdPrefix == "" {
		deletedSegmentsRetentionPeriodFlagName = "deletedSegmentsRetentionPeriod"
	} else {
		deletedSegmentsRetentionPeriodFlagName = fmt.Sprintf("%v.deletedSegmentsRetentionPeriod", cmdPrefix)
	}

	var deletedSegmentsRetentionPeriodFlagDefault string

	_ = cmd.PersistentFlags().String(deletedSegmentsRetentionPeriodFlagName, deletedSegmentsRetentionPeriodFlagDefault, deletedSegmentsRetentionPeriodDescription)

	return nil
}

func registerTableConfigV2OfflineSegmentsConfigMinimizeDataMovement(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minimizeDataMovementDescription := `Required. `

	var minimizeDataMovementFlagName string
	if cmdPrefix == "" {
		minimizeDataMovementFlagName = "minimizeDataMovement"
	} else {
		minimizeDataMovementFlagName = fmt.Sprintf("%v.minimizeDataMovement", cmdPrefix)
	}

	var minimizeDataMovementFlagDefault bool

	_ = cmd.PersistentFlags().Bool(minimizeDataMovementFlagName, minimizeDataMovementFlagDefault, minimizeDataMovementDescription)

	return nil
}

func registerTableConfigV2OfflineSegmentsConfigReplication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	replicationDescription := `Required. `

	var replicationFlagName string
	if cmdPrefix == "" {
		replicationFlagName = "replication"
	} else {
		replicationFlagName = fmt.Sprintf("%v.replication", cmdPrefix)
	}

	var replicationFlagDefault string

	_ = cmd.PersistentFlags().String(replicationFlagName, replicationFlagDefault, replicationDescription)

	return nil
}

func registerTableConfigV2OfflineSegmentsConfigRetentionTimeUnit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	retentionTimeUnitDescription := `Required. `

	var retentionTimeUnitFlagName string
	if cmdPrefix == "" {
		retentionTimeUnitFlagName = "retentionTimeUnit"
	} else {
		retentionTimeUnitFlagName = fmt.Sprintf("%v.retentionTimeUnit", cmdPrefix)
	}

	var retentionTimeUnitFlagDefault string

	_ = cmd.PersistentFlags().String(retentionTimeUnitFlagName, retentionTimeUnitFlagDefault, retentionTimeUnitDescription)

	return nil
}

func registerTableConfigV2OfflineSegmentsConfigRetentionTimeValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	retentionTimeValueDescription := `Required. `

	var retentionTimeValueFlagName string
	if cmdPrefix == "" {
		retentionTimeValueFlagName = "retentionTimeValue"
	} else {
		retentionTimeValueFlagName = fmt.Sprintf("%v.retentionTimeValue", cmdPrefix)
	}

	var retentionTimeValueFlagDefault string

	_ = cmd.PersistentFlags().String(retentionTimeValueFlagName, retentionTimeValueFlagDefault, retentionTimeValueDescription)

	return nil
}

func registerTableConfigV2OfflineSegmentsConfigSchemaName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	schemaNameDescription := `Required. `

	var schemaNameFlagName string
	if cmdPrefix == "" {
		schemaNameFlagName = "schemaName"
	} else {
		schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
	}

	var schemaNameFlagDefault string

	_ = cmd.PersistentFlags().String(schemaNameFlagName, schemaNameFlagDefault, schemaNameDescription)

	return nil
}

func registerTableConfigV2OfflineSegmentsConfigSegmentAssignmentStrategy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentAssignmentStrategyDescription := `Required. `

	var segmentAssignmentStrategyFlagName string
	if cmdPrefix == "" {
		segmentAssignmentStrategyFlagName = "segmentAssignmentStrategy"
	} else {
		segmentAssignmentStrategyFlagName = fmt.Sprintf("%v.segmentAssignmentStrategy", cmdPrefix)
	}

	var segmentAssignmentStrategyFlagDefault string

	_ = cmd.PersistentFlags().String(segmentAssignmentStrategyFlagName, segmentAssignmentStrategyFlagDefault, segmentAssignmentStrategyDescription)

	return nil
}

func registerTableConfigV2OfflineSegmentsConfigSegmentPushType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentPushTypeDescription := `Required. `

	var segmentPushTypeFlagName string
	if cmdPrefix == "" {
		segmentPushTypeFlagName = "segmentPushType"
	} else {
		segmentPushTypeFlagName = fmt.Sprintf("%v.segmentPushType", cmdPrefix)
	}

	var segmentPushTypeFlagDefault string

	_ = cmd.PersistentFlags().String(segmentPushTypeFlagName, segmentPushTypeFlagDefault, segmentPushTypeDescription)

	return nil
}

func registerTableConfigV2OfflineSegmentsConfigTimeColumnName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeColumnNameDescription := `Required. `

	var timeColumnNameFlagName string
	if cmdPrefix == "" {
		timeColumnNameFlagName = "timeColumnName"
	} else {
		timeColumnNameFlagName = fmt.Sprintf("%v.timeColumnName", cmdPrefix)
	}

	var timeColumnNameFlagDefault string

	_ = cmd.PersistentFlags().String(timeColumnNameFlagName, timeColumnNameFlagDefault, timeColumnNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2OfflineSegmentsConfigFlags(depth int, m *models.TableConfigV2OfflineSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deletedSegmentsRetentionPeriodAdded := retrieveTableConfigV2OfflineSegmentsConfigDeletedSegmentsRetentionPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deletedSegmentsRetentionPeriodAdded

	err, minimizeDataMovementAdded := retrieveTableConfigV2OfflineSegmentsConfigMinimizeDataMovementFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minimizeDataMovementAdded

	err, replicationAdded := retrieveTableConfigV2OfflineSegmentsConfigReplicationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || replicationAdded

	err, retentionTimeUnitAdded := retrieveTableConfigV2OfflineSegmentsConfigRetentionTimeUnitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || retentionTimeUnitAdded

	err, retentionTimeValueAdded := retrieveTableConfigV2OfflineSegmentsConfigRetentionTimeValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || retentionTimeValueAdded

	err, schemaNameAdded := retrieveTableConfigV2OfflineSegmentsConfigSchemaNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || schemaNameAdded

	err, segmentAssignmentStrategyAdded := retrieveTableConfigV2OfflineSegmentsConfigSegmentAssignmentStrategyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentAssignmentStrategyAdded

	err, segmentPushTypeAdded := retrieveTableConfigV2OfflineSegmentsConfigSegmentPushTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentPushTypeAdded

	err, timeColumnNameAdded := retrieveTableConfigV2OfflineSegmentsConfigTimeColumnNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeColumnNameAdded

	return nil, retAdded
}

func retrieveTableConfigV2OfflineSegmentsConfigDeletedSegmentsRetentionPeriodFlags(depth int, m *models.TableConfigV2OfflineSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deletedSegmentsRetentionPeriodFlagName := fmt.Sprintf("%v.deletedSegmentsRetentionPeriod", cmdPrefix)
	if cmd.Flags().Changed(deletedSegmentsRetentionPeriodFlagName) {

		var deletedSegmentsRetentionPeriodFlagName string
		if cmdPrefix == "" {
			deletedSegmentsRetentionPeriodFlagName = "deletedSegmentsRetentionPeriod"
		} else {
			deletedSegmentsRetentionPeriodFlagName = fmt.Sprintf("%v.deletedSegmentsRetentionPeriod", cmdPrefix)
		}

		deletedSegmentsRetentionPeriodFlagValue, err := cmd.Flags().GetString(deletedSegmentsRetentionPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.DeletedSegmentsRetentionPeriod = &deletedSegmentsRetentionPeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineSegmentsConfigMinimizeDataMovementFlags(depth int, m *models.TableConfigV2OfflineSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minimizeDataMovementFlagName := fmt.Sprintf("%v.minimizeDataMovement", cmdPrefix)
	if cmd.Flags().Changed(minimizeDataMovementFlagName) {

		var minimizeDataMovementFlagName string
		if cmdPrefix == "" {
			minimizeDataMovementFlagName = "minimizeDataMovement"
		} else {
			minimizeDataMovementFlagName = fmt.Sprintf("%v.minimizeDataMovement", cmdPrefix)
		}

		minimizeDataMovementFlagValue, err := cmd.Flags().GetBool(minimizeDataMovementFlagName)
		if err != nil {
			return err, false
		}
		m.MinimizeDataMovement = &minimizeDataMovementFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineSegmentsConfigReplicationFlags(depth int, m *models.TableConfigV2OfflineSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	replicationFlagName := fmt.Sprintf("%v.replication", cmdPrefix)
	if cmd.Flags().Changed(replicationFlagName) {

		var replicationFlagName string
		if cmdPrefix == "" {
			replicationFlagName = "replication"
		} else {
			replicationFlagName = fmt.Sprintf("%v.replication", cmdPrefix)
		}

		replicationFlagValue, err := cmd.Flags().GetString(replicationFlagName)
		if err != nil {
			return err, false
		}
		m.Replication = &replicationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineSegmentsConfigRetentionTimeUnitFlags(depth int, m *models.TableConfigV2OfflineSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	retentionTimeUnitFlagName := fmt.Sprintf("%v.retentionTimeUnit", cmdPrefix)
	if cmd.Flags().Changed(retentionTimeUnitFlagName) {

		var retentionTimeUnitFlagName string
		if cmdPrefix == "" {
			retentionTimeUnitFlagName = "retentionTimeUnit"
		} else {
			retentionTimeUnitFlagName = fmt.Sprintf("%v.retentionTimeUnit", cmdPrefix)
		}

		retentionTimeUnitFlagValue, err := cmd.Flags().GetString(retentionTimeUnitFlagName)
		if err != nil {
			return err, false
		}
		m.RetentionTimeUnit = &retentionTimeUnitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineSegmentsConfigRetentionTimeValueFlags(depth int, m *models.TableConfigV2OfflineSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	retentionTimeValueFlagName := fmt.Sprintf("%v.retentionTimeValue", cmdPrefix)
	if cmd.Flags().Changed(retentionTimeValueFlagName) {

		var retentionTimeValueFlagName string
		if cmdPrefix == "" {
			retentionTimeValueFlagName = "retentionTimeValue"
		} else {
			retentionTimeValueFlagName = fmt.Sprintf("%v.retentionTimeValue", cmdPrefix)
		}

		retentionTimeValueFlagValue, err := cmd.Flags().GetString(retentionTimeValueFlagName)
		if err != nil {
			return err, false
		}
		m.RetentionTimeValue = &retentionTimeValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineSegmentsConfigSchemaNameFlags(depth int, m *models.TableConfigV2OfflineSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	schemaNameFlagName := fmt.Sprintf("%v.schemaName", cmdPrefix)
	if cmd.Flags().Changed(schemaNameFlagName) {

		var schemaNameFlagName string
		if cmdPrefix == "" {
			schemaNameFlagName = "schemaName"
		} else {
			schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
		}

		schemaNameFlagValue, err := cmd.Flags().GetString(schemaNameFlagName)
		if err != nil {
			return err, false
		}
		m.SchemaName = &schemaNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineSegmentsConfigSegmentAssignmentStrategyFlags(depth int, m *models.TableConfigV2OfflineSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentAssignmentStrategyFlagName := fmt.Sprintf("%v.segmentAssignmentStrategy", cmdPrefix)
	if cmd.Flags().Changed(segmentAssignmentStrategyFlagName) {

		var segmentAssignmentStrategyFlagName string
		if cmdPrefix == "" {
			segmentAssignmentStrategyFlagName = "segmentAssignmentStrategy"
		} else {
			segmentAssignmentStrategyFlagName = fmt.Sprintf("%v.segmentAssignmentStrategy", cmdPrefix)
		}

		segmentAssignmentStrategyFlagValue, err := cmd.Flags().GetString(segmentAssignmentStrategyFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentAssignmentStrategy = &segmentAssignmentStrategyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineSegmentsConfigSegmentPushTypeFlags(depth int, m *models.TableConfigV2OfflineSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentPushTypeFlagName := fmt.Sprintf("%v.segmentPushType", cmdPrefix)
	if cmd.Flags().Changed(segmentPushTypeFlagName) {

		var segmentPushTypeFlagName string
		if cmdPrefix == "" {
			segmentPushTypeFlagName = "segmentPushType"
		} else {
			segmentPushTypeFlagName = fmt.Sprintf("%v.segmentPushType", cmdPrefix)
		}

		segmentPushTypeFlagValue, err := cmd.Flags().GetString(segmentPushTypeFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentPushType = &segmentPushTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineSegmentsConfigTimeColumnNameFlags(depth int, m *models.TableConfigV2OfflineSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeColumnNameFlagName := fmt.Sprintf("%v.timeColumnName", cmdPrefix)
	if cmd.Flags().Changed(timeColumnNameFlagName) {

		var timeColumnNameFlagName string
		if cmdPrefix == "" {
			timeColumnNameFlagName = "timeColumnName"
		} else {
			timeColumnNameFlagName = fmt.Sprintf("%v.timeColumnName", cmdPrefix)
		}

		timeColumnNameFlagValue, err := cmd.Flags().GetString(timeColumnNameFlagName)
		if err != nil {
			return err, false
		}
		m.TimeColumnName = &timeColumnNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2OfflineTableIndexConfig

// register flags to command
func registerModelTableConfigV2OfflineTableIndexConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2OfflineTableIndexConfigAggregateMetrics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfigAutoGeneratedInvertedIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfigCreateInvertedIndexDuringSegmentGeneration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfigEnableDefaultStarTree(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfigEnableDynamicStarTreeCreation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfigInvertedIndexColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfigLoadMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfigNoDictionaryColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfigNoDictionarySizeRatioThreshold(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfigNullHandlingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfigOptimizeDictionary(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfigOptimizeDictionaryForMetrics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfigRangeIndexVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTableIndexConfigVarLengthDictionaryColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigAggregateMetrics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aggregateMetricsDescription := `Required. `

	var aggregateMetricsFlagName string
	if cmdPrefix == "" {
		aggregateMetricsFlagName = "aggregateMetrics"
	} else {
		aggregateMetricsFlagName = fmt.Sprintf("%v.aggregateMetrics", cmdPrefix)
	}

	var aggregateMetricsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(aggregateMetricsFlagName, aggregateMetricsFlagDefault, aggregateMetricsDescription)

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigAutoGeneratedInvertedIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	autoGeneratedInvertedIndexDescription := `Required. `

	var autoGeneratedInvertedIndexFlagName string
	if cmdPrefix == "" {
		autoGeneratedInvertedIndexFlagName = "autoGeneratedInvertedIndex"
	} else {
		autoGeneratedInvertedIndexFlagName = fmt.Sprintf("%v.autoGeneratedInvertedIndex", cmdPrefix)
	}

	var autoGeneratedInvertedIndexFlagDefault bool

	_ = cmd.PersistentFlags().Bool(autoGeneratedInvertedIndexFlagName, autoGeneratedInvertedIndexFlagDefault, autoGeneratedInvertedIndexDescription)

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigCreateInvertedIndexDuringSegmentGeneration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createInvertedIndexDuringSegmentGenerationDescription := `Required. `

	var createInvertedIndexDuringSegmentGenerationFlagName string
	if cmdPrefix == "" {
		createInvertedIndexDuringSegmentGenerationFlagName = "createInvertedIndexDuringSegmentGeneration"
	} else {
		createInvertedIndexDuringSegmentGenerationFlagName = fmt.Sprintf("%v.createInvertedIndexDuringSegmentGeneration", cmdPrefix)
	}

	var createInvertedIndexDuringSegmentGenerationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(createInvertedIndexDuringSegmentGenerationFlagName, createInvertedIndexDuringSegmentGenerationFlagDefault, createInvertedIndexDuringSegmentGenerationDescription)

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigEnableDefaultStarTree(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableDefaultStarTreeDescription := `Required. `

	var enableDefaultStarTreeFlagName string
	if cmdPrefix == "" {
		enableDefaultStarTreeFlagName = "enableDefaultStarTree"
	} else {
		enableDefaultStarTreeFlagName = fmt.Sprintf("%v.enableDefaultStarTree", cmdPrefix)
	}

	var enableDefaultStarTreeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableDefaultStarTreeFlagName, enableDefaultStarTreeFlagDefault, enableDefaultStarTreeDescription)

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigEnableDynamicStarTreeCreation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableDynamicStarTreeCreationDescription := `Required. `

	var enableDynamicStarTreeCreationFlagName string
	if cmdPrefix == "" {
		enableDynamicStarTreeCreationFlagName = "enableDynamicStarTreeCreation"
	} else {
		enableDynamicStarTreeCreationFlagName = fmt.Sprintf("%v.enableDynamicStarTreeCreation", cmdPrefix)
	}

	var enableDynamicStarTreeCreationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableDynamicStarTreeCreationFlagName, enableDynamicStarTreeCreationFlagDefault, enableDynamicStarTreeCreationDescription)

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigInvertedIndexColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: invertedIndexColumns []interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigLoadMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	loadModeDescription := `Required. `

	var loadModeFlagName string
	if cmdPrefix == "" {
		loadModeFlagName = "loadMode"
	} else {
		loadModeFlagName = fmt.Sprintf("%v.loadMode", cmdPrefix)
	}

	var loadModeFlagDefault string

	_ = cmd.PersistentFlags().String(loadModeFlagName, loadModeFlagDefault, loadModeDescription)

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigNoDictionaryColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: noDictionaryColumns []interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigNoDictionarySizeRatioThreshold(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noDictionarySizeRatioThresholdDescription := `Required. `

	var noDictionarySizeRatioThresholdFlagName string
	if cmdPrefix == "" {
		noDictionarySizeRatioThresholdFlagName = "noDictionarySizeRatioThreshold"
	} else {
		noDictionarySizeRatioThresholdFlagName = fmt.Sprintf("%v.noDictionarySizeRatioThreshold", cmdPrefix)
	}

	var noDictionarySizeRatioThresholdFlagDefault float64

	_ = cmd.PersistentFlags().Float64(noDictionarySizeRatioThresholdFlagName, noDictionarySizeRatioThresholdFlagDefault, noDictionarySizeRatioThresholdDescription)

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigNullHandlingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nullHandlingEnabledDescription := `Required. `

	var nullHandlingEnabledFlagName string
	if cmdPrefix == "" {
		nullHandlingEnabledFlagName = "nullHandlingEnabled"
	} else {
		nullHandlingEnabledFlagName = fmt.Sprintf("%v.nullHandlingEnabled", cmdPrefix)
	}

	var nullHandlingEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(nullHandlingEnabledFlagName, nullHandlingEnabledFlagDefault, nullHandlingEnabledDescription)

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigOptimizeDictionary(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	optimizeDictionaryDescription := `Required. `

	var optimizeDictionaryFlagName string
	if cmdPrefix == "" {
		optimizeDictionaryFlagName = "optimizeDictionary"
	} else {
		optimizeDictionaryFlagName = fmt.Sprintf("%v.optimizeDictionary", cmdPrefix)
	}

	var optimizeDictionaryFlagDefault bool

	_ = cmd.PersistentFlags().Bool(optimizeDictionaryFlagName, optimizeDictionaryFlagDefault, optimizeDictionaryDescription)

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigOptimizeDictionaryForMetrics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	optimizeDictionaryForMetricsDescription := `Required. `

	var optimizeDictionaryForMetricsFlagName string
	if cmdPrefix == "" {
		optimizeDictionaryForMetricsFlagName = "optimizeDictionaryForMetrics"
	} else {
		optimizeDictionaryForMetricsFlagName = fmt.Sprintf("%v.optimizeDictionaryForMetrics", cmdPrefix)
	}

	var optimizeDictionaryForMetricsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(optimizeDictionaryForMetricsFlagName, optimizeDictionaryForMetricsFlagDefault, optimizeDictionaryForMetricsDescription)

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigRangeIndexVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rangeIndexVersionDescription := `Required. `

	var rangeIndexVersionFlagName string
	if cmdPrefix == "" {
		rangeIndexVersionFlagName = "rangeIndexVersion"
	} else {
		rangeIndexVersionFlagName = fmt.Sprintf("%v.rangeIndexVersion", cmdPrefix)
	}

	var rangeIndexVersionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(rangeIndexVersionFlagName, rangeIndexVersionFlagDefault, rangeIndexVersionDescription)

	return nil
}

func registerTableConfigV2OfflineTableIndexConfigVarLengthDictionaryColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: varLengthDictionaryColumns []interface{} array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2OfflineTableIndexConfigFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, aggregateMetricsAdded := retrieveTableConfigV2OfflineTableIndexConfigAggregateMetricsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aggregateMetricsAdded

	err, autoGeneratedInvertedIndexAdded := retrieveTableConfigV2OfflineTableIndexConfigAutoGeneratedInvertedIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoGeneratedInvertedIndexAdded

	err, createInvertedIndexDuringSegmentGenerationAdded := retrieveTableConfigV2OfflineTableIndexConfigCreateInvertedIndexDuringSegmentGenerationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createInvertedIndexDuringSegmentGenerationAdded

	err, enableDefaultStarTreeAdded := retrieveTableConfigV2OfflineTableIndexConfigEnableDefaultStarTreeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableDefaultStarTreeAdded

	err, enableDynamicStarTreeCreationAdded := retrieveTableConfigV2OfflineTableIndexConfigEnableDynamicStarTreeCreationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableDynamicStarTreeCreationAdded

	err, invertedIndexColumnsAdded := retrieveTableConfigV2OfflineTableIndexConfigInvertedIndexColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || invertedIndexColumnsAdded

	err, loadModeAdded := retrieveTableConfigV2OfflineTableIndexConfigLoadModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || loadModeAdded

	err, noDictionaryColumnsAdded := retrieveTableConfigV2OfflineTableIndexConfigNoDictionaryColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noDictionaryColumnsAdded

	err, noDictionarySizeRatioThresholdAdded := retrieveTableConfigV2OfflineTableIndexConfigNoDictionarySizeRatioThresholdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noDictionarySizeRatioThresholdAdded

	err, nullHandlingEnabledAdded := retrieveTableConfigV2OfflineTableIndexConfigNullHandlingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nullHandlingEnabledAdded

	err, optimizeDictionaryAdded := retrieveTableConfigV2OfflineTableIndexConfigOptimizeDictionaryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || optimizeDictionaryAdded

	err, optimizeDictionaryForMetricsAdded := retrieveTableConfigV2OfflineTableIndexConfigOptimizeDictionaryForMetricsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || optimizeDictionaryForMetricsAdded

	err, rangeIndexVersionAdded := retrieveTableConfigV2OfflineTableIndexConfigRangeIndexVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rangeIndexVersionAdded

	err, varLengthDictionaryColumnsAdded := retrieveTableConfigV2OfflineTableIndexConfigVarLengthDictionaryColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varLengthDictionaryColumnsAdded

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigAggregateMetricsFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aggregateMetricsFlagName := fmt.Sprintf("%v.aggregateMetrics", cmdPrefix)
	if cmd.Flags().Changed(aggregateMetricsFlagName) {

		var aggregateMetricsFlagName string
		if cmdPrefix == "" {
			aggregateMetricsFlagName = "aggregateMetrics"
		} else {
			aggregateMetricsFlagName = fmt.Sprintf("%v.aggregateMetrics", cmdPrefix)
		}

		aggregateMetricsFlagValue, err := cmd.Flags().GetBool(aggregateMetricsFlagName)
		if err != nil {
			return err, false
		}
		m.AggregateMetrics = &aggregateMetricsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigAutoGeneratedInvertedIndexFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoGeneratedInvertedIndexFlagName := fmt.Sprintf("%v.autoGeneratedInvertedIndex", cmdPrefix)
	if cmd.Flags().Changed(autoGeneratedInvertedIndexFlagName) {

		var autoGeneratedInvertedIndexFlagName string
		if cmdPrefix == "" {
			autoGeneratedInvertedIndexFlagName = "autoGeneratedInvertedIndex"
		} else {
			autoGeneratedInvertedIndexFlagName = fmt.Sprintf("%v.autoGeneratedInvertedIndex", cmdPrefix)
		}

		autoGeneratedInvertedIndexFlagValue, err := cmd.Flags().GetBool(autoGeneratedInvertedIndexFlagName)
		if err != nil {
			return err, false
		}
		m.AutoGeneratedInvertedIndex = &autoGeneratedInvertedIndexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigCreateInvertedIndexDuringSegmentGenerationFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createInvertedIndexDuringSegmentGenerationFlagName := fmt.Sprintf("%v.createInvertedIndexDuringSegmentGeneration", cmdPrefix)
	if cmd.Flags().Changed(createInvertedIndexDuringSegmentGenerationFlagName) {

		var createInvertedIndexDuringSegmentGenerationFlagName string
		if cmdPrefix == "" {
			createInvertedIndexDuringSegmentGenerationFlagName = "createInvertedIndexDuringSegmentGeneration"
		} else {
			createInvertedIndexDuringSegmentGenerationFlagName = fmt.Sprintf("%v.createInvertedIndexDuringSegmentGeneration", cmdPrefix)
		}

		createInvertedIndexDuringSegmentGenerationFlagValue, err := cmd.Flags().GetBool(createInvertedIndexDuringSegmentGenerationFlagName)
		if err != nil {
			return err, false
		}
		m.CreateInvertedIndexDuringSegmentGeneration = &createInvertedIndexDuringSegmentGenerationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigEnableDefaultStarTreeFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableDefaultStarTreeFlagName := fmt.Sprintf("%v.enableDefaultStarTree", cmdPrefix)
	if cmd.Flags().Changed(enableDefaultStarTreeFlagName) {

		var enableDefaultStarTreeFlagName string
		if cmdPrefix == "" {
			enableDefaultStarTreeFlagName = "enableDefaultStarTree"
		} else {
			enableDefaultStarTreeFlagName = fmt.Sprintf("%v.enableDefaultStarTree", cmdPrefix)
		}

		enableDefaultStarTreeFlagValue, err := cmd.Flags().GetBool(enableDefaultStarTreeFlagName)
		if err != nil {
			return err, false
		}
		m.EnableDefaultStarTree = &enableDefaultStarTreeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigEnableDynamicStarTreeCreationFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableDynamicStarTreeCreationFlagName := fmt.Sprintf("%v.enableDynamicStarTreeCreation", cmdPrefix)
	if cmd.Flags().Changed(enableDynamicStarTreeCreationFlagName) {

		var enableDynamicStarTreeCreationFlagName string
		if cmdPrefix == "" {
			enableDynamicStarTreeCreationFlagName = "enableDynamicStarTreeCreation"
		} else {
			enableDynamicStarTreeCreationFlagName = fmt.Sprintf("%v.enableDynamicStarTreeCreation", cmdPrefix)
		}

		enableDynamicStarTreeCreationFlagValue, err := cmd.Flags().GetBool(enableDynamicStarTreeCreationFlagName)
		if err != nil {
			return err, false
		}
		m.EnableDynamicStarTreeCreation = &enableDynamicStarTreeCreationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigInvertedIndexColumnsFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	invertedIndexColumnsFlagName := fmt.Sprintf("%v.invertedIndexColumns", cmdPrefix)
	if cmd.Flags().Changed(invertedIndexColumnsFlagName) {
		// warning: invertedIndexColumns array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigLoadModeFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	loadModeFlagName := fmt.Sprintf("%v.loadMode", cmdPrefix)
	if cmd.Flags().Changed(loadModeFlagName) {

		var loadModeFlagName string
		if cmdPrefix == "" {
			loadModeFlagName = "loadMode"
		} else {
			loadModeFlagName = fmt.Sprintf("%v.loadMode", cmdPrefix)
		}

		loadModeFlagValue, err := cmd.Flags().GetString(loadModeFlagName)
		if err != nil {
			return err, false
		}
		m.LoadMode = &loadModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigNoDictionaryColumnsFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noDictionaryColumnsFlagName := fmt.Sprintf("%v.noDictionaryColumns", cmdPrefix)
	if cmd.Flags().Changed(noDictionaryColumnsFlagName) {
		// warning: noDictionaryColumns array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigNoDictionarySizeRatioThresholdFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noDictionarySizeRatioThresholdFlagName := fmt.Sprintf("%v.noDictionarySizeRatioThreshold", cmdPrefix)
	if cmd.Flags().Changed(noDictionarySizeRatioThresholdFlagName) {

		var noDictionarySizeRatioThresholdFlagName string
		if cmdPrefix == "" {
			noDictionarySizeRatioThresholdFlagName = "noDictionarySizeRatioThreshold"
		} else {
			noDictionarySizeRatioThresholdFlagName = fmt.Sprintf("%v.noDictionarySizeRatioThreshold", cmdPrefix)
		}

		noDictionarySizeRatioThresholdFlagValue, err := cmd.Flags().GetFloat64(noDictionarySizeRatioThresholdFlagName)
		if err != nil {
			return err, false
		}
		m.NoDictionarySizeRatioThreshold = &noDictionarySizeRatioThresholdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigNullHandlingEnabledFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nullHandlingEnabledFlagName := fmt.Sprintf("%v.nullHandlingEnabled", cmdPrefix)
	if cmd.Flags().Changed(nullHandlingEnabledFlagName) {

		var nullHandlingEnabledFlagName string
		if cmdPrefix == "" {
			nullHandlingEnabledFlagName = "nullHandlingEnabled"
		} else {
			nullHandlingEnabledFlagName = fmt.Sprintf("%v.nullHandlingEnabled", cmdPrefix)
		}

		nullHandlingEnabledFlagValue, err := cmd.Flags().GetBool(nullHandlingEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.NullHandlingEnabled = &nullHandlingEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigOptimizeDictionaryFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	optimizeDictionaryFlagName := fmt.Sprintf("%v.optimizeDictionary", cmdPrefix)
	if cmd.Flags().Changed(optimizeDictionaryFlagName) {

		var optimizeDictionaryFlagName string
		if cmdPrefix == "" {
			optimizeDictionaryFlagName = "optimizeDictionary"
		} else {
			optimizeDictionaryFlagName = fmt.Sprintf("%v.optimizeDictionary", cmdPrefix)
		}

		optimizeDictionaryFlagValue, err := cmd.Flags().GetBool(optimizeDictionaryFlagName)
		if err != nil {
			return err, false
		}
		m.OptimizeDictionary = &optimizeDictionaryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigOptimizeDictionaryForMetricsFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	optimizeDictionaryForMetricsFlagName := fmt.Sprintf("%v.optimizeDictionaryForMetrics", cmdPrefix)
	if cmd.Flags().Changed(optimizeDictionaryForMetricsFlagName) {

		var optimizeDictionaryForMetricsFlagName string
		if cmdPrefix == "" {
			optimizeDictionaryForMetricsFlagName = "optimizeDictionaryForMetrics"
		} else {
			optimizeDictionaryForMetricsFlagName = fmt.Sprintf("%v.optimizeDictionaryForMetrics", cmdPrefix)
		}

		optimizeDictionaryForMetricsFlagValue, err := cmd.Flags().GetBool(optimizeDictionaryForMetricsFlagName)
		if err != nil {
			return err, false
		}
		m.OptimizeDictionaryForMetrics = &optimizeDictionaryForMetricsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigRangeIndexVersionFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rangeIndexVersionFlagName := fmt.Sprintf("%v.rangeIndexVersion", cmdPrefix)
	if cmd.Flags().Changed(rangeIndexVersionFlagName) {

		var rangeIndexVersionFlagName string
		if cmdPrefix == "" {
			rangeIndexVersionFlagName = "rangeIndexVersion"
		} else {
			rangeIndexVersionFlagName = fmt.Sprintf("%v.rangeIndexVersion", cmdPrefix)
		}

		rangeIndexVersionFlagValue, err := cmd.Flags().GetInt64(rangeIndexVersionFlagName)
		if err != nil {
			return err, false
		}
		m.RangeIndexVersion = &rangeIndexVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTableIndexConfigVarLengthDictionaryColumnsFlags(depth int, m *models.TableConfigV2OfflineTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varLengthDictionaryColumnsFlagName := fmt.Sprintf("%v.varLengthDictionaryColumns", cmdPrefix)
	if cmd.Flags().Changed(varLengthDictionaryColumnsFlagName) {
		// warning: varLengthDictionaryColumns array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2OfflineTask

// register flags to command
func registerModelTableConfigV2OfflineTaskFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2OfflineTaskTaskTypeConfigsMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineTaskTaskTypeConfigsMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var taskTypeConfigsMapFlagName string
	if cmdPrefix == "" {
		taskTypeConfigsMapFlagName = "taskTypeConfigsMap"
	} else {
		taskTypeConfigsMapFlagName = fmt.Sprintf("%v.taskTypeConfigsMap", cmdPrefix)
	}

	if err := registerModelTableConfigV2OfflineTaskTaskTypeConfigsMapFlags(depth+1, taskTypeConfigsMapFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2OfflineTaskFlags(depth int, m *models.TableConfigV2OfflineTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, taskTypeConfigsMapAdded := retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskTypeConfigsMapAdded

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFlags(depth int, m *models.TableConfigV2OfflineTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskTypeConfigsMapFlagName := fmt.Sprintf("%v.taskTypeConfigsMap", cmdPrefix)
	if cmd.Flags().Changed(taskTypeConfigsMapFlagName) {
		// info: complex object taskTypeConfigsMap TableConfigV2OfflineTaskTaskTypeConfigsMap is retrieved outside this Changed() block
	}
	taskTypeConfigsMapFlagValue := m.TaskTypeConfigsMap
	if swag.IsZero(taskTypeConfigsMapFlagValue) {
		taskTypeConfigsMapFlagValue = &models.TableConfigV2OfflineTaskTaskTypeConfigsMap{}
	}

	err, taskTypeConfigsMapAdded := retrieveModelTableConfigV2OfflineTaskTaskTypeConfigsMapFlags(depth+1, taskTypeConfigsMapFlagValue, taskTypeConfigsMapFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskTypeConfigsMapAdded
	if taskTypeConfigsMapAdded {
		m.TaskTypeConfigsMap = taskTypeConfigsMapFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2OfflineTaskTaskTypeConfigsMap

// register flags to command
func registerModelTableConfigV2OfflineTaskTaskTypeConfigsMapFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var fileIngestionTaskFlagName string
	if cmdPrefix == "" {
		fileIngestionTaskFlagName = "FileIngestionTask"
	} else {
		fileIngestionTaskFlagName = fmt.Sprintf("%v.FileIngestionTask", cmdPrefix)
	}

	if err := registerModelTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskFlags(depth+1, fileIngestionTaskFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2OfflineTaskTaskTypeConfigsMapFlags(depth int, m *models.TableConfigV2OfflineTaskTaskTypeConfigsMap, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, fileIngestionTaskAdded := retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileIngestionTaskAdded

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskFlags(depth int, m *models.TableConfigV2OfflineTaskTaskTypeConfigsMap, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fileIngestionTaskFlagName := fmt.Sprintf("%v.FileIngestionTask", cmdPrefix)
	if cmd.Flags().Changed(fileIngestionTaskFlagName) {
		// info: complex object FileIngestionTask TableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask is retrieved outside this Changed() block
	}
	fileIngestionTaskFlagValue := m.FileIngestionTask
	if swag.IsZero(fileIngestionTaskFlagValue) {
		fileIngestionTaskFlagValue = &models.TableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask{}
	}

	err, fileIngestionTaskAdded := retrieveModelTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskFlags(depth+1, fileIngestionTaskFlagValue, fileIngestionTaskFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fileIngestionTaskAdded
	if fileIngestionTaskAdded {
		m.FileIngestionTask = fileIngestionTaskFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask

// register flags to command
func registerModelTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsClassName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsPropAccessKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsPropRegion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsPropSecretKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputDirURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskSchedule(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskTableMaxNumTasks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskTaskMaxDataSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsClassName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	inputFsClassNameDescription := `Required. `

	var inputFsClassNameFlagName string
	if cmdPrefix == "" {
		inputFsClassNameFlagName = "input.fs.className"
	} else {
		inputFsClassNameFlagName = fmt.Sprintf("%v.input.fs.className", cmdPrefix)
	}

	var inputFsClassNameFlagDefault string

	_ = cmd.PersistentFlags().String(inputFsClassNameFlagName, inputFsClassNameFlagDefault, inputFsClassNameDescription)

	return nil
}

func registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsPropAccessKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	inputFsPropAccessKeyDescription := `Required. `

	var inputFsPropAccessKeyFlagName string
	if cmdPrefix == "" {
		inputFsPropAccessKeyFlagName = "input.fs.prop.accessKey"
	} else {
		inputFsPropAccessKeyFlagName = fmt.Sprintf("%v.input.fs.prop.accessKey", cmdPrefix)
	}

	var inputFsPropAccessKeyFlagDefault string

	_ = cmd.PersistentFlags().String(inputFsPropAccessKeyFlagName, inputFsPropAccessKeyFlagDefault, inputFsPropAccessKeyDescription)

	return nil
}

func registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsPropRegion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	inputFsPropRegionDescription := `Required. `

	var inputFsPropRegionFlagName string
	if cmdPrefix == "" {
		inputFsPropRegionFlagName = "input.fs.prop.region"
	} else {
		inputFsPropRegionFlagName = fmt.Sprintf("%v.input.fs.prop.region", cmdPrefix)
	}

	var inputFsPropRegionFlagDefault string

	_ = cmd.PersistentFlags().String(inputFsPropRegionFlagName, inputFsPropRegionFlagDefault, inputFsPropRegionDescription)

	return nil
}

func registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsPropSecretKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	inputFsPropSecretKeyDescription := `Required. `

	var inputFsPropSecretKeyFlagName string
	if cmdPrefix == "" {
		inputFsPropSecretKeyFlagName = "input.fs.prop.secretKey"
	} else {
		inputFsPropSecretKeyFlagName = fmt.Sprintf("%v.input.fs.prop.secretKey", cmdPrefix)
	}

	var inputFsPropSecretKeyFlagDefault string

	_ = cmd.PersistentFlags().String(inputFsPropSecretKeyFlagName, inputFsPropSecretKeyFlagDefault, inputFsPropSecretKeyDescription)

	return nil
}

func registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputDirURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	inputDirUriDescription := `Required. `

	var inputDirUriFlagName string
	if cmdPrefix == "" {
		inputDirUriFlagName = "inputDirURI"
	} else {
		inputDirUriFlagName = fmt.Sprintf("%v.inputDirURI", cmdPrefix)
	}

	var inputDirUriFlagDefault string

	_ = cmd.PersistentFlags().String(inputDirUriFlagName, inputDirUriFlagDefault, inputDirUriDescription)

	return nil
}

func registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	inputFormatDescription := `Required. `

	var inputFormatFlagName string
	if cmdPrefix == "" {
		inputFormatFlagName = "inputFormat"
	} else {
		inputFormatFlagName = fmt.Sprintf("%v.inputFormat", cmdPrefix)
	}

	var inputFormatFlagDefault string

	_ = cmd.PersistentFlags().String(inputFormatFlagName, inputFormatFlagDefault, inputFormatDescription)

	return nil
}

func registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskSchedule(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scheduleDescription := `Required. `

	var scheduleFlagName string
	if cmdPrefix == "" {
		scheduleFlagName = "schedule"
	} else {
		scheduleFlagName = fmt.Sprintf("%v.schedule", cmdPrefix)
	}

	var scheduleFlagDefault string

	_ = cmd.PersistentFlags().String(scheduleFlagName, scheduleFlagDefault, scheduleDescription)

	return nil
}

func registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskTableMaxNumTasks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tableMaxNumTasksDescription := `Required. `

	var tableMaxNumTasksFlagName string
	if cmdPrefix == "" {
		tableMaxNumTasksFlagName = "tableMaxNumTasks"
	} else {
		tableMaxNumTasksFlagName = fmt.Sprintf("%v.tableMaxNumTasks", cmdPrefix)
	}

	var tableMaxNumTasksFlagDefault string

	_ = cmd.PersistentFlags().String(tableMaxNumTasksFlagName, tableMaxNumTasksFlagDefault, tableMaxNumTasksDescription)

	return nil
}

func registerTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskTaskMaxDataSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	taskMaxDataSizeDescription := `Required. `

	var taskMaxDataSizeFlagName string
	if cmdPrefix == "" {
		taskMaxDataSizeFlagName = "taskMaxDataSize"
	} else {
		taskMaxDataSizeFlagName = fmt.Sprintf("%v.taskMaxDataSize", cmdPrefix)
	}

	var taskMaxDataSizeFlagDefault string

	_ = cmd.PersistentFlags().String(taskMaxDataSizeFlagName, taskMaxDataSizeFlagDefault, taskMaxDataSizeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskFlags(depth int, m *models.TableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, inputFsClassNameAdded := retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsClassNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inputFsClassNameAdded

	err, inputFsPropAccessKeyAdded := retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsPropAccessKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inputFsPropAccessKeyAdded

	err, inputFsPropRegionAdded := retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsPropRegionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inputFsPropRegionAdded

	err, inputFsPropSecretKeyAdded := retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsPropSecretKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inputFsPropSecretKeyAdded

	err, inputDirUriAdded := retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputDirURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inputDirUriAdded

	err, inputFormatAdded := retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inputFormatAdded

	err, scheduleAdded := retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskScheduleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scheduleAdded

	err, tableMaxNumTasksAdded := retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskTableMaxNumTasksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableMaxNumTasksAdded

	err, taskMaxDataSizeAdded := retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskTaskMaxDataSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskMaxDataSizeAdded

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsClassNameFlags(depth int, m *models.TableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	inputFsClassNameFlagName := fmt.Sprintf("%v.input.fs.className", cmdPrefix)
	if cmd.Flags().Changed(inputFsClassNameFlagName) {

		var inputFsClassNameFlagName string
		if cmdPrefix == "" {
			inputFsClassNameFlagName = "input.fs.className"
		} else {
			inputFsClassNameFlagName = fmt.Sprintf("%v.input.fs.className", cmdPrefix)
		}

		inputFsClassNameFlagValue, err := cmd.Flags().GetString(inputFsClassNameFlagName)
		if err != nil {
			return err, false
		}
		m.InputFsClassName = &inputFsClassNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsPropAccessKeyFlags(depth int, m *models.TableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	inputFsPropAccessKeyFlagName := fmt.Sprintf("%v.input.fs.prop.accessKey", cmdPrefix)
	if cmd.Flags().Changed(inputFsPropAccessKeyFlagName) {

		var inputFsPropAccessKeyFlagName string
		if cmdPrefix == "" {
			inputFsPropAccessKeyFlagName = "input.fs.prop.accessKey"
		} else {
			inputFsPropAccessKeyFlagName = fmt.Sprintf("%v.input.fs.prop.accessKey", cmdPrefix)
		}

		inputFsPropAccessKeyFlagValue, err := cmd.Flags().GetString(inputFsPropAccessKeyFlagName)
		if err != nil {
			return err, false
		}
		m.InputFsPropAccessKey = &inputFsPropAccessKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsPropRegionFlags(depth int, m *models.TableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	inputFsPropRegionFlagName := fmt.Sprintf("%v.input.fs.prop.region", cmdPrefix)
	if cmd.Flags().Changed(inputFsPropRegionFlagName) {

		var inputFsPropRegionFlagName string
		if cmdPrefix == "" {
			inputFsPropRegionFlagName = "input.fs.prop.region"
		} else {
			inputFsPropRegionFlagName = fmt.Sprintf("%v.input.fs.prop.region", cmdPrefix)
		}

		inputFsPropRegionFlagValue, err := cmd.Flags().GetString(inputFsPropRegionFlagName)
		if err != nil {
			return err, false
		}
		m.InputFsPropRegion = &inputFsPropRegionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFsPropSecretKeyFlags(depth int, m *models.TableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	inputFsPropSecretKeyFlagName := fmt.Sprintf("%v.input.fs.prop.secretKey", cmdPrefix)
	if cmd.Flags().Changed(inputFsPropSecretKeyFlagName) {

		var inputFsPropSecretKeyFlagName string
		if cmdPrefix == "" {
			inputFsPropSecretKeyFlagName = "input.fs.prop.secretKey"
		} else {
			inputFsPropSecretKeyFlagName = fmt.Sprintf("%v.input.fs.prop.secretKey", cmdPrefix)
		}

		inputFsPropSecretKeyFlagValue, err := cmd.Flags().GetString(inputFsPropSecretKeyFlagName)
		if err != nil {
			return err, false
		}
		m.InputFsPropSecretKey = &inputFsPropSecretKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputDirURIFlags(depth int, m *models.TableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	inputDirUriFlagName := fmt.Sprintf("%v.inputDirURI", cmdPrefix)
	if cmd.Flags().Changed(inputDirUriFlagName) {

		var inputDirUriFlagName string
		if cmdPrefix == "" {
			inputDirUriFlagName = "inputDirURI"
		} else {
			inputDirUriFlagName = fmt.Sprintf("%v.inputDirURI", cmdPrefix)
		}

		inputDirUriFlagValue, err := cmd.Flags().GetString(inputDirUriFlagName)
		if err != nil {
			return err, false
		}
		m.InputDirURI = &inputDirUriFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskInputFormatFlags(depth int, m *models.TableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	inputFormatFlagName := fmt.Sprintf("%v.inputFormat", cmdPrefix)
	if cmd.Flags().Changed(inputFormatFlagName) {

		var inputFormatFlagName string
		if cmdPrefix == "" {
			inputFormatFlagName = "inputFormat"
		} else {
			inputFormatFlagName = fmt.Sprintf("%v.inputFormat", cmdPrefix)
		}

		inputFormatFlagValue, err := cmd.Flags().GetString(inputFormatFlagName)
		if err != nil {
			return err, false
		}
		m.InputFormat = &inputFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskScheduleFlags(depth int, m *models.TableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scheduleFlagName := fmt.Sprintf("%v.schedule", cmdPrefix)
	if cmd.Flags().Changed(scheduleFlagName) {

		var scheduleFlagName string
		if cmdPrefix == "" {
			scheduleFlagName = "schedule"
		} else {
			scheduleFlagName = fmt.Sprintf("%v.schedule", cmdPrefix)
		}

		scheduleFlagValue, err := cmd.Flags().GetString(scheduleFlagName)
		if err != nil {
			return err, false
		}
		m.Schedule = &scheduleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskTableMaxNumTasksFlags(depth int, m *models.TableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableMaxNumTasksFlagName := fmt.Sprintf("%v.tableMaxNumTasks", cmdPrefix)
	if cmd.Flags().Changed(tableMaxNumTasksFlagName) {

		var tableMaxNumTasksFlagName string
		if cmdPrefix == "" {
			tableMaxNumTasksFlagName = "tableMaxNumTasks"
		} else {
			tableMaxNumTasksFlagName = fmt.Sprintf("%v.tableMaxNumTasks", cmdPrefix)
		}

		tableMaxNumTasksFlagValue, err := cmd.Flags().GetString(tableMaxNumTasksFlagName)
		if err != nil {
			return err, false
		}
		m.TableMaxNumTasks = &tableMaxNumTasksFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTaskTaskMaxDataSizeFlags(depth int, m *models.TableConfigV2OfflineTaskTaskTypeConfigsMapFileIngestionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskMaxDataSizeFlagName := fmt.Sprintf("%v.taskMaxDataSize", cmdPrefix)
	if cmd.Flags().Changed(taskMaxDataSizeFlagName) {

		var taskMaxDataSizeFlagName string
		if cmdPrefix == "" {
			taskMaxDataSizeFlagName = "taskMaxDataSize"
		} else {
			taskMaxDataSizeFlagName = fmt.Sprintf("%v.taskMaxDataSize", cmdPrefix)
		}

		taskMaxDataSizeFlagValue, err := cmd.Flags().GetString(taskMaxDataSizeFlagName)
		if err != nil {
			return err, false
		}
		m.TaskMaxDataSize = &taskMaxDataSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2OfflineTenants

// register flags to command
func registerModelTableConfigV2OfflineTenantsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2OfflineTenantsBroker(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2OfflineTenantsServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2OfflineTenantsBroker(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	brokerDescription := `Required. `

	var brokerFlagName string
	if cmdPrefix == "" {
		brokerFlagName = "broker"
	} else {
		brokerFlagName = fmt.Sprintf("%v.broker", cmdPrefix)
	}

	var brokerFlagDefault string

	_ = cmd.PersistentFlags().String(brokerFlagName, brokerFlagDefault, brokerDescription)

	return nil
}

func registerTableConfigV2OfflineTenantsServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverDescription := `Required. `

	var serverFlagName string
	if cmdPrefix == "" {
		serverFlagName = "server"
	} else {
		serverFlagName = fmt.Sprintf("%v.server", cmdPrefix)
	}

	var serverFlagDefault string

	_ = cmd.PersistentFlags().String(serverFlagName, serverFlagDefault, serverDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2OfflineTenantsFlags(depth int, m *models.TableConfigV2OfflineTenants, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, brokerAdded := retrieveTableConfigV2OfflineTenantsBrokerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || brokerAdded

	err, serverAdded := retrieveTableConfigV2OfflineTenantsServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverAdded

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTenantsBrokerFlags(depth int, m *models.TableConfigV2OfflineTenants, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	brokerFlagName := fmt.Sprintf("%v.broker", cmdPrefix)
	if cmd.Flags().Changed(brokerFlagName) {

		var brokerFlagName string
		if cmdPrefix == "" {
			brokerFlagName = "broker"
		} else {
			brokerFlagName = fmt.Sprintf("%v.broker", cmdPrefix)
		}

		brokerFlagValue, err := cmd.Flags().GetString(brokerFlagName)
		if err != nil {
			return err, false
		}
		m.Broker = &brokerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2OfflineTenantsServerFlags(depth int, m *models.TableConfigV2OfflineTenants, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverFlagName := fmt.Sprintf("%v.server", cmdPrefix)
	if cmd.Flags().Changed(serverFlagName) {

		var serverFlagName string
		if cmdPrefix == "" {
			serverFlagName = "server"
		} else {
			serverFlagName = fmt.Sprintf("%v.server", cmdPrefix)
		}

		serverFlagValue, err := cmd.Flags().GetString(serverFlagName)
		if err != nil {
			return err, false
		}
		m.Server = &serverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2Realtime

// register flags to command
func registerModelTableConfigV2RealtimeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2RealtimeIngestionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeIsDimTable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeRouting(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeSegmentsConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTenants(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeUpsertConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeIngestionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ingestionConfigFlagName string
	if cmdPrefix == "" {
		ingestionConfigFlagName = "ingestionConfig"
	} else {
		ingestionConfigFlagName = fmt.Sprintf("%v.ingestionConfig", cmdPrefix)
	}

	if err := registerModelTableConfigV2RealtimeIngestionConfigFlags(depth+1, ingestionConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeIsDimTable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isDimTableDescription := `Required. `

	var isDimTableFlagName string
	if cmdPrefix == "" {
		isDimTableFlagName = "isDimTable"
	} else {
		isDimTableFlagName = fmt.Sprintf("%v.isDimTable", cmdPrefix)
	}

	var isDimTableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isDimTableFlagName, isDimTableFlagDefault, isDimTableDescription)

	return nil
}

func registerTableConfigV2RealtimeMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: metadata interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigV2RealtimeRouting(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var routingFlagName string
	if cmdPrefix == "" {
		routingFlagName = "routing"
	} else {
		routingFlagName = fmt.Sprintf("%v.routing", cmdPrefix)
	}

	if err := registerModelTableConfigV2RealtimeRoutingFlags(depth+1, routingFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeSegmentsConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var segmentsConfigFlagName string
	if cmdPrefix == "" {
		segmentsConfigFlagName = "segmentsConfig"
	} else {
		segmentsConfigFlagName = fmt.Sprintf("%v.segmentsConfig", cmdPrefix)
	}

	if err := registerModelTableConfigV2RealtimeSegmentsConfigFlags(depth+1, segmentsConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tableIndexConfigFlagName string
	if cmdPrefix == "" {
		tableIndexConfigFlagName = "tableIndexConfig"
	} else {
		tableIndexConfigFlagName = fmt.Sprintf("%v.tableIndexConfig", cmdPrefix)
	}

	if err := registerModelTableConfigV2RealtimeTableIndexConfigFlags(depth+1, tableIndexConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeTableName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tableNameDescription := `Required. `

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}

func registerTableConfigV2RealtimeTableType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tableTypeDescription := `Required. `

	var tableTypeFlagName string
	if cmdPrefix == "" {
		tableTypeFlagName = "tableType"
	} else {
		tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
	}

	var tableTypeFlagDefault string

	_ = cmd.PersistentFlags().String(tableTypeFlagName, tableTypeFlagDefault, tableTypeDescription)

	return nil
}

func registerTableConfigV2RealtimeTenants(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tenantsFlagName string
	if cmdPrefix == "" {
		tenantsFlagName = "tenants"
	} else {
		tenantsFlagName = fmt.Sprintf("%v.tenants", cmdPrefix)
	}

	if err := registerModelTableConfigV2RealtimeTenantsFlags(depth+1, tenantsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeUpsertConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var upsertConfigFlagName string
	if cmdPrefix == "" {
		upsertConfigFlagName = "upsertConfig"
	} else {
		upsertConfigFlagName = fmt.Sprintf("%v.upsertConfig", cmdPrefix)
	}

	if err := registerModelTableConfigV2RealtimeUpsertConfigFlags(depth+1, upsertConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2RealtimeFlags(depth int, m *models.TableConfigV2Realtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ingestionConfigAdded := retrieveTableConfigV2RealtimeIngestionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ingestionConfigAdded

	err, isDimTableAdded := retrieveTableConfigV2RealtimeIsDimTableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isDimTableAdded

	err, metadataAdded := retrieveTableConfigV2RealtimeMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded

	err, routingAdded := retrieveTableConfigV2RealtimeRoutingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || routingAdded

	err, segmentsConfigAdded := retrieveTableConfigV2RealtimeSegmentsConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentsConfigAdded

	err, tableIndexConfigAdded := retrieveTableConfigV2RealtimeTableIndexConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableIndexConfigAdded

	err, tableNameAdded := retrieveTableConfigV2RealtimeTableNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableNameAdded

	err, tableTypeAdded := retrieveTableConfigV2RealtimeTableTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableTypeAdded

	err, tenantsAdded := retrieveTableConfigV2RealtimeTenantsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tenantsAdded

	err, upsertConfigAdded := retrieveTableConfigV2RealtimeUpsertConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upsertConfigAdded

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeIngestionConfigFlags(depth int, m *models.TableConfigV2Realtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ingestionConfigFlagName := fmt.Sprintf("%v.ingestionConfig", cmdPrefix)
	if cmd.Flags().Changed(ingestionConfigFlagName) {
		// info: complex object ingestionConfig TableConfigV2RealtimeIngestionConfig is retrieved outside this Changed() block
	}
	ingestionConfigFlagValue := m.IngestionConfig
	if swag.IsZero(ingestionConfigFlagValue) {
		ingestionConfigFlagValue = &models.TableConfigV2RealtimeIngestionConfig{}
	}

	err, ingestionConfigAdded := retrieveModelTableConfigV2RealtimeIngestionConfigFlags(depth+1, ingestionConfigFlagValue, ingestionConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ingestionConfigAdded
	if ingestionConfigAdded {
		m.IngestionConfig = ingestionConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeIsDimTableFlags(depth int, m *models.TableConfigV2Realtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isDimTableFlagName := fmt.Sprintf("%v.isDimTable", cmdPrefix)
	if cmd.Flags().Changed(isDimTableFlagName) {

		var isDimTableFlagName string
		if cmdPrefix == "" {
			isDimTableFlagName = "isDimTable"
		} else {
			isDimTableFlagName = fmt.Sprintf("%v.isDimTable", cmdPrefix)
		}

		isDimTableFlagValue, err := cmd.Flags().GetBool(isDimTableFlagName)
		if err != nil {
			return err, false
		}
		m.IsDimTable = &isDimTableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeMetadataFlags(depth int, m *models.TableConfigV2Realtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metadataFlagName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(metadataFlagName) {
		// warning: metadata map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeRoutingFlags(depth int, m *models.TableConfigV2Realtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	routingFlagName := fmt.Sprintf("%v.routing", cmdPrefix)
	if cmd.Flags().Changed(routingFlagName) {
		// info: complex object routing TableConfigV2RealtimeRouting is retrieved outside this Changed() block
	}
	routingFlagValue := m.Routing
	if swag.IsZero(routingFlagValue) {
		routingFlagValue = &models.TableConfigV2RealtimeRouting{}
	}

	err, routingAdded := retrieveModelTableConfigV2RealtimeRoutingFlags(depth+1, routingFlagValue, routingFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || routingAdded
	if routingAdded {
		m.Routing = routingFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeSegmentsConfigFlags(depth int, m *models.TableConfigV2Realtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentsConfigFlagName := fmt.Sprintf("%v.segmentsConfig", cmdPrefix)
	if cmd.Flags().Changed(segmentsConfigFlagName) {
		// info: complex object segmentsConfig TableConfigV2RealtimeSegmentsConfig is retrieved outside this Changed() block
	}
	segmentsConfigFlagValue := m.SegmentsConfig
	if swag.IsZero(segmentsConfigFlagValue) {
		segmentsConfigFlagValue = &models.TableConfigV2RealtimeSegmentsConfig{}
	}

	err, segmentsConfigAdded := retrieveModelTableConfigV2RealtimeSegmentsConfigFlags(depth+1, segmentsConfigFlagValue, segmentsConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentsConfigAdded
	if segmentsConfigAdded {
		m.SegmentsConfig = segmentsConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigFlags(depth int, m *models.TableConfigV2Realtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableIndexConfigFlagName := fmt.Sprintf("%v.tableIndexConfig", cmdPrefix)
	if cmd.Flags().Changed(tableIndexConfigFlagName) {
		// info: complex object tableIndexConfig TableConfigV2RealtimeTableIndexConfig is retrieved outside this Changed() block
	}
	tableIndexConfigFlagValue := m.TableIndexConfig
	if swag.IsZero(tableIndexConfigFlagValue) {
		tableIndexConfigFlagValue = &models.TableConfigV2RealtimeTableIndexConfig{}
	}

	err, tableIndexConfigAdded := retrieveModelTableConfigV2RealtimeTableIndexConfigFlags(depth+1, tableIndexConfigFlagValue, tableIndexConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableIndexConfigAdded
	if tableIndexConfigAdded {
		m.TableIndexConfig = tableIndexConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableNameFlags(depth int, m *models.TableConfigV2Realtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableNameFlagName := fmt.Sprintf("%v.tableName", cmdPrefix)
	if cmd.Flags().Changed(tableNameFlagName) {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = &tableNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableTypeFlags(depth int, m *models.TableConfigV2Realtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableTypeFlagName := fmt.Sprintf("%v.tableType", cmdPrefix)
	if cmd.Flags().Changed(tableTypeFlagName) {

		var tableTypeFlagName string
		if cmdPrefix == "" {
			tableTypeFlagName = "tableType"
		} else {
			tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
		}

		tableTypeFlagValue, err := cmd.Flags().GetString(tableTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TableType = &tableTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTenantsFlags(depth int, m *models.TableConfigV2Realtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tenantsFlagName := fmt.Sprintf("%v.tenants", cmdPrefix)
	if cmd.Flags().Changed(tenantsFlagName) {
		// info: complex object tenants TableConfigV2RealtimeTenants is retrieved outside this Changed() block
	}
	tenantsFlagValue := m.Tenants
	if swag.IsZero(tenantsFlagValue) {
		tenantsFlagValue = &models.TableConfigV2RealtimeTenants{}
	}

	err, tenantsAdded := retrieveModelTableConfigV2RealtimeTenantsFlags(depth+1, tenantsFlagValue, tenantsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tenantsAdded
	if tenantsAdded {
		m.Tenants = tenantsFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeUpsertConfigFlags(depth int, m *models.TableConfigV2Realtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	upsertConfigFlagName := fmt.Sprintf("%v.upsertConfig", cmdPrefix)
	if cmd.Flags().Changed(upsertConfigFlagName) {
		// info: complex object upsertConfig TableConfigV2RealtimeUpsertConfig is retrieved outside this Changed() block
	}
	upsertConfigFlagValue := m.UpsertConfig
	if swag.IsZero(upsertConfigFlagValue) {
		upsertConfigFlagValue = &models.TableConfigV2RealtimeUpsertConfig{}
	}

	err, upsertConfigAdded := retrieveModelTableConfigV2RealtimeUpsertConfigFlags(depth+1, upsertConfigFlagValue, upsertConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upsertConfigAdded
	if upsertConfigAdded {
		m.UpsertConfig = upsertConfigFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2RealtimeIngestionConfig

// register flags to command
func registerModelTableConfigV2RealtimeIngestionConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2RealtimeIngestionConfigContinueOnError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeIngestionConfigRowTimeValueCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeIngestionConfigSegmentTimeValueCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeIngestionConfigStreamIngestionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeIngestionConfigTransformConfigs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeIngestionConfigContinueOnError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	continueOnErrorDescription := `Required. `

	var continueOnErrorFlagName string
	if cmdPrefix == "" {
		continueOnErrorFlagName = "continueOnError"
	} else {
		continueOnErrorFlagName = fmt.Sprintf("%v.continueOnError", cmdPrefix)
	}

	var continueOnErrorFlagDefault bool

	_ = cmd.PersistentFlags().Bool(continueOnErrorFlagName, continueOnErrorFlagDefault, continueOnErrorDescription)

	return nil
}

func registerTableConfigV2RealtimeIngestionConfigRowTimeValueCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rowTimeValueCheckDescription := `Required. `

	var rowTimeValueCheckFlagName string
	if cmdPrefix == "" {
		rowTimeValueCheckFlagName = "rowTimeValueCheck"
	} else {
		rowTimeValueCheckFlagName = fmt.Sprintf("%v.rowTimeValueCheck", cmdPrefix)
	}

	var rowTimeValueCheckFlagDefault bool

	_ = cmd.PersistentFlags().Bool(rowTimeValueCheckFlagName, rowTimeValueCheckFlagDefault, rowTimeValueCheckDescription)

	return nil
}

func registerTableConfigV2RealtimeIngestionConfigSegmentTimeValueCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentTimeValueCheckDescription := `Required. `

	var segmentTimeValueCheckFlagName string
	if cmdPrefix == "" {
		segmentTimeValueCheckFlagName = "segmentTimeValueCheck"
	} else {
		segmentTimeValueCheckFlagName = fmt.Sprintf("%v.segmentTimeValueCheck", cmdPrefix)
	}

	var segmentTimeValueCheckFlagDefault bool

	_ = cmd.PersistentFlags().Bool(segmentTimeValueCheckFlagName, segmentTimeValueCheckFlagDefault, segmentTimeValueCheckDescription)

	return nil
}

func registerTableConfigV2RealtimeIngestionConfigStreamIngestionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var streamIngestionConfigFlagName string
	if cmdPrefix == "" {
		streamIngestionConfigFlagName = "streamIngestionConfig"
	} else {
		streamIngestionConfigFlagName = fmt.Sprintf("%v.streamIngestionConfig", cmdPrefix)
	}

	if err := registerModelTableConfigV2RealtimeIngestionConfigStreamIngestionConfigFlags(depth+1, streamIngestionConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeIngestionConfigTransformConfigs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: transformConfigs []interface{} array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2RealtimeIngestionConfigFlags(depth int, m *models.TableConfigV2RealtimeIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, continueOnErrorAdded := retrieveTableConfigV2RealtimeIngestionConfigContinueOnErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || continueOnErrorAdded

	err, rowTimeValueCheckAdded := retrieveTableConfigV2RealtimeIngestionConfigRowTimeValueCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rowTimeValueCheckAdded

	err, segmentTimeValueCheckAdded := retrieveTableConfigV2RealtimeIngestionConfigSegmentTimeValueCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentTimeValueCheckAdded

	err, streamIngestionConfigAdded := retrieveTableConfigV2RealtimeIngestionConfigStreamIngestionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamIngestionConfigAdded

	err, transformConfigsAdded := retrieveTableConfigV2RealtimeIngestionConfigTransformConfigsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transformConfigsAdded

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeIngestionConfigContinueOnErrorFlags(depth int, m *models.TableConfigV2RealtimeIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	continueOnErrorFlagName := fmt.Sprintf("%v.continueOnError", cmdPrefix)
	if cmd.Flags().Changed(continueOnErrorFlagName) {

		var continueOnErrorFlagName string
		if cmdPrefix == "" {
			continueOnErrorFlagName = "continueOnError"
		} else {
			continueOnErrorFlagName = fmt.Sprintf("%v.continueOnError", cmdPrefix)
		}

		continueOnErrorFlagValue, err := cmd.Flags().GetBool(continueOnErrorFlagName)
		if err != nil {
			return err, false
		}
		m.ContinueOnError = &continueOnErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeIngestionConfigRowTimeValueCheckFlags(depth int, m *models.TableConfigV2RealtimeIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rowTimeValueCheckFlagName := fmt.Sprintf("%v.rowTimeValueCheck", cmdPrefix)
	if cmd.Flags().Changed(rowTimeValueCheckFlagName) {

		var rowTimeValueCheckFlagName string
		if cmdPrefix == "" {
			rowTimeValueCheckFlagName = "rowTimeValueCheck"
		} else {
			rowTimeValueCheckFlagName = fmt.Sprintf("%v.rowTimeValueCheck", cmdPrefix)
		}

		rowTimeValueCheckFlagValue, err := cmd.Flags().GetBool(rowTimeValueCheckFlagName)
		if err != nil {
			return err, false
		}
		m.RowTimeValueCheck = &rowTimeValueCheckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeIngestionConfigSegmentTimeValueCheckFlags(depth int, m *models.TableConfigV2RealtimeIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentTimeValueCheckFlagName := fmt.Sprintf("%v.segmentTimeValueCheck", cmdPrefix)
	if cmd.Flags().Changed(segmentTimeValueCheckFlagName) {

		var segmentTimeValueCheckFlagName string
		if cmdPrefix == "" {
			segmentTimeValueCheckFlagName = "segmentTimeValueCheck"
		} else {
			segmentTimeValueCheckFlagName = fmt.Sprintf("%v.segmentTimeValueCheck", cmdPrefix)
		}

		segmentTimeValueCheckFlagValue, err := cmd.Flags().GetBool(segmentTimeValueCheckFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentTimeValueCheck = &segmentTimeValueCheckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeIngestionConfigStreamIngestionConfigFlags(depth int, m *models.TableConfigV2RealtimeIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamIngestionConfigFlagName := fmt.Sprintf("%v.streamIngestionConfig", cmdPrefix)
	if cmd.Flags().Changed(streamIngestionConfigFlagName) {
		// info: complex object streamIngestionConfig TableConfigV2RealtimeIngestionConfigStreamIngestionConfig is retrieved outside this Changed() block
	}
	streamIngestionConfigFlagValue := m.StreamIngestionConfig
	if swag.IsZero(streamIngestionConfigFlagValue) {
		streamIngestionConfigFlagValue = &models.TableConfigV2RealtimeIngestionConfigStreamIngestionConfig{}
	}

	err, streamIngestionConfigAdded := retrieveModelTableConfigV2RealtimeIngestionConfigStreamIngestionConfigFlags(depth+1, streamIngestionConfigFlagValue, streamIngestionConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamIngestionConfigAdded
	if streamIngestionConfigAdded {
		m.StreamIngestionConfig = streamIngestionConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeIngestionConfigTransformConfigsFlags(depth int, m *models.TableConfigV2RealtimeIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transformConfigsFlagName := fmt.Sprintf("%v.transformConfigs", cmdPrefix)
	if cmd.Flags().Changed(transformConfigsFlagName) {
		// warning: transformConfigs array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2RealtimeIngestionConfigStreamIngestionConfig

// register flags to command
func registerModelTableConfigV2RealtimeIngestionConfigStreamIngestionConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2RealtimeIngestionConfigStreamIngestionConfigStreamConfigMaps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeIngestionConfigStreamIngestionConfigStreamConfigMaps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: streamConfigMaps []interface{} array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2RealtimeIngestionConfigStreamIngestionConfigFlags(depth int, m *models.TableConfigV2RealtimeIngestionConfigStreamIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, streamConfigMapsAdded := retrieveTableConfigV2RealtimeIngestionConfigStreamIngestionConfigStreamConfigMapsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamConfigMapsAdded

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeIngestionConfigStreamIngestionConfigStreamConfigMapsFlags(depth int, m *models.TableConfigV2RealtimeIngestionConfigStreamIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamConfigMapsFlagName := fmt.Sprintf("%v.streamConfigMaps", cmdPrefix)
	if cmd.Flags().Changed(streamConfigMapsFlagName) {
		// warning: streamConfigMaps array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2RealtimeRouting

// register flags to command
func registerModelTableConfigV2RealtimeRoutingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2RealtimeRoutingInstanceSelectorType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeRoutingSegmentPrunerTypes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeRoutingInstanceSelectorType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	instanceSelectorTypeDescription := `Required. `

	var instanceSelectorTypeFlagName string
	if cmdPrefix == "" {
		instanceSelectorTypeFlagName = "instanceSelectorType"
	} else {
		instanceSelectorTypeFlagName = fmt.Sprintf("%v.instanceSelectorType", cmdPrefix)
	}

	var instanceSelectorTypeFlagDefault string

	_ = cmd.PersistentFlags().String(instanceSelectorTypeFlagName, instanceSelectorTypeFlagDefault, instanceSelectorTypeDescription)

	return nil
}

func registerTableConfigV2RealtimeRoutingSegmentPrunerTypes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: segmentPrunerTypes []interface{} array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2RealtimeRoutingFlags(depth int, m *models.TableConfigV2RealtimeRouting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, instanceSelectorTypeAdded := retrieveTableConfigV2RealtimeRoutingInstanceSelectorTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || instanceSelectorTypeAdded

	err, segmentPrunerTypesAdded := retrieveTableConfigV2RealtimeRoutingSegmentPrunerTypesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentPrunerTypesAdded

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeRoutingInstanceSelectorTypeFlags(depth int, m *models.TableConfigV2RealtimeRouting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	instanceSelectorTypeFlagName := fmt.Sprintf("%v.instanceSelectorType", cmdPrefix)
	if cmd.Flags().Changed(instanceSelectorTypeFlagName) {

		var instanceSelectorTypeFlagName string
		if cmdPrefix == "" {
			instanceSelectorTypeFlagName = "instanceSelectorType"
		} else {
			instanceSelectorTypeFlagName = fmt.Sprintf("%v.instanceSelectorType", cmdPrefix)
		}

		instanceSelectorTypeFlagValue, err := cmd.Flags().GetString(instanceSelectorTypeFlagName)
		if err != nil {
			return err, false
		}
		m.InstanceSelectorType = &instanceSelectorTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeRoutingSegmentPrunerTypesFlags(depth int, m *models.TableConfigV2RealtimeRouting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentPrunerTypesFlagName := fmt.Sprintf("%v.segmentPrunerTypes", cmdPrefix)
	if cmd.Flags().Changed(segmentPrunerTypesFlagName) {
		// warning: segmentPrunerTypes array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2RealtimeSegmentsConfig

// register flags to command
func registerModelTableConfigV2RealtimeSegmentsConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2RealtimeSegmentsConfigDeletedSegmentsRetentionPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeSegmentsConfigMinimizeDataMovement(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeSegmentsConfigReplicasPerPartition(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeSegmentsConfigReplication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeSegmentsConfigRetentionTimeUnit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeSegmentsConfigRetentionTimeValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeSegmentsConfigSchemaName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeSegmentsConfigSegmentAssignmentStrategy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeSegmentsConfigSegmentPushType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeSegmentsConfigTimeColumnName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeSegmentsConfigDeletedSegmentsRetentionPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deletedSegmentsRetentionPeriodDescription := `Required. `

	var deletedSegmentsRetentionPeriodFlagName string
	if cmdPrefix == "" {
		deletedSegmentsRetentionPeriodFlagName = "deletedSegmentsRetentionPeriod"
	} else {
		deletedSegmentsRetentionPeriodFlagName = fmt.Sprintf("%v.deletedSegmentsRetentionPeriod", cmdPrefix)
	}

	var deletedSegmentsRetentionPeriodFlagDefault string

	_ = cmd.PersistentFlags().String(deletedSegmentsRetentionPeriodFlagName, deletedSegmentsRetentionPeriodFlagDefault, deletedSegmentsRetentionPeriodDescription)

	return nil
}

func registerTableConfigV2RealtimeSegmentsConfigMinimizeDataMovement(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minimizeDataMovementDescription := `Required. `

	var minimizeDataMovementFlagName string
	if cmdPrefix == "" {
		minimizeDataMovementFlagName = "minimizeDataMovement"
	} else {
		minimizeDataMovementFlagName = fmt.Sprintf("%v.minimizeDataMovement", cmdPrefix)
	}

	var minimizeDataMovementFlagDefault bool

	_ = cmd.PersistentFlags().Bool(minimizeDataMovementFlagName, minimizeDataMovementFlagDefault, minimizeDataMovementDescription)

	return nil
}

func registerTableConfigV2RealtimeSegmentsConfigReplicasPerPartition(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	replicasPerPartitionDescription := `Required. `

	var replicasPerPartitionFlagName string
	if cmdPrefix == "" {
		replicasPerPartitionFlagName = "replicasPerPartition"
	} else {
		replicasPerPartitionFlagName = fmt.Sprintf("%v.replicasPerPartition", cmdPrefix)
	}

	var replicasPerPartitionFlagDefault string

	_ = cmd.PersistentFlags().String(replicasPerPartitionFlagName, replicasPerPartitionFlagDefault, replicasPerPartitionDescription)

	return nil
}

func registerTableConfigV2RealtimeSegmentsConfigReplication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	replicationDescription := `Required. `

	var replicationFlagName string
	if cmdPrefix == "" {
		replicationFlagName = "replication"
	} else {
		replicationFlagName = fmt.Sprintf("%v.replication", cmdPrefix)
	}

	var replicationFlagDefault string

	_ = cmd.PersistentFlags().String(replicationFlagName, replicationFlagDefault, replicationDescription)

	return nil
}

func registerTableConfigV2RealtimeSegmentsConfigRetentionTimeUnit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	retentionTimeUnitDescription := `Required. `

	var retentionTimeUnitFlagName string
	if cmdPrefix == "" {
		retentionTimeUnitFlagName = "retentionTimeUnit"
	} else {
		retentionTimeUnitFlagName = fmt.Sprintf("%v.retentionTimeUnit", cmdPrefix)
	}

	var retentionTimeUnitFlagDefault string

	_ = cmd.PersistentFlags().String(retentionTimeUnitFlagName, retentionTimeUnitFlagDefault, retentionTimeUnitDescription)

	return nil
}

func registerTableConfigV2RealtimeSegmentsConfigRetentionTimeValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	retentionTimeValueDescription := `Required. `

	var retentionTimeValueFlagName string
	if cmdPrefix == "" {
		retentionTimeValueFlagName = "retentionTimeValue"
	} else {
		retentionTimeValueFlagName = fmt.Sprintf("%v.retentionTimeValue", cmdPrefix)
	}

	var retentionTimeValueFlagDefault string

	_ = cmd.PersistentFlags().String(retentionTimeValueFlagName, retentionTimeValueFlagDefault, retentionTimeValueDescription)

	return nil
}

func registerTableConfigV2RealtimeSegmentsConfigSchemaName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	schemaNameDescription := `Required. `

	var schemaNameFlagName string
	if cmdPrefix == "" {
		schemaNameFlagName = "schemaName"
	} else {
		schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
	}

	var schemaNameFlagDefault string

	_ = cmd.PersistentFlags().String(schemaNameFlagName, schemaNameFlagDefault, schemaNameDescription)

	return nil
}

func registerTableConfigV2RealtimeSegmentsConfigSegmentAssignmentStrategy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentAssignmentStrategyDescription := `Required. `

	var segmentAssignmentStrategyFlagName string
	if cmdPrefix == "" {
		segmentAssignmentStrategyFlagName = "segmentAssignmentStrategy"
	} else {
		segmentAssignmentStrategyFlagName = fmt.Sprintf("%v.segmentAssignmentStrategy", cmdPrefix)
	}

	var segmentAssignmentStrategyFlagDefault string

	_ = cmd.PersistentFlags().String(segmentAssignmentStrategyFlagName, segmentAssignmentStrategyFlagDefault, segmentAssignmentStrategyDescription)

	return nil
}

func registerTableConfigV2RealtimeSegmentsConfigSegmentPushType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentPushTypeDescription := `Required. `

	var segmentPushTypeFlagName string
	if cmdPrefix == "" {
		segmentPushTypeFlagName = "segmentPushType"
	} else {
		segmentPushTypeFlagName = fmt.Sprintf("%v.segmentPushType", cmdPrefix)
	}

	var segmentPushTypeFlagDefault string

	_ = cmd.PersistentFlags().String(segmentPushTypeFlagName, segmentPushTypeFlagDefault, segmentPushTypeDescription)

	return nil
}

func registerTableConfigV2RealtimeSegmentsConfigTimeColumnName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeColumnNameDescription := `Required. `

	var timeColumnNameFlagName string
	if cmdPrefix == "" {
		timeColumnNameFlagName = "timeColumnName"
	} else {
		timeColumnNameFlagName = fmt.Sprintf("%v.timeColumnName", cmdPrefix)
	}

	var timeColumnNameFlagDefault string

	_ = cmd.PersistentFlags().String(timeColumnNameFlagName, timeColumnNameFlagDefault, timeColumnNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2RealtimeSegmentsConfigFlags(depth int, m *models.TableConfigV2RealtimeSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deletedSegmentsRetentionPeriodAdded := retrieveTableConfigV2RealtimeSegmentsConfigDeletedSegmentsRetentionPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deletedSegmentsRetentionPeriodAdded

	err, minimizeDataMovementAdded := retrieveTableConfigV2RealtimeSegmentsConfigMinimizeDataMovementFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minimizeDataMovementAdded

	err, replicasPerPartitionAdded := retrieveTableConfigV2RealtimeSegmentsConfigReplicasPerPartitionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || replicasPerPartitionAdded

	err, replicationAdded := retrieveTableConfigV2RealtimeSegmentsConfigReplicationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || replicationAdded

	err, retentionTimeUnitAdded := retrieveTableConfigV2RealtimeSegmentsConfigRetentionTimeUnitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || retentionTimeUnitAdded

	err, retentionTimeValueAdded := retrieveTableConfigV2RealtimeSegmentsConfigRetentionTimeValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || retentionTimeValueAdded

	err, schemaNameAdded := retrieveTableConfigV2RealtimeSegmentsConfigSchemaNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || schemaNameAdded

	err, segmentAssignmentStrategyAdded := retrieveTableConfigV2RealtimeSegmentsConfigSegmentAssignmentStrategyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentAssignmentStrategyAdded

	err, segmentPushTypeAdded := retrieveTableConfigV2RealtimeSegmentsConfigSegmentPushTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentPushTypeAdded

	err, timeColumnNameAdded := retrieveTableConfigV2RealtimeSegmentsConfigTimeColumnNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeColumnNameAdded

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeSegmentsConfigDeletedSegmentsRetentionPeriodFlags(depth int, m *models.TableConfigV2RealtimeSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deletedSegmentsRetentionPeriodFlagName := fmt.Sprintf("%v.deletedSegmentsRetentionPeriod", cmdPrefix)
	if cmd.Flags().Changed(deletedSegmentsRetentionPeriodFlagName) {

		var deletedSegmentsRetentionPeriodFlagName string
		if cmdPrefix == "" {
			deletedSegmentsRetentionPeriodFlagName = "deletedSegmentsRetentionPeriod"
		} else {
			deletedSegmentsRetentionPeriodFlagName = fmt.Sprintf("%v.deletedSegmentsRetentionPeriod", cmdPrefix)
		}

		deletedSegmentsRetentionPeriodFlagValue, err := cmd.Flags().GetString(deletedSegmentsRetentionPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.DeletedSegmentsRetentionPeriod = &deletedSegmentsRetentionPeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeSegmentsConfigMinimizeDataMovementFlags(depth int, m *models.TableConfigV2RealtimeSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minimizeDataMovementFlagName := fmt.Sprintf("%v.minimizeDataMovement", cmdPrefix)
	if cmd.Flags().Changed(minimizeDataMovementFlagName) {

		var minimizeDataMovementFlagName string
		if cmdPrefix == "" {
			minimizeDataMovementFlagName = "minimizeDataMovement"
		} else {
			minimizeDataMovementFlagName = fmt.Sprintf("%v.minimizeDataMovement", cmdPrefix)
		}

		minimizeDataMovementFlagValue, err := cmd.Flags().GetBool(minimizeDataMovementFlagName)
		if err != nil {
			return err, false
		}
		m.MinimizeDataMovement = &minimizeDataMovementFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeSegmentsConfigReplicasPerPartitionFlags(depth int, m *models.TableConfigV2RealtimeSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	replicasPerPartitionFlagName := fmt.Sprintf("%v.replicasPerPartition", cmdPrefix)
	if cmd.Flags().Changed(replicasPerPartitionFlagName) {

		var replicasPerPartitionFlagName string
		if cmdPrefix == "" {
			replicasPerPartitionFlagName = "replicasPerPartition"
		} else {
			replicasPerPartitionFlagName = fmt.Sprintf("%v.replicasPerPartition", cmdPrefix)
		}

		replicasPerPartitionFlagValue, err := cmd.Flags().GetString(replicasPerPartitionFlagName)
		if err != nil {
			return err, false
		}
		m.ReplicasPerPartition = &replicasPerPartitionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeSegmentsConfigReplicationFlags(depth int, m *models.TableConfigV2RealtimeSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	replicationFlagName := fmt.Sprintf("%v.replication", cmdPrefix)
	if cmd.Flags().Changed(replicationFlagName) {

		var replicationFlagName string
		if cmdPrefix == "" {
			replicationFlagName = "replication"
		} else {
			replicationFlagName = fmt.Sprintf("%v.replication", cmdPrefix)
		}

		replicationFlagValue, err := cmd.Flags().GetString(replicationFlagName)
		if err != nil {
			return err, false
		}
		m.Replication = &replicationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeSegmentsConfigRetentionTimeUnitFlags(depth int, m *models.TableConfigV2RealtimeSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	retentionTimeUnitFlagName := fmt.Sprintf("%v.retentionTimeUnit", cmdPrefix)
	if cmd.Flags().Changed(retentionTimeUnitFlagName) {

		var retentionTimeUnitFlagName string
		if cmdPrefix == "" {
			retentionTimeUnitFlagName = "retentionTimeUnit"
		} else {
			retentionTimeUnitFlagName = fmt.Sprintf("%v.retentionTimeUnit", cmdPrefix)
		}

		retentionTimeUnitFlagValue, err := cmd.Flags().GetString(retentionTimeUnitFlagName)
		if err != nil {
			return err, false
		}
		m.RetentionTimeUnit = &retentionTimeUnitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeSegmentsConfigRetentionTimeValueFlags(depth int, m *models.TableConfigV2RealtimeSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	retentionTimeValueFlagName := fmt.Sprintf("%v.retentionTimeValue", cmdPrefix)
	if cmd.Flags().Changed(retentionTimeValueFlagName) {

		var retentionTimeValueFlagName string
		if cmdPrefix == "" {
			retentionTimeValueFlagName = "retentionTimeValue"
		} else {
			retentionTimeValueFlagName = fmt.Sprintf("%v.retentionTimeValue", cmdPrefix)
		}

		retentionTimeValueFlagValue, err := cmd.Flags().GetString(retentionTimeValueFlagName)
		if err != nil {
			return err, false
		}
		m.RetentionTimeValue = &retentionTimeValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeSegmentsConfigSchemaNameFlags(depth int, m *models.TableConfigV2RealtimeSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	schemaNameFlagName := fmt.Sprintf("%v.schemaName", cmdPrefix)
	if cmd.Flags().Changed(schemaNameFlagName) {

		var schemaNameFlagName string
		if cmdPrefix == "" {
			schemaNameFlagName = "schemaName"
		} else {
			schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
		}

		schemaNameFlagValue, err := cmd.Flags().GetString(schemaNameFlagName)
		if err != nil {
			return err, false
		}
		m.SchemaName = &schemaNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeSegmentsConfigSegmentAssignmentStrategyFlags(depth int, m *models.TableConfigV2RealtimeSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentAssignmentStrategyFlagName := fmt.Sprintf("%v.segmentAssignmentStrategy", cmdPrefix)
	if cmd.Flags().Changed(segmentAssignmentStrategyFlagName) {

		var segmentAssignmentStrategyFlagName string
		if cmdPrefix == "" {
			segmentAssignmentStrategyFlagName = "segmentAssignmentStrategy"
		} else {
			segmentAssignmentStrategyFlagName = fmt.Sprintf("%v.segmentAssignmentStrategy", cmdPrefix)
		}

		segmentAssignmentStrategyFlagValue, err := cmd.Flags().GetString(segmentAssignmentStrategyFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentAssignmentStrategy = &segmentAssignmentStrategyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeSegmentsConfigSegmentPushTypeFlags(depth int, m *models.TableConfigV2RealtimeSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentPushTypeFlagName := fmt.Sprintf("%v.segmentPushType", cmdPrefix)
	if cmd.Flags().Changed(segmentPushTypeFlagName) {

		var segmentPushTypeFlagName string
		if cmdPrefix == "" {
			segmentPushTypeFlagName = "segmentPushType"
		} else {
			segmentPushTypeFlagName = fmt.Sprintf("%v.segmentPushType", cmdPrefix)
		}

		segmentPushTypeFlagValue, err := cmd.Flags().GetString(segmentPushTypeFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentPushType = &segmentPushTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeSegmentsConfigTimeColumnNameFlags(depth int, m *models.TableConfigV2RealtimeSegmentsConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeColumnNameFlagName := fmt.Sprintf("%v.timeColumnName", cmdPrefix)
	if cmd.Flags().Changed(timeColumnNameFlagName) {

		var timeColumnNameFlagName string
		if cmdPrefix == "" {
			timeColumnNameFlagName = "timeColumnName"
		} else {
			timeColumnNameFlagName = fmt.Sprintf("%v.timeColumnName", cmdPrefix)
		}

		timeColumnNameFlagValue, err := cmd.Flags().GetString(timeColumnNameFlagName)
		if err != nil {
			return err, false
		}
		m.TimeColumnName = &timeColumnNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2RealtimeTableIndexConfig

// register flags to command
func registerModelTableConfigV2RealtimeTableIndexConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2RealtimeTableIndexConfigAggregateMetrics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigAutoGeneratedInvertedIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigCreateInvertedIndexDuringSegmentGeneration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigEnableDefaultStarTree(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigEnableDynamicStarTreeCreation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigInvertedIndexColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigLoadMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigNoDictionaryColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigNoDictionarySizeRatioThreshold(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigNullHandlingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigOptimizeDictionary(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigOptimizeDictionaryForMetrics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigRangeIndexVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigSortedColumn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigVarLengthDictionaryColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigAggregateMetrics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aggregateMetricsDescription := `Required. `

	var aggregateMetricsFlagName string
	if cmdPrefix == "" {
		aggregateMetricsFlagName = "aggregateMetrics"
	} else {
		aggregateMetricsFlagName = fmt.Sprintf("%v.aggregateMetrics", cmdPrefix)
	}

	var aggregateMetricsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(aggregateMetricsFlagName, aggregateMetricsFlagDefault, aggregateMetricsDescription)

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigAutoGeneratedInvertedIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	autoGeneratedInvertedIndexDescription := `Required. `

	var autoGeneratedInvertedIndexFlagName string
	if cmdPrefix == "" {
		autoGeneratedInvertedIndexFlagName = "autoGeneratedInvertedIndex"
	} else {
		autoGeneratedInvertedIndexFlagName = fmt.Sprintf("%v.autoGeneratedInvertedIndex", cmdPrefix)
	}

	var autoGeneratedInvertedIndexFlagDefault bool

	_ = cmd.PersistentFlags().Bool(autoGeneratedInvertedIndexFlagName, autoGeneratedInvertedIndexFlagDefault, autoGeneratedInvertedIndexDescription)

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigCreateInvertedIndexDuringSegmentGeneration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createInvertedIndexDuringSegmentGenerationDescription := `Required. `

	var createInvertedIndexDuringSegmentGenerationFlagName string
	if cmdPrefix == "" {
		createInvertedIndexDuringSegmentGenerationFlagName = "createInvertedIndexDuringSegmentGeneration"
	} else {
		createInvertedIndexDuringSegmentGenerationFlagName = fmt.Sprintf("%v.createInvertedIndexDuringSegmentGeneration", cmdPrefix)
	}

	var createInvertedIndexDuringSegmentGenerationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(createInvertedIndexDuringSegmentGenerationFlagName, createInvertedIndexDuringSegmentGenerationFlagDefault, createInvertedIndexDuringSegmentGenerationDescription)

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigEnableDefaultStarTree(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableDefaultStarTreeDescription := `Required. `

	var enableDefaultStarTreeFlagName string
	if cmdPrefix == "" {
		enableDefaultStarTreeFlagName = "enableDefaultStarTree"
	} else {
		enableDefaultStarTreeFlagName = fmt.Sprintf("%v.enableDefaultStarTree", cmdPrefix)
	}

	var enableDefaultStarTreeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableDefaultStarTreeFlagName, enableDefaultStarTreeFlagDefault, enableDefaultStarTreeDescription)

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigEnableDynamicStarTreeCreation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableDynamicStarTreeCreationDescription := `Required. `

	var enableDynamicStarTreeCreationFlagName string
	if cmdPrefix == "" {
		enableDynamicStarTreeCreationFlagName = "enableDynamicStarTreeCreation"
	} else {
		enableDynamicStarTreeCreationFlagName = fmt.Sprintf("%v.enableDynamicStarTreeCreation", cmdPrefix)
	}

	var enableDynamicStarTreeCreationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableDynamicStarTreeCreationFlagName, enableDynamicStarTreeCreationFlagDefault, enableDynamicStarTreeCreationDescription)

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigInvertedIndexColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: invertedIndexColumns []interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigLoadMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	loadModeDescription := `Required. `

	var loadModeFlagName string
	if cmdPrefix == "" {
		loadModeFlagName = "loadMode"
	} else {
		loadModeFlagName = fmt.Sprintf("%v.loadMode", cmdPrefix)
	}

	var loadModeFlagDefault string

	_ = cmd.PersistentFlags().String(loadModeFlagName, loadModeFlagDefault, loadModeDescription)

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigNoDictionaryColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: noDictionaryColumns []interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigNoDictionarySizeRatioThreshold(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noDictionarySizeRatioThresholdDescription := `Required. `

	var noDictionarySizeRatioThresholdFlagName string
	if cmdPrefix == "" {
		noDictionarySizeRatioThresholdFlagName = "noDictionarySizeRatioThreshold"
	} else {
		noDictionarySizeRatioThresholdFlagName = fmt.Sprintf("%v.noDictionarySizeRatioThreshold", cmdPrefix)
	}

	var noDictionarySizeRatioThresholdFlagDefault float64

	_ = cmd.PersistentFlags().Float64(noDictionarySizeRatioThresholdFlagName, noDictionarySizeRatioThresholdFlagDefault, noDictionarySizeRatioThresholdDescription)

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigNullHandlingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nullHandlingEnabledDescription := `Required. `

	var nullHandlingEnabledFlagName string
	if cmdPrefix == "" {
		nullHandlingEnabledFlagName = "nullHandlingEnabled"
	} else {
		nullHandlingEnabledFlagName = fmt.Sprintf("%v.nullHandlingEnabled", cmdPrefix)
	}

	var nullHandlingEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(nullHandlingEnabledFlagName, nullHandlingEnabledFlagDefault, nullHandlingEnabledDescription)

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigOptimizeDictionary(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	optimizeDictionaryDescription := `Required. `

	var optimizeDictionaryFlagName string
	if cmdPrefix == "" {
		optimizeDictionaryFlagName = "optimizeDictionary"
	} else {
		optimizeDictionaryFlagName = fmt.Sprintf("%v.optimizeDictionary", cmdPrefix)
	}

	var optimizeDictionaryFlagDefault bool

	_ = cmd.PersistentFlags().Bool(optimizeDictionaryFlagName, optimizeDictionaryFlagDefault, optimizeDictionaryDescription)

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigOptimizeDictionaryForMetrics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	optimizeDictionaryForMetricsDescription := `Required. `

	var optimizeDictionaryForMetricsFlagName string
	if cmdPrefix == "" {
		optimizeDictionaryForMetricsFlagName = "optimizeDictionaryForMetrics"
	} else {
		optimizeDictionaryForMetricsFlagName = fmt.Sprintf("%v.optimizeDictionaryForMetrics", cmdPrefix)
	}

	var optimizeDictionaryForMetricsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(optimizeDictionaryForMetricsFlagName, optimizeDictionaryForMetricsFlagDefault, optimizeDictionaryForMetricsDescription)

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigRangeIndexVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rangeIndexVersionDescription := `Required. `

	var rangeIndexVersionFlagName string
	if cmdPrefix == "" {
		rangeIndexVersionFlagName = "rangeIndexVersion"
	} else {
		rangeIndexVersionFlagName = fmt.Sprintf("%v.rangeIndexVersion", cmdPrefix)
	}

	var rangeIndexVersionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(rangeIndexVersionFlagName, rangeIndexVersionFlagDefault, rangeIndexVersionDescription)

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var segmentPartitionConfigFlagName string
	if cmdPrefix == "" {
		segmentPartitionConfigFlagName = "segmentPartitionConfig"
	} else {
		segmentPartitionConfigFlagName = fmt.Sprintf("%v.segmentPartitionConfig", cmdPrefix)
	}

	if err := registerModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigFlags(depth+1, segmentPartitionConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigSortedColumn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: sortedColumn []interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigVarLengthDictionaryColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: varLengthDictionaryColumns []interface{} array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2RealtimeTableIndexConfigFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, aggregateMetricsAdded := retrieveTableConfigV2RealtimeTableIndexConfigAggregateMetricsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aggregateMetricsAdded

	err, autoGeneratedInvertedIndexAdded := retrieveTableConfigV2RealtimeTableIndexConfigAutoGeneratedInvertedIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoGeneratedInvertedIndexAdded

	err, createInvertedIndexDuringSegmentGenerationAdded := retrieveTableConfigV2RealtimeTableIndexConfigCreateInvertedIndexDuringSegmentGenerationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createInvertedIndexDuringSegmentGenerationAdded

	err, enableDefaultStarTreeAdded := retrieveTableConfigV2RealtimeTableIndexConfigEnableDefaultStarTreeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableDefaultStarTreeAdded

	err, enableDynamicStarTreeCreationAdded := retrieveTableConfigV2RealtimeTableIndexConfigEnableDynamicStarTreeCreationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableDynamicStarTreeCreationAdded

	err, invertedIndexColumnsAdded := retrieveTableConfigV2RealtimeTableIndexConfigInvertedIndexColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || invertedIndexColumnsAdded

	err, loadModeAdded := retrieveTableConfigV2RealtimeTableIndexConfigLoadModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || loadModeAdded

	err, noDictionaryColumnsAdded := retrieveTableConfigV2RealtimeTableIndexConfigNoDictionaryColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noDictionaryColumnsAdded

	err, noDictionarySizeRatioThresholdAdded := retrieveTableConfigV2RealtimeTableIndexConfigNoDictionarySizeRatioThresholdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noDictionarySizeRatioThresholdAdded

	err, nullHandlingEnabledAdded := retrieveTableConfigV2RealtimeTableIndexConfigNullHandlingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nullHandlingEnabledAdded

	err, optimizeDictionaryAdded := retrieveTableConfigV2RealtimeTableIndexConfigOptimizeDictionaryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || optimizeDictionaryAdded

	err, optimizeDictionaryForMetricsAdded := retrieveTableConfigV2RealtimeTableIndexConfigOptimizeDictionaryForMetricsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || optimizeDictionaryForMetricsAdded

	err, rangeIndexVersionAdded := retrieveTableConfigV2RealtimeTableIndexConfigRangeIndexVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rangeIndexVersionAdded

	err, segmentPartitionConfigAdded := retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentPartitionConfigAdded

	err, sortedColumnAdded := retrieveTableConfigV2RealtimeTableIndexConfigSortedColumnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sortedColumnAdded

	err, varLengthDictionaryColumnsAdded := retrieveTableConfigV2RealtimeTableIndexConfigVarLengthDictionaryColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || varLengthDictionaryColumnsAdded

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigAggregateMetricsFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aggregateMetricsFlagName := fmt.Sprintf("%v.aggregateMetrics", cmdPrefix)
	if cmd.Flags().Changed(aggregateMetricsFlagName) {

		var aggregateMetricsFlagName string
		if cmdPrefix == "" {
			aggregateMetricsFlagName = "aggregateMetrics"
		} else {
			aggregateMetricsFlagName = fmt.Sprintf("%v.aggregateMetrics", cmdPrefix)
		}

		aggregateMetricsFlagValue, err := cmd.Flags().GetBool(aggregateMetricsFlagName)
		if err != nil {
			return err, false
		}
		m.AggregateMetrics = &aggregateMetricsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigAutoGeneratedInvertedIndexFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoGeneratedInvertedIndexFlagName := fmt.Sprintf("%v.autoGeneratedInvertedIndex", cmdPrefix)
	if cmd.Flags().Changed(autoGeneratedInvertedIndexFlagName) {

		var autoGeneratedInvertedIndexFlagName string
		if cmdPrefix == "" {
			autoGeneratedInvertedIndexFlagName = "autoGeneratedInvertedIndex"
		} else {
			autoGeneratedInvertedIndexFlagName = fmt.Sprintf("%v.autoGeneratedInvertedIndex", cmdPrefix)
		}

		autoGeneratedInvertedIndexFlagValue, err := cmd.Flags().GetBool(autoGeneratedInvertedIndexFlagName)
		if err != nil {
			return err, false
		}
		m.AutoGeneratedInvertedIndex = &autoGeneratedInvertedIndexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigCreateInvertedIndexDuringSegmentGenerationFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createInvertedIndexDuringSegmentGenerationFlagName := fmt.Sprintf("%v.createInvertedIndexDuringSegmentGeneration", cmdPrefix)
	if cmd.Flags().Changed(createInvertedIndexDuringSegmentGenerationFlagName) {

		var createInvertedIndexDuringSegmentGenerationFlagName string
		if cmdPrefix == "" {
			createInvertedIndexDuringSegmentGenerationFlagName = "createInvertedIndexDuringSegmentGeneration"
		} else {
			createInvertedIndexDuringSegmentGenerationFlagName = fmt.Sprintf("%v.createInvertedIndexDuringSegmentGeneration", cmdPrefix)
		}

		createInvertedIndexDuringSegmentGenerationFlagValue, err := cmd.Flags().GetBool(createInvertedIndexDuringSegmentGenerationFlagName)
		if err != nil {
			return err, false
		}
		m.CreateInvertedIndexDuringSegmentGeneration = &createInvertedIndexDuringSegmentGenerationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigEnableDefaultStarTreeFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableDefaultStarTreeFlagName := fmt.Sprintf("%v.enableDefaultStarTree", cmdPrefix)
	if cmd.Flags().Changed(enableDefaultStarTreeFlagName) {

		var enableDefaultStarTreeFlagName string
		if cmdPrefix == "" {
			enableDefaultStarTreeFlagName = "enableDefaultStarTree"
		} else {
			enableDefaultStarTreeFlagName = fmt.Sprintf("%v.enableDefaultStarTree", cmdPrefix)
		}

		enableDefaultStarTreeFlagValue, err := cmd.Flags().GetBool(enableDefaultStarTreeFlagName)
		if err != nil {
			return err, false
		}
		m.EnableDefaultStarTree = &enableDefaultStarTreeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigEnableDynamicStarTreeCreationFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableDynamicStarTreeCreationFlagName := fmt.Sprintf("%v.enableDynamicStarTreeCreation", cmdPrefix)
	if cmd.Flags().Changed(enableDynamicStarTreeCreationFlagName) {

		var enableDynamicStarTreeCreationFlagName string
		if cmdPrefix == "" {
			enableDynamicStarTreeCreationFlagName = "enableDynamicStarTreeCreation"
		} else {
			enableDynamicStarTreeCreationFlagName = fmt.Sprintf("%v.enableDynamicStarTreeCreation", cmdPrefix)
		}

		enableDynamicStarTreeCreationFlagValue, err := cmd.Flags().GetBool(enableDynamicStarTreeCreationFlagName)
		if err != nil {
			return err, false
		}
		m.EnableDynamicStarTreeCreation = &enableDynamicStarTreeCreationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigInvertedIndexColumnsFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	invertedIndexColumnsFlagName := fmt.Sprintf("%v.invertedIndexColumns", cmdPrefix)
	if cmd.Flags().Changed(invertedIndexColumnsFlagName) {
		// warning: invertedIndexColumns array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigLoadModeFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	loadModeFlagName := fmt.Sprintf("%v.loadMode", cmdPrefix)
	if cmd.Flags().Changed(loadModeFlagName) {

		var loadModeFlagName string
		if cmdPrefix == "" {
			loadModeFlagName = "loadMode"
		} else {
			loadModeFlagName = fmt.Sprintf("%v.loadMode", cmdPrefix)
		}

		loadModeFlagValue, err := cmd.Flags().GetString(loadModeFlagName)
		if err != nil {
			return err, false
		}
		m.LoadMode = &loadModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigNoDictionaryColumnsFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noDictionaryColumnsFlagName := fmt.Sprintf("%v.noDictionaryColumns", cmdPrefix)
	if cmd.Flags().Changed(noDictionaryColumnsFlagName) {
		// warning: noDictionaryColumns array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigNoDictionarySizeRatioThresholdFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noDictionarySizeRatioThresholdFlagName := fmt.Sprintf("%v.noDictionarySizeRatioThreshold", cmdPrefix)
	if cmd.Flags().Changed(noDictionarySizeRatioThresholdFlagName) {

		var noDictionarySizeRatioThresholdFlagName string
		if cmdPrefix == "" {
			noDictionarySizeRatioThresholdFlagName = "noDictionarySizeRatioThreshold"
		} else {
			noDictionarySizeRatioThresholdFlagName = fmt.Sprintf("%v.noDictionarySizeRatioThreshold", cmdPrefix)
		}

		noDictionarySizeRatioThresholdFlagValue, err := cmd.Flags().GetFloat64(noDictionarySizeRatioThresholdFlagName)
		if err != nil {
			return err, false
		}
		m.NoDictionarySizeRatioThreshold = &noDictionarySizeRatioThresholdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigNullHandlingEnabledFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nullHandlingEnabledFlagName := fmt.Sprintf("%v.nullHandlingEnabled", cmdPrefix)
	if cmd.Flags().Changed(nullHandlingEnabledFlagName) {

		var nullHandlingEnabledFlagName string
		if cmdPrefix == "" {
			nullHandlingEnabledFlagName = "nullHandlingEnabled"
		} else {
			nullHandlingEnabledFlagName = fmt.Sprintf("%v.nullHandlingEnabled", cmdPrefix)
		}

		nullHandlingEnabledFlagValue, err := cmd.Flags().GetBool(nullHandlingEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.NullHandlingEnabled = &nullHandlingEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigOptimizeDictionaryFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	optimizeDictionaryFlagName := fmt.Sprintf("%v.optimizeDictionary", cmdPrefix)
	if cmd.Flags().Changed(optimizeDictionaryFlagName) {

		var optimizeDictionaryFlagName string
		if cmdPrefix == "" {
			optimizeDictionaryFlagName = "optimizeDictionary"
		} else {
			optimizeDictionaryFlagName = fmt.Sprintf("%v.optimizeDictionary", cmdPrefix)
		}

		optimizeDictionaryFlagValue, err := cmd.Flags().GetBool(optimizeDictionaryFlagName)
		if err != nil {
			return err, false
		}
		m.OptimizeDictionary = &optimizeDictionaryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigOptimizeDictionaryForMetricsFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	optimizeDictionaryForMetricsFlagName := fmt.Sprintf("%v.optimizeDictionaryForMetrics", cmdPrefix)
	if cmd.Flags().Changed(optimizeDictionaryForMetricsFlagName) {

		var optimizeDictionaryForMetricsFlagName string
		if cmdPrefix == "" {
			optimizeDictionaryForMetricsFlagName = "optimizeDictionaryForMetrics"
		} else {
			optimizeDictionaryForMetricsFlagName = fmt.Sprintf("%v.optimizeDictionaryForMetrics", cmdPrefix)
		}

		optimizeDictionaryForMetricsFlagValue, err := cmd.Flags().GetBool(optimizeDictionaryForMetricsFlagName)
		if err != nil {
			return err, false
		}
		m.OptimizeDictionaryForMetrics = &optimizeDictionaryForMetricsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigRangeIndexVersionFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rangeIndexVersionFlagName := fmt.Sprintf("%v.rangeIndexVersion", cmdPrefix)
	if cmd.Flags().Changed(rangeIndexVersionFlagName) {

		var rangeIndexVersionFlagName string
		if cmdPrefix == "" {
			rangeIndexVersionFlagName = "rangeIndexVersion"
		} else {
			rangeIndexVersionFlagName = fmt.Sprintf("%v.rangeIndexVersion", cmdPrefix)
		}

		rangeIndexVersionFlagValue, err := cmd.Flags().GetInt64(rangeIndexVersionFlagName)
		if err != nil {
			return err, false
		}
		m.RangeIndexVersion = &rangeIndexVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentPartitionConfigFlagName := fmt.Sprintf("%v.segmentPartitionConfig", cmdPrefix)
	if cmd.Flags().Changed(segmentPartitionConfigFlagName) {
		// info: complex object segmentPartitionConfig TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfig is retrieved outside this Changed() block
	}
	segmentPartitionConfigFlagValue := m.SegmentPartitionConfig
	if swag.IsZero(segmentPartitionConfigFlagValue) {
		segmentPartitionConfigFlagValue = &models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfig{}
	}

	err, segmentPartitionConfigAdded := retrieveModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigFlags(depth+1, segmentPartitionConfigFlagValue, segmentPartitionConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentPartitionConfigAdded
	if segmentPartitionConfigAdded {
		m.SegmentPartitionConfig = segmentPartitionConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigSortedColumnFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sortedColumnFlagName := fmt.Sprintf("%v.sortedColumn", cmdPrefix)
	if cmd.Flags().Changed(sortedColumnFlagName) {
		// warning: sortedColumn array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigVarLengthDictionaryColumnsFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	varLengthDictionaryColumnsFlagName := fmt.Sprintf("%v.varLengthDictionaryColumns", cmdPrefix)
	if cmd.Flags().Changed(varLengthDictionaryColumnsFlagName) {
		// warning: varLengthDictionaryColumns array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfig

// register flags to command
func registerModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var columnPartitionMapFlagName string
	if cmdPrefix == "" {
		columnPartitionMapFlagName = "columnPartitionMap"
	} else {
		columnPartitionMapFlagName = fmt.Sprintf("%v.columnPartitionMap", cmdPrefix)
	}

	if err := registerModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapFlags(depth+1, columnPartitionMapFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, columnPartitionMapAdded := retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || columnPartitionMapAdded

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	columnPartitionMapFlagName := fmt.Sprintf("%v.columnPartitionMap", cmdPrefix)
	if cmd.Flags().Changed(columnPartitionMapFlagName) {
		// info: complex object columnPartitionMap TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMap is retrieved outside this Changed() block
	}
	columnPartitionMapFlagValue := m.ColumnPartitionMap
	if swag.IsZero(columnPartitionMapFlagValue) {
		columnPartitionMapFlagValue = &models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMap{}
	}

	err, columnPartitionMapAdded := retrieveModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapFlags(depth+1, columnPartitionMapFlagValue, columnPartitionMapFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || columnPartitionMapAdded
	if columnPartitionMapAdded {
		m.ColumnPartitionMap = columnPartitionMapFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMap

// register flags to command
func registerModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var cityFlagName string
	if cmdPrefix == "" {
		cityFlagName = "city"
	} else {
		cityFlagName = fmt.Sprintf("%v.city", cmdPrefix)
	}

	if err := registerModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityFlags(depth+1, cityFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	if err := registerModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDFlags(depth+1, idFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMap, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cityAdded := retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cityAdded

	err, idAdded := retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMap, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cityFlagName := fmt.Sprintf("%v.city", cmdPrefix)
	if cmd.Flags().Changed(cityFlagName) {
		// info: complex object city TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCity is retrieved outside this Changed() block
	}
	cityFlagValue := m.City
	if swag.IsZero(cityFlagValue) {
		cityFlagValue = &models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCity{}
	}

	err, cityAdded := retrieveModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityFlags(depth+1, cityFlagValue, cityFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cityAdded
	if cityAdded {
		m.City = cityFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMap, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {
		// info: complex object id TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapID is retrieved outside this Changed() block
	}
	idFlagValue := m.ID
	if swag.IsZero(idFlagValue) {
		idFlagValue = &models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapID{}
	}

	err, idAdded := retrieveModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDFlags(depth+1, idFlagValue, idFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded
	if idAdded {
		m.ID = idFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCity

// register flags to command
func registerModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityFunctionName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityNumPartitions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityFunctionName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	functionNameDescription := `Required. `

	var functionNameFlagName string
	if cmdPrefix == "" {
		functionNameFlagName = "functionName"
	} else {
		functionNameFlagName = fmt.Sprintf("%v.functionName", cmdPrefix)
	}

	var functionNameFlagDefault string

	_ = cmd.PersistentFlags().String(functionNameFlagName, functionNameFlagDefault, functionNameDescription)

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityNumPartitions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numPartitionsDescription := `Required. `

	var numPartitionsFlagName string
	if cmdPrefix == "" {
		numPartitionsFlagName = "numPartitions"
	} else {
		numPartitionsFlagName = fmt.Sprintf("%v.numPartitions", cmdPrefix)
	}

	var numPartitionsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(numPartitionsFlagName, numPartitionsFlagDefault, numPartitionsDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, functionNameAdded := retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityFunctionNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || functionNameAdded

	err, numPartitionsAdded := retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityNumPartitionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numPartitionsAdded

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityFunctionNameFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	functionNameFlagName := fmt.Sprintf("%v.functionName", cmdPrefix)
	if cmd.Flags().Changed(functionNameFlagName) {

		var functionNameFlagName string
		if cmdPrefix == "" {
			functionNameFlagName = "functionName"
		} else {
			functionNameFlagName = fmt.Sprintf("%v.functionName", cmdPrefix)
		}

		functionNameFlagValue, err := cmd.Flags().GetString(functionNameFlagName)
		if err != nil {
			return err, false
		}
		m.FunctionName = &functionNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCityNumPartitionsFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapCity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numPartitionsFlagName := fmt.Sprintf("%v.numPartitions", cmdPrefix)
	if cmd.Flags().Changed(numPartitionsFlagName) {

		var numPartitionsFlagName string
		if cmdPrefix == "" {
			numPartitionsFlagName = "numPartitions"
		} else {
			numPartitionsFlagName = fmt.Sprintf("%v.numPartitions", cmdPrefix)
		}

		numPartitionsFlagValue, err := cmd.Flags().GetInt64(numPartitionsFlagName)
		if err != nil {
			return err, false
		}
		m.NumPartitions = &numPartitionsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapID

// register flags to command
func registerModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDFunctionName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDNumPartitions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDFunctionName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	functionNameDescription := `Required. `

	var functionNameFlagName string
	if cmdPrefix == "" {
		functionNameFlagName = "functionName"
	} else {
		functionNameFlagName = fmt.Sprintf("%v.functionName", cmdPrefix)
	}

	var functionNameFlagDefault string

	_ = cmd.PersistentFlags().String(functionNameFlagName, functionNameFlagDefault, functionNameDescription)

	return nil
}

func registerTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDNumPartitions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numPartitionsDescription := `Required. `

	var numPartitionsFlagName string
	if cmdPrefix == "" {
		numPartitionsFlagName = "numPartitions"
	} else {
		numPartitionsFlagName = fmt.Sprintf("%v.numPartitions", cmdPrefix)
	}

	var numPartitionsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(numPartitionsFlagName, numPartitionsFlagDefault, numPartitionsDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapID, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, functionNameAdded := retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDFunctionNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || functionNameAdded

	err, numPartitionsAdded := retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDNumPartitionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numPartitionsAdded

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDFunctionNameFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapID, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	functionNameFlagName := fmt.Sprintf("%v.functionName", cmdPrefix)
	if cmd.Flags().Changed(functionNameFlagName) {

		var functionNameFlagName string
		if cmdPrefix == "" {
			functionNameFlagName = "functionName"
		} else {
			functionNameFlagName = fmt.Sprintf("%v.functionName", cmdPrefix)
		}

		functionNameFlagValue, err := cmd.Flags().GetString(functionNameFlagName)
		if err != nil {
			return err, false
		}
		m.FunctionName = &functionNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapIDNumPartitionsFlags(depth int, m *models.TableConfigV2RealtimeTableIndexConfigSegmentPartitionConfigColumnPartitionMapID, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numPartitionsFlagName := fmt.Sprintf("%v.numPartitions", cmdPrefix)
	if cmd.Flags().Changed(numPartitionsFlagName) {

		var numPartitionsFlagName string
		if cmdPrefix == "" {
			numPartitionsFlagName = "numPartitions"
		} else {
			numPartitionsFlagName = fmt.Sprintf("%v.numPartitions", cmdPrefix)
		}

		numPartitionsFlagValue, err := cmd.Flags().GetInt64(numPartitionsFlagName)
		if err != nil {
			return err, false
		}
		m.NumPartitions = &numPartitionsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2RealtimeTenants

// register flags to command
func registerModelTableConfigV2RealtimeTenantsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2RealtimeTenantsBroker(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeTenantsServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeTenantsBroker(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	brokerDescription := `Required. `

	var brokerFlagName string
	if cmdPrefix == "" {
		brokerFlagName = "broker"
	} else {
		brokerFlagName = fmt.Sprintf("%v.broker", cmdPrefix)
	}

	var brokerFlagDefault string

	_ = cmd.PersistentFlags().String(brokerFlagName, brokerFlagDefault, brokerDescription)

	return nil
}

func registerTableConfigV2RealtimeTenantsServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverDescription := `Required. `

	var serverFlagName string
	if cmdPrefix == "" {
		serverFlagName = "server"
	} else {
		serverFlagName = fmt.Sprintf("%v.server", cmdPrefix)
	}

	var serverFlagDefault string

	_ = cmd.PersistentFlags().String(serverFlagName, serverFlagDefault, serverDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2RealtimeTenantsFlags(depth int, m *models.TableConfigV2RealtimeTenants, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, brokerAdded := retrieveTableConfigV2RealtimeTenantsBrokerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || brokerAdded

	err, serverAdded := retrieveTableConfigV2RealtimeTenantsServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverAdded

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTenantsBrokerFlags(depth int, m *models.TableConfigV2RealtimeTenants, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	brokerFlagName := fmt.Sprintf("%v.broker", cmdPrefix)
	if cmd.Flags().Changed(brokerFlagName) {

		var brokerFlagName string
		if cmdPrefix == "" {
			brokerFlagName = "broker"
		} else {
			brokerFlagName = fmt.Sprintf("%v.broker", cmdPrefix)
		}

		brokerFlagValue, err := cmd.Flags().GetString(brokerFlagName)
		if err != nil {
			return err, false
		}
		m.Broker = &brokerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeTenantsServerFlags(depth int, m *models.TableConfigV2RealtimeTenants, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverFlagName := fmt.Sprintf("%v.server", cmdPrefix)
	if cmd.Flags().Changed(serverFlagName) {

		var serverFlagName string
		if cmdPrefix == "" {
			serverFlagName = "server"
		} else {
			serverFlagName = fmt.Sprintf("%v.server", cmdPrefix)
		}

		serverFlagValue, err := cmd.Flags().GetString(serverFlagName)
		if err != nil {
			return err, false
		}
		m.Server = &serverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2RealtimeUpsertConfig

// register flags to command
func registerModelTableConfigV2RealtimeUpsertConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2RealtimeUpsertConfigEnableSnapshot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeUpsertConfigHashFunction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2RealtimeUpsertConfigMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2RealtimeUpsertConfigEnableSnapshot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableSnapshotDescription := `Required. `

	var enableSnapshotFlagName string
	if cmdPrefix == "" {
		enableSnapshotFlagName = "enableSnapshot"
	} else {
		enableSnapshotFlagName = fmt.Sprintf("%v.enableSnapshot", cmdPrefix)
	}

	var enableSnapshotFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableSnapshotFlagName, enableSnapshotFlagDefault, enableSnapshotDescription)

	return nil
}

func registerTableConfigV2RealtimeUpsertConfigHashFunction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hashFunctionDescription := `Required. `

	var hashFunctionFlagName string
	if cmdPrefix == "" {
		hashFunctionFlagName = "hashFunction"
	} else {
		hashFunctionFlagName = fmt.Sprintf("%v.hashFunction", cmdPrefix)
	}

	var hashFunctionFlagDefault string

	_ = cmd.PersistentFlags().String(hashFunctionFlagName, hashFunctionFlagDefault, hashFunctionDescription)

	return nil
}

func registerTableConfigV2RealtimeUpsertConfigMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `Required. `

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2RealtimeUpsertConfigFlags(depth int, m *models.TableConfigV2RealtimeUpsertConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enableSnapshotAdded := retrieveTableConfigV2RealtimeUpsertConfigEnableSnapshotFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableSnapshotAdded

	err, hashFunctionAdded := retrieveTableConfigV2RealtimeUpsertConfigHashFunctionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hashFunctionAdded

	err, modeAdded := retrieveTableConfigV2RealtimeUpsertConfigModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeUpsertConfigEnableSnapshotFlags(depth int, m *models.TableConfigV2RealtimeUpsertConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableSnapshotFlagName := fmt.Sprintf("%v.enableSnapshot", cmdPrefix)
	if cmd.Flags().Changed(enableSnapshotFlagName) {

		var enableSnapshotFlagName string
		if cmdPrefix == "" {
			enableSnapshotFlagName = "enableSnapshot"
		} else {
			enableSnapshotFlagName = fmt.Sprintf("%v.enableSnapshot", cmdPrefix)
		}

		enableSnapshotFlagValue, err := cmd.Flags().GetBool(enableSnapshotFlagName)
		if err != nil {
			return err, false
		}
		m.EnableSnapshot = &enableSnapshotFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeUpsertConfigHashFunctionFlags(depth int, m *models.TableConfigV2RealtimeUpsertConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hashFunctionFlagName := fmt.Sprintf("%v.hashFunction", cmdPrefix)
	if cmd.Flags().Changed(hashFunctionFlagName) {

		var hashFunctionFlagName string
		if cmdPrefix == "" {
			hashFunctionFlagName = "hashFunction"
		} else {
			hashFunctionFlagName = fmt.Sprintf("%v.hashFunction", cmdPrefix)
		}

		hashFunctionFlagValue, err := cmd.Flags().GetString(hashFunctionFlagName)
		if err != nil {
			return err, false
		}
		m.HashFunction = &hashFunctionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigV2RealtimeUpsertConfigModeFlags(depth int, m *models.TableConfigV2RealtimeUpsertConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = &modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TableConfigV2Schema

// register flags to command
func registerModelTableConfigV2SchemaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigV2SchemaDateTimeFieldSpecs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2SchemaDimensionFieldSpecs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2SchemaMetricFieldSpecs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2SchemaPrimaryKeyColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigV2SchemaSchemaName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigV2SchemaDateTimeFieldSpecs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: dateTimeFieldSpecs []interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigV2SchemaDimensionFieldSpecs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: dimensionFieldSpecs []interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigV2SchemaMetricFieldSpecs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: metricFieldSpecs []interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigV2SchemaPrimaryKeyColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primaryKeyColumns []interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigV2SchemaSchemaName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	schemaNameDescription := `Required. `

	var schemaNameFlagName string
	if cmdPrefix == "" {
		schemaNameFlagName = "schemaName"
	} else {
		schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
	}

	var schemaNameFlagDefault string

	_ = cmd.PersistentFlags().String(schemaNameFlagName, schemaNameFlagDefault, schemaNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigV2SchemaFlags(depth int, m *models.TableConfigV2Schema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dateTimeFieldSpecsAdded := retrieveTableConfigV2SchemaDateTimeFieldSpecsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dateTimeFieldSpecsAdded

	err, dimensionFieldSpecsAdded := retrieveTableConfigV2SchemaDimensionFieldSpecsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dimensionFieldSpecsAdded

	err, metricFieldSpecsAdded := retrieveTableConfigV2SchemaMetricFieldSpecsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metricFieldSpecsAdded

	err, primaryKeyColumnsAdded := retrieveTableConfigV2SchemaPrimaryKeyColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || primaryKeyColumnsAdded

	err, schemaNameAdded := retrieveTableConfigV2SchemaSchemaNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || schemaNameAdded

	return nil, retAdded
}

func retrieveTableConfigV2SchemaDateTimeFieldSpecsFlags(depth int, m *models.TableConfigV2Schema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dateTimeFieldSpecsFlagName := fmt.Sprintf("%v.dateTimeFieldSpecs", cmdPrefix)
	if cmd.Flags().Changed(dateTimeFieldSpecsFlagName) {
		// warning: dateTimeFieldSpecs array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigV2SchemaDimensionFieldSpecsFlags(depth int, m *models.TableConfigV2Schema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dimensionFieldSpecsFlagName := fmt.Sprintf("%v.dimensionFieldSpecs", cmdPrefix)
	if cmd.Flags().Changed(dimensionFieldSpecsFlagName) {
		// warning: dimensionFieldSpecs array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigV2SchemaMetricFieldSpecsFlags(depth int, m *models.TableConfigV2Schema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metricFieldSpecsFlagName := fmt.Sprintf("%v.metricFieldSpecs", cmdPrefix)
	if cmd.Flags().Changed(metricFieldSpecsFlagName) {
		// warning: metricFieldSpecs array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigV2SchemaPrimaryKeyColumnsFlags(depth int, m *models.TableConfigV2Schema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	primaryKeyColumnsFlagName := fmt.Sprintf("%v.primaryKeyColumns", cmdPrefix)
	if cmd.Flags().Changed(primaryKeyColumnsFlagName) {
		// warning: primaryKeyColumns array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigV2SchemaSchemaNameFlags(depth int, m *models.TableConfigV2Schema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	schemaNameFlagName := fmt.Sprintf("%v.schemaName", cmdPrefix)
	if cmd.Flags().Changed(schemaNameFlagName) {

		var schemaNameFlagName string
		if cmdPrefix == "" {
			schemaNameFlagName = "schemaName"
		} else {
			schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
		}

		schemaNameFlagValue, err := cmd.Flags().GetString(schemaNameFlagName)
		if err != nil {
			return err, false
		}
		m.SchemaName = &schemaNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
