// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/table"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTableReplaceInstanceCmd returns a cmd to handle operation replaceInstance
func makeOperationTableReplaceInstanceCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "replaceInstance",
		Short: ``,
		RunE:  runOperationTableReplaceInstance,
	}

	if err := registerOperationTableReplaceInstanceParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTableReplaceInstance uses cmd flags to call endpoint api
func runOperationTableReplaceInstance(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := table.NewReplaceInstanceParams()
	if err, _ := retrieveOperationTableReplaceInstanceNewInstanceIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableReplaceInstanceOldInstanceIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableReplaceInstanceTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableReplaceInstanceTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTableReplaceInstanceResult(appCli.Table.ReplaceInstance(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTableReplaceInstanceParamFlags registers all flags needed to fill params
func registerOperationTableReplaceInstanceParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTableReplaceInstanceNewInstanceIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableReplaceInstanceOldInstanceIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableReplaceInstanceTableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableReplaceInstanceTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTableReplaceInstanceNewInstanceIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	newInstanceIdDescription := `Required. New instance to replace with`

	var newInstanceIdFlagName string
	if cmdPrefix == "" {
		newInstanceIdFlagName = "newInstanceId"
	} else {
		newInstanceIdFlagName = fmt.Sprintf("%v.newInstanceId", cmdPrefix)
	}

	var newInstanceIdFlagDefault string

	_ = cmd.PersistentFlags().String(newInstanceIdFlagName, newInstanceIdFlagDefault, newInstanceIdDescription)

	return nil
}
func registerOperationTableReplaceInstanceOldInstanceIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	oldInstanceIdDescription := `Required. Old instance to be replaced`

	var oldInstanceIdFlagName string
	if cmdPrefix == "" {
		oldInstanceIdFlagName = "oldInstanceId"
	} else {
		oldInstanceIdFlagName = fmt.Sprintf("%v.oldInstanceId", cmdPrefix)
	}

	var oldInstanceIdFlagDefault string

	_ = cmd.PersistentFlags().String(oldInstanceIdFlagName, oldInstanceIdFlagDefault, oldInstanceIdDescription)

	return nil
}
func registerOperationTableReplaceInstanceTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Name of the table`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}
func registerOperationTableReplaceInstanceTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `Enum: ["OFFLINE","CONSUMING","COMPLETED"]. OFFLINE|CONSUMING|COMPLETED`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["OFFLINE","CONSUMING","COMPLETED"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func retrieveOperationTableReplaceInstanceNewInstanceIDFlag(m *table.ReplaceInstanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("newInstanceId") {

		var newInstanceIdFlagName string
		if cmdPrefix == "" {
			newInstanceIdFlagName = "newInstanceId"
		} else {
			newInstanceIdFlagName = fmt.Sprintf("%v.newInstanceId", cmdPrefix)
		}

		newInstanceIdFlagValue, err := cmd.Flags().GetString(newInstanceIdFlagName)
		if err != nil {
			return err, false
		}
		m.NewInstanceID = newInstanceIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableReplaceInstanceOldInstanceIDFlag(m *table.ReplaceInstanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("oldInstanceId") {

		var oldInstanceIdFlagName string
		if cmdPrefix == "" {
			oldInstanceIdFlagName = "oldInstanceId"
		} else {
			oldInstanceIdFlagName = fmt.Sprintf("%v.oldInstanceId", cmdPrefix)
		}

		oldInstanceIdFlagValue, err := cmd.Flags().GetString(oldInstanceIdFlagName)
		if err != nil {
			return err, false
		}
		m.OldInstanceID = oldInstanceIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableReplaceInstanceTableNameFlag(m *table.ReplaceInstanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableReplaceInstanceTypeFlag(m *table.ReplaceInstanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

	}
	return nil, retAdded
}

// parseOperationTableReplaceInstanceResult parses request result and return the string content
func parseOperationTableReplaceInstanceResult(resp0 *table.ReplaceInstanceOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*table.ReplaceInstanceOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
