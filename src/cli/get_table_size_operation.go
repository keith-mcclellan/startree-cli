// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/table"

	"github.com/spf13/cobra"
)

// makeOperationTableGetTableSizeCmd returns a cmd to handle operation getTableSize
func makeOperationTableGetTableSizeCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getTableSize",
		Short: `Get table size details. Table size is the size of untarred segments including replication`,
		RunE:  runOperationTableGetTableSize,
	}

	if err := registerOperationTableGetTableSizeParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTableGetTableSize uses cmd flags to call endpoint api
func runOperationTableGetTableSize(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := table.NewGetTableSizeParams()
	if err, _ := retrieveOperationTableGetTableSizeDetailedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableGetTableSizeTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTableGetTableSizeResult(appCli.Table.GetTableSize(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTableGetTableSizeParamFlags registers all flags needed to fill params
func registerOperationTableGetTableSizeParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTableGetTableSizeDetailedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableGetTableSizeTableNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTableGetTableSizeDetailedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	detailedDescription := `Get detailed information`

	var detailedFlagName string
	if cmdPrefix == "" {
		detailedFlagName = "detailed"
	} else {
		detailedFlagName = fmt.Sprintf("%v.detailed", cmdPrefix)
	}

	var detailedFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(detailedFlagName, detailedFlagDefault, detailedDescription)

	return nil
}
func registerOperationTableGetTableSizeTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Table name without type`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}

func retrieveOperationTableGetTableSizeDetailedFlag(m *table.GetTableSizeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("detailed") {

		var detailedFlagName string
		if cmdPrefix == "" {
			detailedFlagName = "detailed"
		} else {
			detailedFlagName = fmt.Sprintf("%v.detailed", cmdPrefix)
		}

		detailedFlagValue, err := cmd.Flags().GetBool(detailedFlagName)
		if err != nil {
			return err, false
		}
		m.Detailed = &detailedFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableGetTableSizeTableNameFlag(m *table.GetTableSizeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}

// parseOperationTableGetTableSizeResult parses request result and return the string content
func parseOperationTableGetTableSizeResult(resp0 *table.GetTableSizeOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning getTableSizeOK is not supported

		// Non schema case: warning getTableSizeNotFound is not supported

		// Non schema case: warning getTableSizeInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response getTableSizeOK is not supported by go-swagger cli yet.

	return "", nil
}
