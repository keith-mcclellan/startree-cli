// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/periodic_task"

	"github.com/spf13/cobra"
)

// makeOperationPeriodicTaskRunPeriodicTaskCmd returns a cmd to handle operation runPeriodicTask
func makeOperationPeriodicTaskRunPeriodicTaskCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "runPeriodicTask",
		Short: ``,
		RunE:  runOperationPeriodicTaskRunPeriodicTask,
	}

	if err := registerOperationPeriodicTaskRunPeriodicTaskParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPeriodicTaskRunPeriodicTask uses cmd flags to call endpoint api
func runOperationPeriodicTaskRunPeriodicTask(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := periodic_task.NewRunPeriodicTaskParams()
	if err, _ := retrieveOperationPeriodicTaskRunPeriodicTaskTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPeriodicTaskRunPeriodicTaskTasknameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPeriodicTaskRunPeriodicTaskTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationPeriodicTaskRunPeriodicTaskResult(appCli.PeriodicTask.RunPeriodicTask(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationPeriodicTaskRunPeriodicTaskParamFlags registers all flags needed to fill params
func registerOperationPeriodicTaskRunPeriodicTaskParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPeriodicTaskRunPeriodicTaskTableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPeriodicTaskRunPeriodicTaskTasknameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPeriodicTaskRunPeriodicTaskTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPeriodicTaskRunPeriodicTaskTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Name of the table`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}
func registerOperationPeriodicTaskRunPeriodicTaskTasknameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tasknameDescription := `Required. Periodic task name`

	var tasknameFlagName string
	if cmdPrefix == "" {
		tasknameFlagName = "taskname"
	} else {
		tasknameFlagName = fmt.Sprintf("%v.taskname", cmdPrefix)
	}

	var tasknameFlagDefault string

	_ = cmd.PersistentFlags().String(tasknameFlagName, tasknameFlagDefault, tasknameDescription)

	return nil
}
func registerOperationPeriodicTaskRunPeriodicTaskTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `OFFLINE | REALTIME`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func retrieveOperationPeriodicTaskRunPeriodicTaskTableNameFlag(m *periodic_task.RunPeriodicTaskParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = &tableNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPeriodicTaskRunPeriodicTaskTasknameFlag(m *periodic_task.RunPeriodicTaskParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("taskname") {

		var tasknameFlagName string
		if cmdPrefix == "" {
			tasknameFlagName = "taskname"
		} else {
			tasknameFlagName = fmt.Sprintf("%v.taskname", cmdPrefix)
		}

		tasknameFlagValue, err := cmd.Flags().GetString(tasknameFlagName)
		if err != nil {
			return err, false
		}
		m.Taskname = tasknameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPeriodicTaskRunPeriodicTaskTypeFlag(m *periodic_task.RunPeriodicTaskParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

	}
	return nil, retAdded
}

// parseOperationPeriodicTaskRunPeriodicTaskResult parses request result and return the string content
func parseOperationPeriodicTaskRunPeriodicTaskResult(respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning runPeriodicTask default is not supported

		return "", respErr
	}
	return "", nil
}
