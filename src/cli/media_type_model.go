// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for MediaType

// register flags to command
func registerModelMediaTypeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMediaTypeParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMediaTypeSubtype(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMediaTypeType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMediaTypeWildcardSubtype(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMediaTypeWildcardType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMediaTypeParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: parameters map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerMediaTypeSubtype(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	subtypeDescription := ``

	var subtypeFlagName string
	if cmdPrefix == "" {
		subtypeFlagName = "subtype"
	} else {
		subtypeFlagName = fmt.Sprintf("%v.subtype", cmdPrefix)
	}

	var subtypeFlagDefault string

	_ = cmd.PersistentFlags().String(subtypeFlagName, subtypeFlagDefault, subtypeDescription)

	return nil
}

func registerMediaTypeType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerMediaTypeWildcardSubtype(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wildcardSubtypeDescription := ``

	var wildcardSubtypeFlagName string
	if cmdPrefix == "" {
		wildcardSubtypeFlagName = "wildcardSubtype"
	} else {
		wildcardSubtypeFlagName = fmt.Sprintf("%v.wildcardSubtype", cmdPrefix)
	}

	var wildcardSubtypeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(wildcardSubtypeFlagName, wildcardSubtypeFlagDefault, wildcardSubtypeDescription)

	return nil
}

func registerMediaTypeWildcardType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wildcardTypeDescription := ``

	var wildcardTypeFlagName string
	if cmdPrefix == "" {
		wildcardTypeFlagName = "wildcardType"
	} else {
		wildcardTypeFlagName = fmt.Sprintf("%v.wildcardType", cmdPrefix)
	}

	var wildcardTypeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(wildcardTypeFlagName, wildcardTypeFlagDefault, wildcardTypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMediaTypeFlags(depth int, m *models.MediaType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, parametersAdded := retrieveMediaTypeParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parametersAdded

	err, subtypeAdded := retrieveMediaTypeSubtypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subtypeAdded

	err, typeAdded := retrieveMediaTypeTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, wildcardSubtypeAdded := retrieveMediaTypeWildcardSubtypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wildcardSubtypeAdded

	err, wildcardTypeAdded := retrieveMediaTypeWildcardTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wildcardTypeAdded

	return nil, retAdded
}

func retrieveMediaTypeParametersFlags(depth int, m *models.MediaType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parametersFlagName := fmt.Sprintf("%v.parameters", cmdPrefix)
	if cmd.Flags().Changed(parametersFlagName) {
		// warning: parameters map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMediaTypeSubtypeFlags(depth int, m *models.MediaType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subtypeFlagName := fmt.Sprintf("%v.subtype", cmdPrefix)
	if cmd.Flags().Changed(subtypeFlagName) {

		var subtypeFlagName string
		if cmdPrefix == "" {
			subtypeFlagName = "subtype"
		} else {
			subtypeFlagName = fmt.Sprintf("%v.subtype", cmdPrefix)
		}

		subtypeFlagValue, err := cmd.Flags().GetString(subtypeFlagName)
		if err != nil {
			return err, false
		}
		m.Subtype = subtypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMediaTypeTypeFlags(depth int, m *models.MediaType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMediaTypeWildcardSubtypeFlags(depth int, m *models.MediaType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wildcardSubtypeFlagName := fmt.Sprintf("%v.wildcardSubtype", cmdPrefix)
	if cmd.Flags().Changed(wildcardSubtypeFlagName) {

		var wildcardSubtypeFlagName string
		if cmdPrefix == "" {
			wildcardSubtypeFlagName = "wildcardSubtype"
		} else {
			wildcardSubtypeFlagName = fmt.Sprintf("%v.wildcardSubtype", cmdPrefix)
		}

		wildcardSubtypeFlagValue, err := cmd.Flags().GetBool(wildcardSubtypeFlagName)
		if err != nil {
			return err, false
		}
		m.WildcardSubtype = wildcardSubtypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMediaTypeWildcardTypeFlags(depth int, m *models.MediaType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wildcardTypeFlagName := fmt.Sprintf("%v.wildcardType", cmdPrefix)
	if cmd.Flags().Changed(wildcardTypeFlagName) {

		var wildcardTypeFlagName string
		if cmdPrefix == "" {
			wildcardTypeFlagName = "wildcardType"
		} else {
			wildcardTypeFlagName = fmt.Sprintf("%v.wildcardType", cmdPrefix)
		}

		wildcardTypeFlagValue, err := cmd.Flags().GetBool(wildcardTypeFlagName)
		if err != nil {
			return err, false
		}
		m.WildcardType = wildcardTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
