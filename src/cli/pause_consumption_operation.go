// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/table"

	"github.com/spf13/cobra"
)

// makeOperationTablePauseConsumptionCmd returns a cmd to handle operation pauseConsumption
func makeOperationTablePauseConsumptionCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "pauseConsumption",
		Short: `Pause the consumption of a realtime table`,
		RunE:  runOperationTablePauseConsumption,
	}

	if err := registerOperationTablePauseConsumptionParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTablePauseConsumption uses cmd flags to call endpoint api
func runOperationTablePauseConsumption(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := table.NewPauseConsumptionParams()
	if err, _ := retrieveOperationTablePauseConsumptionTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTablePauseConsumptionResult(appCli.Table.PauseConsumption(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTablePauseConsumptionParamFlags registers all flags needed to fill params
func registerOperationTablePauseConsumptionParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTablePauseConsumptionTableNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTablePauseConsumptionTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Name of the table`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}

func retrieveOperationTablePauseConsumptionTableNameFlag(m *table.PauseConsumptionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}

// parseOperationTablePauseConsumptionResult parses request result and return the string content
func parseOperationTablePauseConsumptionResult(respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning pauseConsumption default is not supported

		return "", respErr
	}
	return "", nil
}
