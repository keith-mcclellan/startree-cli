// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/cluster"

	"github.com/spf13/cobra"
)

// makeOperationClusterGetTableDebugInfoCmd returns a cmd to handle operation getTableDebugInfo
func makeOperationClusterGetTableDebugInfoCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getTableDebugInfo",
		Short: `Debug information for table.`,
		RunE:  runOperationClusterGetTableDebugInfo,
	}

	if err := registerOperationClusterGetTableDebugInfoParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationClusterGetTableDebugInfo uses cmd flags to call endpoint api
func runOperationClusterGetTableDebugInfo(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := cluster.NewGetTableDebugInfoParams()
	if err, _ := retrieveOperationClusterGetTableDebugInfoTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationClusterGetTableDebugInfoTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationClusterGetTableDebugInfoVerbosityFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationClusterGetTableDebugInfoResult(appCli.Cluster.GetTableDebugInfo(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationClusterGetTableDebugInfoParamFlags registers all flags needed to fill params
func registerOperationClusterGetTableDebugInfoParamFlags(cmd *cobra.Command) error {
	if err := registerOperationClusterGetTableDebugInfoTableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationClusterGetTableDebugInfoTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationClusterGetTableDebugInfoVerbosityParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationClusterGetTableDebugInfoTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Name of the table`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}
func registerOperationClusterGetTableDebugInfoTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `OFFLINE|REALTIME`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}
func registerOperationClusterGetTableDebugInfoVerbosityParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	verbosityDescription := `Verbosity of debug information`

	var verbosityFlagName string
	if cmdPrefix == "" {
		verbosityFlagName = "verbosity"
	} else {
		verbosityFlagName = fmt.Sprintf("%v.verbosity", cmdPrefix)
	}

	var verbosityFlagDefault int32

	_ = cmd.PersistentFlags().Int32(verbosityFlagName, verbosityFlagDefault, verbosityDescription)

	return nil
}

func retrieveOperationClusterGetTableDebugInfoTableNameFlag(m *cluster.GetTableDebugInfoParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationClusterGetTableDebugInfoTypeFlag(m *cluster.GetTableDebugInfoParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationClusterGetTableDebugInfoVerbosityFlag(m *cluster.GetTableDebugInfoParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("verbosity") {

		var verbosityFlagName string
		if cmdPrefix == "" {
			verbosityFlagName = "verbosity"
		} else {
			verbosityFlagName = fmt.Sprintf("%v.verbosity", cmdPrefix)
		}

		verbosityFlagValue, err := cmd.Flags().GetInt32(verbosityFlagName)
		if err != nil {
			return err, false
		}
		m.Verbosity = &verbosityFlagValue

	}
	return nil, retAdded
}

// parseOperationClusterGetTableDebugInfoResult parses request result and return the string content
func parseOperationClusterGetTableDebugInfoResult(resp0 *cluster.GetTableDebugInfoOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning getTableDebugInfoOK is not supported

		// Non schema case: warning getTableDebugInfoNotFound is not supported

		// Non schema case: warning getTableDebugInfoInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response getTableDebugInfoOK is not supported by go-swagger cli yet.

	return "", nil
}
