// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/segment"
	"startree.ai/cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSegmentStartReplaceSegmentsCmd returns a cmd to handle operation startReplaceSegments
func makeOperationSegmentStartReplaceSegmentsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "startReplaceSegments",
		Short: `Start to replace segments`,
		RunE:  runOperationSegmentStartReplaceSegments,
	}

	if err := registerOperationSegmentStartReplaceSegmentsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSegmentStartReplaceSegments uses cmd flags to call endpoint api
func runOperationSegmentStartReplaceSegments(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := segment.NewStartReplaceSegmentsParams()
	if err, _ := retrieveOperationSegmentStartReplaceSegmentsBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentStartReplaceSegmentsForceCleanupFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentStartReplaceSegmentsTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentStartReplaceSegmentsTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSegmentStartReplaceSegmentsResult(appCli.Segment.StartReplaceSegments(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSegmentStartReplaceSegmentsParamFlags registers all flags needed to fill params
func registerOperationSegmentStartReplaceSegmentsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSegmentStartReplaceSegmentsBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentStartReplaceSegmentsForceCleanupParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentStartReplaceSegmentsTableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentStartReplaceSegmentsTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSegmentStartReplaceSegmentsBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. Fields belonging to start replace segment request")

	// add flags for body
	if err := registerModelStartReplaceSegmentsRequestFlags(0, "startReplaceSegmentsRequest", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationSegmentStartReplaceSegmentsForceCleanupParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	forceCleanupDescription := `Force cleanup`

	var forceCleanupFlagName string
	if cmdPrefix == "" {
		forceCleanupFlagName = "forceCleanup"
	} else {
		forceCleanupFlagName = fmt.Sprintf("%v.forceCleanup", cmdPrefix)
	}

	var forceCleanupFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceCleanupFlagName, forceCleanupFlagDefault, forceCleanupDescription)

	return nil
}
func registerOperationSegmentStartReplaceSegmentsTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Name of the table`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}
func registerOperationSegmentStartReplaceSegmentsTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `Required. OFFLINE|REALTIME`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func retrieveOperationSegmentStartReplaceSegmentsBodyFlag(m *segment.StartReplaceSegmentsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.StartReplaceSegmentsRequest{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.StartReplaceSegmentsRequest: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.StartReplaceSegmentsRequest{}
	}
	err, added := retrieveModelStartReplaceSegmentsRequestFlags(0, bodyValueModel, "startReplaceSegmentsRequest", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationSegmentStartReplaceSegmentsForceCleanupFlag(m *segment.StartReplaceSegmentsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("forceCleanup") {

		var forceCleanupFlagName string
		if cmdPrefix == "" {
			forceCleanupFlagName = "forceCleanup"
		} else {
			forceCleanupFlagName = fmt.Sprintf("%v.forceCleanup", cmdPrefix)
		}

		forceCleanupFlagValue, err := cmd.Flags().GetBool(forceCleanupFlagName)
		if err != nil {
			return err, false
		}
		m.ForceCleanup = &forceCleanupFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSegmentStartReplaceSegmentsTableNameFlag(m *segment.StartReplaceSegmentsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSegmentStartReplaceSegmentsTypeFlag(m *segment.StartReplaceSegmentsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

	}
	return nil, retAdded
}

// parseOperationSegmentStartReplaceSegmentsResult parses request result and return the string content
func parseOperationSegmentStartReplaceSegmentsResult(respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning startReplaceSegments default is not supported

		return "", respErr
	}
	return "", nil
}
