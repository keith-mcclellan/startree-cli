// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/table"
	"startree.ai/cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTableIngestFromFileCmd returns a cmd to handle operation ingestFromFile
func makeOperationTableIngestFromFileCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "ingestFromFile",
		Short: `Creates a segment using given file and pushes it to Pinot. 
 All steps happen on the controller. This API is NOT meant for production environments/large input files. 
 Example usage (query params need encoding):
` + "`" + `` + "`" + `` + "`" + `
curl -X POST -F file=@data.json -H "Content-Type: multipart/form-data" "http://localhost:9000/ingestFromFile?tableNameWithType=foo_OFFLINE&
batchConfigMapStr={
  "inputFormat":"csv",
  "recordReader.prop.delimiter":"|"
}" 
` + "`" + `` + "`" + `` + "`" + ``,
		RunE: runOperationTableIngestFromFile,
	}

	if err := registerOperationTableIngestFromFileParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTableIngestFromFile uses cmd flags to call endpoint api
func runOperationTableIngestFromFile(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := table.NewIngestFromFileParams()
	if err, _ := retrieveOperationTableIngestFromFileBatchConfigMapStrFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableIngestFromFileBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableIngestFromFileTableNameWithTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTableIngestFromFileResult(appCli.Table.IngestFromFile(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTableIngestFromFileParamFlags registers all flags needed to fill params
func registerOperationTableIngestFromFileParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTableIngestFromFileBatchConfigMapStrParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableIngestFromFileBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableIngestFromFileTableNameWithTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTableIngestFromFileBatchConfigMapStrParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	batchConfigMapStrDescription := `Required. Batch config Map as json string. Must pass inputFormat, and optionally record reader properties. e.g. {"inputFormat":"json"}`

	var batchConfigMapStrFlagName string
	if cmdPrefix == "" {
		batchConfigMapStrFlagName = "batchConfigMapStr"
	} else {
		batchConfigMapStrFlagName = fmt.Sprintf("%v.batchConfigMapStr", cmdPrefix)
	}

	var batchConfigMapStrFlagDefault string

	_ = cmd.PersistentFlags().String(batchConfigMapStrFlagName, batchConfigMapStrFlagDefault, batchConfigMapStrDescription)

	return nil
}
func registerOperationTableIngestFromFileBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. ")

	// add flags for body
	if err := registerModelFormDataMultiPartFlags(0, "formDataMultiPart", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationTableIngestFromFileTableNameWithTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameWithTypeDescription := `Required. Name of the table to upload the file to`

	var tableNameWithTypeFlagName string
	if cmdPrefix == "" {
		tableNameWithTypeFlagName = "tableNameWithType"
	} else {
		tableNameWithTypeFlagName = fmt.Sprintf("%v.tableNameWithType", cmdPrefix)
	}

	var tableNameWithTypeFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameWithTypeFlagName, tableNameWithTypeFlagDefault, tableNameWithTypeDescription)

	return nil
}

func retrieveOperationTableIngestFromFileBatchConfigMapStrFlag(m *table.IngestFromFileParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("batchConfigMapStr") {

		var batchConfigMapStrFlagName string
		if cmdPrefix == "" {
			batchConfigMapStrFlagName = "batchConfigMapStr"
		} else {
			batchConfigMapStrFlagName = fmt.Sprintf("%v.batchConfigMapStr", cmdPrefix)
		}

		batchConfigMapStrFlagValue, err := cmd.Flags().GetString(batchConfigMapStrFlagName)
		if err != nil {
			return err, false
		}
		m.BatchConfigMapStr = batchConfigMapStrFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableIngestFromFileBodyFlag(m *table.IngestFromFileParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.FormDataMultiPart{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.FormDataMultiPart: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.FormDataMultiPart{}
	}
	err, added := retrieveModelFormDataMultiPartFlags(0, bodyValueModel, "formDataMultiPart", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationTableIngestFromFileTableNameWithTypeFlag(m *table.IngestFromFileParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableNameWithType") {

		var tableNameWithTypeFlagName string
		if cmdPrefix == "" {
			tableNameWithTypeFlagName = "tableNameWithType"
		} else {
			tableNameWithTypeFlagName = fmt.Sprintf("%v.tableNameWithType", cmdPrefix)
		}

		tableNameWithTypeFlagValue, err := cmd.Flags().GetString(tableNameWithTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TableNameWithType = tableNameWithTypeFlagValue

	}
	return nil, retAdded
}

// parseOperationTableIngestFromFileResult parses request result and return the string content
func parseOperationTableIngestFromFileResult(respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning ingestFromFile default is not supported

		return "", respErr
	}
	return "", nil
}
