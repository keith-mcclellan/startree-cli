// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for TierConfig

// register flags to command
func registerModelTierConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTierConfigName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTierConfigSegmentAge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTierConfigSegmentList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTierConfigSegmentSelectorType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTierConfigServerTag(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTierConfigStorageType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTierConfigTierBackend(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTierConfigTierBackendProperties(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTierConfigName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerTierConfigSegmentAge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentAgeDescription := ``

	var segmentAgeFlagName string
	if cmdPrefix == "" {
		segmentAgeFlagName = "segmentAge"
	} else {
		segmentAgeFlagName = fmt.Sprintf("%v.segmentAge", cmdPrefix)
	}

	var segmentAgeFlagDefault string

	_ = cmd.PersistentFlags().String(segmentAgeFlagName, segmentAgeFlagDefault, segmentAgeDescription)

	return nil
}

func registerTierConfigSegmentList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: segmentList []string array type is not supported by go-swagger cli yet

	return nil
}

func registerTierConfigSegmentSelectorType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentSelectorTypeDescription := `Required. `

	var segmentSelectorTypeFlagName string
	if cmdPrefix == "" {
		segmentSelectorTypeFlagName = "segmentSelectorType"
	} else {
		segmentSelectorTypeFlagName = fmt.Sprintf("%v.segmentSelectorType", cmdPrefix)
	}

	var segmentSelectorTypeFlagDefault string

	_ = cmd.PersistentFlags().String(segmentSelectorTypeFlagName, segmentSelectorTypeFlagDefault, segmentSelectorTypeDescription)

	return nil
}

func registerTierConfigServerTag(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverTagDescription := ``

	var serverTagFlagName string
	if cmdPrefix == "" {
		serverTagFlagName = "serverTag"
	} else {
		serverTagFlagName = fmt.Sprintf("%v.serverTag", cmdPrefix)
	}

	var serverTagFlagDefault string

	_ = cmd.PersistentFlags().String(serverTagFlagName, serverTagFlagDefault, serverTagDescription)

	return nil
}

func registerTierConfigStorageType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	storageTypeDescription := `Required. `

	var storageTypeFlagName string
	if cmdPrefix == "" {
		storageTypeFlagName = "storageType"
	} else {
		storageTypeFlagName = fmt.Sprintf("%v.storageType", cmdPrefix)
	}

	var storageTypeFlagDefault string

	_ = cmd.PersistentFlags().String(storageTypeFlagName, storageTypeFlagDefault, storageTypeDescription)

	return nil
}

func registerTierConfigTierBackend(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tierBackendDescription := ``

	var tierBackendFlagName string
	if cmdPrefix == "" {
		tierBackendFlagName = "tierBackend"
	} else {
		tierBackendFlagName = fmt.Sprintf("%v.tierBackend", cmdPrefix)
	}

	var tierBackendFlagDefault string

	_ = cmd.PersistentFlags().String(tierBackendFlagName, tierBackendFlagDefault, tierBackendDescription)

	return nil
}

func registerTierConfigTierBackendProperties(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tierBackendProperties map[string]string map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTierConfigFlags(depth int, m *models.TierConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, nameAdded := retrieveTierConfigNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, segmentAgeAdded := retrieveTierConfigSegmentAgeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentAgeAdded

	err, segmentListAdded := retrieveTierConfigSegmentListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentListAdded

	err, segmentSelectorTypeAdded := retrieveTierConfigSegmentSelectorTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentSelectorTypeAdded

	err, serverTagAdded := retrieveTierConfigServerTagFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverTagAdded

	err, storageTypeAdded := retrieveTierConfigStorageTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storageTypeAdded

	err, tierBackendAdded := retrieveTierConfigTierBackendFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tierBackendAdded

	err, tierBackendPropertiesAdded := retrieveTierConfigTierBackendPropertiesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tierBackendPropertiesAdded

	return nil, retAdded
}

func retrieveTierConfigNameFlags(depth int, m *models.TierConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTierConfigSegmentAgeFlags(depth int, m *models.TierConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentAgeFlagName := fmt.Sprintf("%v.segmentAge", cmdPrefix)
	if cmd.Flags().Changed(segmentAgeFlagName) {

		var segmentAgeFlagName string
		if cmdPrefix == "" {
			segmentAgeFlagName = "segmentAge"
		} else {
			segmentAgeFlagName = fmt.Sprintf("%v.segmentAge", cmdPrefix)
		}

		segmentAgeFlagValue, err := cmd.Flags().GetString(segmentAgeFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentAge = segmentAgeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTierConfigSegmentListFlags(depth int, m *models.TierConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentListFlagName := fmt.Sprintf("%v.segmentList", cmdPrefix)
	if cmd.Flags().Changed(segmentListFlagName) {
		// warning: segmentList array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTierConfigSegmentSelectorTypeFlags(depth int, m *models.TierConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentSelectorTypeFlagName := fmt.Sprintf("%v.segmentSelectorType", cmdPrefix)
	if cmd.Flags().Changed(segmentSelectorTypeFlagName) {

		var segmentSelectorTypeFlagName string
		if cmdPrefix == "" {
			segmentSelectorTypeFlagName = "segmentSelectorType"
		} else {
			segmentSelectorTypeFlagName = fmt.Sprintf("%v.segmentSelectorType", cmdPrefix)
		}

		segmentSelectorTypeFlagValue, err := cmd.Flags().GetString(segmentSelectorTypeFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentSelectorType = segmentSelectorTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTierConfigServerTagFlags(depth int, m *models.TierConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverTagFlagName := fmt.Sprintf("%v.serverTag", cmdPrefix)
	if cmd.Flags().Changed(serverTagFlagName) {

		var serverTagFlagName string
		if cmdPrefix == "" {
			serverTagFlagName = "serverTag"
		} else {
			serverTagFlagName = fmt.Sprintf("%v.serverTag", cmdPrefix)
		}

		serverTagFlagValue, err := cmd.Flags().GetString(serverTagFlagName)
		if err != nil {
			return err, false
		}
		m.ServerTag = serverTagFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTierConfigStorageTypeFlags(depth int, m *models.TierConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	storageTypeFlagName := fmt.Sprintf("%v.storageType", cmdPrefix)
	if cmd.Flags().Changed(storageTypeFlagName) {

		var storageTypeFlagName string
		if cmdPrefix == "" {
			storageTypeFlagName = "storageType"
		} else {
			storageTypeFlagName = fmt.Sprintf("%v.storageType", cmdPrefix)
		}

		storageTypeFlagValue, err := cmd.Flags().GetString(storageTypeFlagName)
		if err != nil {
			return err, false
		}
		m.StorageType = storageTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTierConfigTierBackendFlags(depth int, m *models.TierConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tierBackendFlagName := fmt.Sprintf("%v.tierBackend", cmdPrefix)
	if cmd.Flags().Changed(tierBackendFlagName) {

		var tierBackendFlagName string
		if cmdPrefix == "" {
			tierBackendFlagName = "tierBackend"
		} else {
			tierBackendFlagName = fmt.Sprintf("%v.tierBackend", cmdPrefix)
		}

		tierBackendFlagValue, err := cmd.Flags().GetString(tierBackendFlagName)
		if err != nil {
			return err, false
		}
		m.TierBackend = tierBackendFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTierConfigTierBackendPropertiesFlags(depth int, m *models.TierConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tierBackendPropertiesFlagName := fmt.Sprintf("%v.tierBackendProperties", cmdPrefix)
	if cmd.Flags().Changed(tierBackendPropertiesFlagName) {
		// warning: tierBackendProperties map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
