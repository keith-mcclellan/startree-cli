// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/task"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTaskGetTaskGenerationDebugIntoCmd returns a cmd to handle operation getTaskGenerationDebugInto
func makeOperationTaskGetTaskGenerationDebugIntoCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getTaskGenerationDebugInto",
		Short: ``,
		RunE:  runOperationTaskGetTaskGenerationDebugInto,
	}

	if err := registerOperationTaskGetTaskGenerationDebugIntoParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTaskGetTaskGenerationDebugInto uses cmd flags to call endpoint api
func runOperationTaskGetTaskGenerationDebugInto(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := task.NewGetTaskGenerationDebugIntoParams()
	if err, _ := retrieveOperationTaskGetTaskGenerationDebugIntoLocalOnlyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTaskGetTaskGenerationDebugIntoTableNameWithTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTaskGetTaskGenerationDebugIntoTaskTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTaskGetTaskGenerationDebugIntoResult(appCli.Task.GetTaskGenerationDebugInto(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTaskGetTaskGenerationDebugIntoParamFlags registers all flags needed to fill params
func registerOperationTaskGetTaskGenerationDebugIntoParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTaskGetTaskGenerationDebugIntoLocalOnlyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTaskGetTaskGenerationDebugIntoTableNameWithTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTaskGetTaskGenerationDebugIntoTaskTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTaskGetTaskGenerationDebugIntoLocalOnlyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	localOnlyDescription := `Whether to only lookup local cache for logs`

	var localOnlyFlagName string
	if cmdPrefix == "" {
		localOnlyFlagName = "localOnly"
	} else {
		localOnlyFlagName = fmt.Sprintf("%v.localOnly", cmdPrefix)
	}

	var localOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(localOnlyFlagName, localOnlyFlagDefault, localOnlyDescription)

	return nil
}
func registerOperationTaskGetTaskGenerationDebugIntoTableNameWithTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameWithTypeDescription := `Required. Table name with type`

	var tableNameWithTypeFlagName string
	if cmdPrefix == "" {
		tableNameWithTypeFlagName = "tableNameWithType"
	} else {
		tableNameWithTypeFlagName = fmt.Sprintf("%v.tableNameWithType", cmdPrefix)
	}

	var tableNameWithTypeFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameWithTypeFlagName, tableNameWithTypeFlagDefault, tableNameWithTypeDescription)

	return nil
}
func registerOperationTaskGetTaskGenerationDebugIntoTaskTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	taskTypeDescription := `Required. Task type`

	var taskTypeFlagName string
	if cmdPrefix == "" {
		taskTypeFlagName = "taskType"
	} else {
		taskTypeFlagName = fmt.Sprintf("%v.taskType", cmdPrefix)
	}

	var taskTypeFlagDefault string

	_ = cmd.PersistentFlags().String(taskTypeFlagName, taskTypeFlagDefault, taskTypeDescription)

	return nil
}

func retrieveOperationTaskGetTaskGenerationDebugIntoLocalOnlyFlag(m *task.GetTaskGenerationDebugIntoParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("localOnly") {

		var localOnlyFlagName string
		if cmdPrefix == "" {
			localOnlyFlagName = "localOnly"
		} else {
			localOnlyFlagName = fmt.Sprintf("%v.localOnly", cmdPrefix)
		}

		localOnlyFlagValue, err := cmd.Flags().GetBool(localOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.LocalOnly = &localOnlyFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTaskGetTaskGenerationDebugIntoTableNameWithTypeFlag(m *task.GetTaskGenerationDebugIntoParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableNameWithType") {

		var tableNameWithTypeFlagName string
		if cmdPrefix == "" {
			tableNameWithTypeFlagName = "tableNameWithType"
		} else {
			tableNameWithTypeFlagName = fmt.Sprintf("%v.tableNameWithType", cmdPrefix)
		}

		tableNameWithTypeFlagValue, err := cmd.Flags().GetString(tableNameWithTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TableNameWithType = tableNameWithTypeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTaskGetTaskGenerationDebugIntoTaskTypeFlag(m *task.GetTaskGenerationDebugIntoParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("taskType") {

		var taskTypeFlagName string
		if cmdPrefix == "" {
			taskTypeFlagName = "taskType"
		} else {
			taskTypeFlagName = fmt.Sprintf("%v.taskType", cmdPrefix)
		}

		taskTypeFlagValue, err := cmd.Flags().GetString(taskTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TaskType = taskTypeFlagValue

	}
	return nil, retAdded
}

// parseOperationTaskGetTaskGenerationDebugIntoResult parses request result and return the string content
func parseOperationTaskGetTaskGenerationDebugIntoResult(resp0 *task.GetTaskGenerationDebugIntoOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*task.GetTaskGenerationDebugIntoOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		return string(msgStr), nil
	}

	return "", nil
}
