// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/atomic_ingestion"

	"github.com/spf13/cobra"
)

// makeOperationAtomicIngestionEndDataIngestRequestCmd returns a cmd to handle operation endDataIngestRequest
func makeOperationAtomicIngestionEndDataIngestRequestCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "endDataIngestRequest",
		Short: ``,
		RunE:  runOperationAtomicIngestionEndDataIngestRequest,
	}

	if err := registerOperationAtomicIngestionEndDataIngestRequestParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationAtomicIngestionEndDataIngestRequest uses cmd flags to call endpoint api
func runOperationAtomicIngestionEndDataIngestRequest(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := atomic_ingestion.NewEndDataIngestRequestParams()
	if err, _ := retrieveOperationAtomicIngestionEndDataIngestRequestCheckpointEntryKeyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationAtomicIngestionEndDataIngestRequestTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationAtomicIngestionEndDataIngestRequestTableTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationAtomicIngestionEndDataIngestRequestTaskTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationAtomicIngestionEndDataIngestRequestResult(appCli.AtomicIngestion.EndDataIngestRequest(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationAtomicIngestionEndDataIngestRequestParamFlags registers all flags needed to fill params
func registerOperationAtomicIngestionEndDataIngestRequestParamFlags(cmd *cobra.Command) error {
	if err := registerOperationAtomicIngestionEndDataIngestRequestCheckpointEntryKeyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationAtomicIngestionEndDataIngestRequestTableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationAtomicIngestionEndDataIngestRequestTableTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationAtomicIngestionEndDataIngestRequestTaskTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationAtomicIngestionEndDataIngestRequestCheckpointEntryKeyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	checkpointEntryKeyDescription := `Required. Key of checkpoint entry`

	var checkpointEntryKeyFlagName string
	if cmdPrefix == "" {
		checkpointEntryKeyFlagName = "checkpointEntryKey"
	} else {
		checkpointEntryKeyFlagName = fmt.Sprintf("%v.checkpointEntryKey", cmdPrefix)
	}

	var checkpointEntryKeyFlagDefault string

	_ = cmd.PersistentFlags().String(checkpointEntryKeyFlagName, checkpointEntryKeyFlagDefault, checkpointEntryKeyDescription)

	return nil
}
func registerOperationAtomicIngestionEndDataIngestRequestTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Name of the table`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}
func registerOperationAtomicIngestionEndDataIngestRequestTableTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableTypeDescription := `Required. OFFLINE|REALTIME`

	var tableTypeFlagName string
	if cmdPrefix == "" {
		tableTypeFlagName = "tableType"
	} else {
		tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
	}

	var tableTypeFlagDefault string

	_ = cmd.PersistentFlags().String(tableTypeFlagName, tableTypeFlagDefault, tableTypeDescription)

	return nil
}
func registerOperationAtomicIngestionEndDataIngestRequestTaskTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	taskTypeDescription := `Required. Task type`

	var taskTypeFlagName string
	if cmdPrefix == "" {
		taskTypeFlagName = "taskType"
	} else {
		taskTypeFlagName = fmt.Sprintf("%v.taskType", cmdPrefix)
	}

	var taskTypeFlagDefault string

	_ = cmd.PersistentFlags().String(taskTypeFlagName, taskTypeFlagDefault, taskTypeDescription)

	return nil
}

func retrieveOperationAtomicIngestionEndDataIngestRequestCheckpointEntryKeyFlag(m *atomic_ingestion.EndDataIngestRequestParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("checkpointEntryKey") {

		var checkpointEntryKeyFlagName string
		if cmdPrefix == "" {
			checkpointEntryKeyFlagName = "checkpointEntryKey"
		} else {
			checkpointEntryKeyFlagName = fmt.Sprintf("%v.checkpointEntryKey", cmdPrefix)
		}

		checkpointEntryKeyFlagValue, err := cmd.Flags().GetString(checkpointEntryKeyFlagName)
		if err != nil {
			return err, false
		}
		m.CheckpointEntryKey = checkpointEntryKeyFlagValue

	}
	return nil, retAdded
}
func retrieveOperationAtomicIngestionEndDataIngestRequestTableNameFlag(m *atomic_ingestion.EndDataIngestRequestParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationAtomicIngestionEndDataIngestRequestTableTypeFlag(m *atomic_ingestion.EndDataIngestRequestParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableType") {

		var tableTypeFlagName string
		if cmdPrefix == "" {
			tableTypeFlagName = "tableType"
		} else {
			tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
		}

		tableTypeFlagValue, err := cmd.Flags().GetString(tableTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TableType = tableTypeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationAtomicIngestionEndDataIngestRequestTaskTypeFlag(m *atomic_ingestion.EndDataIngestRequestParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("taskType") {

		var taskTypeFlagName string
		if cmdPrefix == "" {
			taskTypeFlagName = "taskType"
		} else {
			taskTypeFlagName = fmt.Sprintf("%v.taskType", cmdPrefix)
		}

		taskTypeFlagValue, err := cmd.Flags().GetString(taskTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TaskType = taskTypeFlagValue

	}
	return nil, retAdded
}

// parseOperationAtomicIngestionEndDataIngestRequestResult parses request result and return the string content
func parseOperationAtomicIngestionEndDataIngestRequestResult(respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning endDataIngestRequest default is not supported

		return "", respErr
	}
	return "", nil
}
