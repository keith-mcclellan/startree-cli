// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/segment"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSegmentGetSelectedSegmentsCmd returns a cmd to handle operation getSelectedSegments
func makeOperationSegmentGetSelectedSegmentsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getSelectedSegments",
		Short: `Get the selected segments given the start and end timestamps in milliseconds`,
		RunE:  runOperationSegmentGetSelectedSegments,
	}

	if err := registerOperationSegmentGetSelectedSegmentsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSegmentGetSelectedSegments uses cmd flags to call endpoint api
func runOperationSegmentGetSelectedSegments(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := segment.NewGetSelectedSegmentsParams()
	if err, _ := retrieveOperationSegmentGetSelectedSegmentsEndTimestampFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentGetSelectedSegmentsExcludeOverlappingFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentGetSelectedSegmentsStartTimestampFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentGetSelectedSegmentsTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentGetSelectedSegmentsTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSegmentGetSelectedSegmentsResult(appCli.Segment.GetSelectedSegments(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSegmentGetSelectedSegmentsParamFlags registers all flags needed to fill params
func registerOperationSegmentGetSelectedSegmentsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSegmentGetSelectedSegmentsEndTimestampParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentGetSelectedSegmentsExcludeOverlappingParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentGetSelectedSegmentsStartTimestampParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentGetSelectedSegmentsTableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentGetSelectedSegmentsTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSegmentGetSelectedSegmentsEndTimestampParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	endTimestampDescription := `End timestamp (exclusive)`

	var endTimestampFlagName string
	if cmdPrefix == "" {
		endTimestampFlagName = "endTimestamp"
	} else {
		endTimestampFlagName = fmt.Sprintf("%v.endTimestamp", cmdPrefix)
	}

	var endTimestampFlagDefault string

	_ = cmd.PersistentFlags().String(endTimestampFlagName, endTimestampFlagDefault, endTimestampDescription)

	return nil
}
func registerOperationSegmentGetSelectedSegmentsExcludeOverlappingParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	excludeOverlappingDescription := `Whether to exclude the segments overlapping with the timestamps, false by default`

	var excludeOverlappingFlagName string
	if cmdPrefix == "" {
		excludeOverlappingFlagName = "excludeOverlapping"
	} else {
		excludeOverlappingFlagName = fmt.Sprintf("%v.excludeOverlapping", cmdPrefix)
	}

	var excludeOverlappingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(excludeOverlappingFlagName, excludeOverlappingFlagDefault, excludeOverlappingDescription)

	return nil
}
func registerOperationSegmentGetSelectedSegmentsStartTimestampParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	startTimestampDescription := `Start timestamp (inclusive)`

	var startTimestampFlagName string
	if cmdPrefix == "" {
		startTimestampFlagName = "startTimestamp"
	} else {
		startTimestampFlagName = fmt.Sprintf("%v.startTimestamp", cmdPrefix)
	}

	var startTimestampFlagDefault string

	_ = cmd.PersistentFlags().String(startTimestampFlagName, startTimestampFlagDefault, startTimestampDescription)

	return nil
}
func registerOperationSegmentGetSelectedSegmentsTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Name of the table`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}
func registerOperationSegmentGetSelectedSegmentsTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `OFFLINE|REALTIME`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func retrieveOperationSegmentGetSelectedSegmentsEndTimestampFlag(m *segment.GetSelectedSegmentsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("endTimestamp") {

		var endTimestampFlagName string
		if cmdPrefix == "" {
			endTimestampFlagName = "endTimestamp"
		} else {
			endTimestampFlagName = fmt.Sprintf("%v.endTimestamp", cmdPrefix)
		}

		endTimestampFlagValue, err := cmd.Flags().GetString(endTimestampFlagName)
		if err != nil {
			return err, false
		}
		m.EndTimestamp = &endTimestampFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSegmentGetSelectedSegmentsExcludeOverlappingFlag(m *segment.GetSelectedSegmentsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("excludeOverlapping") {

		var excludeOverlappingFlagName string
		if cmdPrefix == "" {
			excludeOverlappingFlagName = "excludeOverlapping"
		} else {
			excludeOverlappingFlagName = fmt.Sprintf("%v.excludeOverlapping", cmdPrefix)
		}

		excludeOverlappingFlagValue, err := cmd.Flags().GetBool(excludeOverlappingFlagName)
		if err != nil {
			return err, false
		}
		m.ExcludeOverlapping = &excludeOverlappingFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSegmentGetSelectedSegmentsStartTimestampFlag(m *segment.GetSelectedSegmentsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("startTimestamp") {

		var startTimestampFlagName string
		if cmdPrefix == "" {
			startTimestampFlagName = "startTimestamp"
		} else {
			startTimestampFlagName = fmt.Sprintf("%v.startTimestamp", cmdPrefix)
		}

		startTimestampFlagValue, err := cmd.Flags().GetString(startTimestampFlagName)
		if err != nil {
			return err, false
		}
		m.StartTimestamp = &startTimestampFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSegmentGetSelectedSegmentsTableNameFlag(m *segment.GetSelectedSegmentsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSegmentGetSelectedSegmentsTypeFlag(m *segment.GetSelectedSegmentsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

	}
	return nil, retAdded
}

// parseOperationSegmentGetSelectedSegmentsResult parses request result and return the string content
func parseOperationSegmentGetSelectedSegmentsResult(resp0 *segment.GetSelectedSegmentsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*segment.GetSelectedSegmentsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
