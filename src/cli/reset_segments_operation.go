// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/segment"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSegmentResetSegmentsCmd returns a cmd to handle operation resetSegments
func makeOperationSegmentResetSegmentsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "resetSegments",
		Short: `Resets segments by disabling and then enabling them`,
		RunE:  runOperationSegmentResetSegments,
	}

	if err := registerOperationSegmentResetSegmentsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSegmentResetSegments uses cmd flags to call endpoint api
func runOperationSegmentResetSegments(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := segment.NewResetSegmentsParams()
	if err, _ := retrieveOperationSegmentResetSegmentsErrorSegmentsOnlyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentResetSegmentsTableNameWithTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentResetSegmentsTargetInstanceFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSegmentResetSegmentsResult(appCli.Segment.ResetSegments(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSegmentResetSegmentsParamFlags registers all flags needed to fill params
func registerOperationSegmentResetSegmentsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSegmentResetSegmentsErrorSegmentsOnlyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentResetSegmentsTableNameWithTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentResetSegmentsTargetInstanceParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSegmentResetSegmentsErrorSegmentsOnlyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	errorSegmentsOnlyDescription := `Whether to reset only segments with error state`

	var errorSegmentsOnlyFlagName string
	if cmdPrefix == "" {
		errorSegmentsOnlyFlagName = "errorSegmentsOnly"
	} else {
		errorSegmentsOnlyFlagName = fmt.Sprintf("%v.errorSegmentsOnly", cmdPrefix)
	}

	var errorSegmentsOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(errorSegmentsOnlyFlagName, errorSegmentsOnlyFlagDefault, errorSegmentsOnlyDescription)

	return nil
}
func registerOperationSegmentResetSegmentsTableNameWithTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameWithTypeDescription := `Required. Name of the table with type`

	var tableNameWithTypeFlagName string
	if cmdPrefix == "" {
		tableNameWithTypeFlagName = "tableNameWithType"
	} else {
		tableNameWithTypeFlagName = fmt.Sprintf("%v.tableNameWithType", cmdPrefix)
	}

	var tableNameWithTypeFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameWithTypeFlagName, tableNameWithTypeFlagDefault, tableNameWithTypeDescription)

	return nil
}
func registerOperationSegmentResetSegmentsTargetInstanceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	targetInstanceDescription := `Name of the target instance to reset`

	var targetInstanceFlagName string
	if cmdPrefix == "" {
		targetInstanceFlagName = "targetInstance"
	} else {
		targetInstanceFlagName = fmt.Sprintf("%v.targetInstance", cmdPrefix)
	}

	var targetInstanceFlagDefault string

	_ = cmd.PersistentFlags().String(targetInstanceFlagName, targetInstanceFlagDefault, targetInstanceDescription)

	return nil
}

func retrieveOperationSegmentResetSegmentsErrorSegmentsOnlyFlag(m *segment.ResetSegmentsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("errorSegmentsOnly") {

		var errorSegmentsOnlyFlagName string
		if cmdPrefix == "" {
			errorSegmentsOnlyFlagName = "errorSegmentsOnly"
		} else {
			errorSegmentsOnlyFlagName = fmt.Sprintf("%v.errorSegmentsOnly", cmdPrefix)
		}

		errorSegmentsOnlyFlagValue, err := cmd.Flags().GetBool(errorSegmentsOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.ErrorSegmentsOnly = &errorSegmentsOnlyFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSegmentResetSegmentsTableNameWithTypeFlag(m *segment.ResetSegmentsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableNameWithType") {

		var tableNameWithTypeFlagName string
		if cmdPrefix == "" {
			tableNameWithTypeFlagName = "tableNameWithType"
		} else {
			tableNameWithTypeFlagName = fmt.Sprintf("%v.tableNameWithType", cmdPrefix)
		}

		tableNameWithTypeFlagValue, err := cmd.Flags().GetString(tableNameWithTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TableNameWithType = tableNameWithTypeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSegmentResetSegmentsTargetInstanceFlag(m *segment.ResetSegmentsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("targetInstance") {

		var targetInstanceFlagName string
		if cmdPrefix == "" {
			targetInstanceFlagName = "targetInstance"
		} else {
			targetInstanceFlagName = fmt.Sprintf("%v.targetInstance", cmdPrefix)
		}

		targetInstanceFlagValue, err := cmd.Flags().GetString(targetInstanceFlagName)
		if err != nil {
			return err, false
		}
		m.TargetInstance = &targetInstanceFlagValue

	}
	return nil, retAdded
}

// parseOperationSegmentResetSegmentsResult parses request result and return the string content
func parseOperationSegmentResetSegmentsResult(resp0 *segment.ResetSegmentsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*segment.ResetSegmentsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
