// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for ServerReloadControllerJobStatusResponse

// register flags to command
func registerModelServerReloadControllerJobStatusResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServerReloadControllerJobStatusResponseEstimatedTimeRemainingInMinutes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerReloadControllerJobStatusResponseMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerReloadControllerJobStatusResponseSuccessCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerReloadControllerJobStatusResponseTimeElapsedInMinutes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerReloadControllerJobStatusResponseTotalSegmentCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerReloadControllerJobStatusResponseTotalServerCallsFailed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerReloadControllerJobStatusResponseTotalServersQueried(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerReloadControllerJobStatusResponseEstimatedTimeRemainingInMinutes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	estimatedTimeRemainingInMinutesDescription := ``

	var estimatedTimeRemainingInMinutesFlagName string
	if cmdPrefix == "" {
		estimatedTimeRemainingInMinutesFlagName = "estimatedTimeRemainingInMinutes"
	} else {
		estimatedTimeRemainingInMinutesFlagName = fmt.Sprintf("%v.estimatedTimeRemainingInMinutes", cmdPrefix)
	}

	var estimatedTimeRemainingInMinutesFlagDefault float64

	_ = cmd.PersistentFlags().Float64(estimatedTimeRemainingInMinutesFlagName, estimatedTimeRemainingInMinutesFlagDefault, estimatedTimeRemainingInMinutesDescription)

	return nil
}

func registerServerReloadControllerJobStatusResponseMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: metadata map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerServerReloadControllerJobStatusResponseSuccessCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	successCountDescription := ``

	var successCountFlagName string
	if cmdPrefix == "" {
		successCountFlagName = "successCount"
	} else {
		successCountFlagName = fmt.Sprintf("%v.successCount", cmdPrefix)
	}

	var successCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(successCountFlagName, successCountFlagDefault, successCountDescription)

	return nil
}

func registerServerReloadControllerJobStatusResponseTimeElapsedInMinutes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeElapsedInMinutesDescription := ``

	var timeElapsedInMinutesFlagName string
	if cmdPrefix == "" {
		timeElapsedInMinutesFlagName = "timeElapsedInMinutes"
	} else {
		timeElapsedInMinutesFlagName = fmt.Sprintf("%v.timeElapsedInMinutes", cmdPrefix)
	}

	var timeElapsedInMinutesFlagDefault float64

	_ = cmd.PersistentFlags().Float64(timeElapsedInMinutesFlagName, timeElapsedInMinutesFlagDefault, timeElapsedInMinutesDescription)

	return nil
}

func registerServerReloadControllerJobStatusResponseTotalSegmentCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalSegmentCountDescription := ``

	var totalSegmentCountFlagName string
	if cmdPrefix == "" {
		totalSegmentCountFlagName = "totalSegmentCount"
	} else {
		totalSegmentCountFlagName = fmt.Sprintf("%v.totalSegmentCount", cmdPrefix)
	}

	var totalSegmentCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(totalSegmentCountFlagName, totalSegmentCountFlagDefault, totalSegmentCountDescription)

	return nil
}

func registerServerReloadControllerJobStatusResponseTotalServerCallsFailed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalServerCallsFailedDescription := ``

	var totalServerCallsFailedFlagName string
	if cmdPrefix == "" {
		totalServerCallsFailedFlagName = "totalServerCallsFailed"
	} else {
		totalServerCallsFailedFlagName = fmt.Sprintf("%v.totalServerCallsFailed", cmdPrefix)
	}

	var totalServerCallsFailedFlagDefault int32

	_ = cmd.PersistentFlags().Int32(totalServerCallsFailedFlagName, totalServerCallsFailedFlagDefault, totalServerCallsFailedDescription)

	return nil
}

func registerServerReloadControllerJobStatusResponseTotalServersQueried(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalServersQueriedDescription := ``

	var totalServersQueriedFlagName string
	if cmdPrefix == "" {
		totalServersQueriedFlagName = "totalServersQueried"
	} else {
		totalServersQueriedFlagName = fmt.Sprintf("%v.totalServersQueried", cmdPrefix)
	}

	var totalServersQueriedFlagDefault int32

	_ = cmd.PersistentFlags().Int32(totalServersQueriedFlagName, totalServersQueriedFlagDefault, totalServersQueriedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServerReloadControllerJobStatusResponseFlags(depth int, m *models.ServerReloadControllerJobStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, estimatedTimeRemainingInMinutesAdded := retrieveServerReloadControllerJobStatusResponseEstimatedTimeRemainingInMinutesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || estimatedTimeRemainingInMinutesAdded

	err, metadataAdded := retrieveServerReloadControllerJobStatusResponseMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded

	err, successCountAdded := retrieveServerReloadControllerJobStatusResponseSuccessCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || successCountAdded

	err, timeElapsedInMinutesAdded := retrieveServerReloadControllerJobStatusResponseTimeElapsedInMinutesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeElapsedInMinutesAdded

	err, totalSegmentCountAdded := retrieveServerReloadControllerJobStatusResponseTotalSegmentCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalSegmentCountAdded

	err, totalServerCallsFailedAdded := retrieveServerReloadControllerJobStatusResponseTotalServerCallsFailedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalServerCallsFailedAdded

	err, totalServersQueriedAdded := retrieveServerReloadControllerJobStatusResponseTotalServersQueriedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalServersQueriedAdded

	return nil, retAdded
}

func retrieveServerReloadControllerJobStatusResponseEstimatedTimeRemainingInMinutesFlags(depth int, m *models.ServerReloadControllerJobStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	estimatedTimeRemainingInMinutesFlagName := fmt.Sprintf("%v.estimatedTimeRemainingInMinutes", cmdPrefix)
	if cmd.Flags().Changed(estimatedTimeRemainingInMinutesFlagName) {

		var estimatedTimeRemainingInMinutesFlagName string
		if cmdPrefix == "" {
			estimatedTimeRemainingInMinutesFlagName = "estimatedTimeRemainingInMinutes"
		} else {
			estimatedTimeRemainingInMinutesFlagName = fmt.Sprintf("%v.estimatedTimeRemainingInMinutes", cmdPrefix)
		}

		estimatedTimeRemainingInMinutesFlagValue, err := cmd.Flags().GetFloat64(estimatedTimeRemainingInMinutesFlagName)
		if err != nil {
			return err, false
		}
		m.EstimatedTimeRemainingInMinutes = estimatedTimeRemainingInMinutesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerReloadControllerJobStatusResponseMetadataFlags(depth int, m *models.ServerReloadControllerJobStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metadataFlagName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(metadataFlagName) {
		// warning: metadata map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServerReloadControllerJobStatusResponseSuccessCountFlags(depth int, m *models.ServerReloadControllerJobStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	successCountFlagName := fmt.Sprintf("%v.successCount", cmdPrefix)
	if cmd.Flags().Changed(successCountFlagName) {

		var successCountFlagName string
		if cmdPrefix == "" {
			successCountFlagName = "successCount"
		} else {
			successCountFlagName = fmt.Sprintf("%v.successCount", cmdPrefix)
		}

		successCountFlagValue, err := cmd.Flags().GetInt32(successCountFlagName)
		if err != nil {
			return err, false
		}
		m.SuccessCount = successCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerReloadControllerJobStatusResponseTimeElapsedInMinutesFlags(depth int, m *models.ServerReloadControllerJobStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeElapsedInMinutesFlagName := fmt.Sprintf("%v.timeElapsedInMinutes", cmdPrefix)
	if cmd.Flags().Changed(timeElapsedInMinutesFlagName) {

		var timeElapsedInMinutesFlagName string
		if cmdPrefix == "" {
			timeElapsedInMinutesFlagName = "timeElapsedInMinutes"
		} else {
			timeElapsedInMinutesFlagName = fmt.Sprintf("%v.timeElapsedInMinutes", cmdPrefix)
		}

		timeElapsedInMinutesFlagValue, err := cmd.Flags().GetFloat64(timeElapsedInMinutesFlagName)
		if err != nil {
			return err, false
		}
		m.TimeElapsedInMinutes = timeElapsedInMinutesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerReloadControllerJobStatusResponseTotalSegmentCountFlags(depth int, m *models.ServerReloadControllerJobStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalSegmentCountFlagName := fmt.Sprintf("%v.totalSegmentCount", cmdPrefix)
	if cmd.Flags().Changed(totalSegmentCountFlagName) {

		var totalSegmentCountFlagName string
		if cmdPrefix == "" {
			totalSegmentCountFlagName = "totalSegmentCount"
		} else {
			totalSegmentCountFlagName = fmt.Sprintf("%v.totalSegmentCount", cmdPrefix)
		}

		totalSegmentCountFlagValue, err := cmd.Flags().GetInt32(totalSegmentCountFlagName)
		if err != nil {
			return err, false
		}
		m.TotalSegmentCount = totalSegmentCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerReloadControllerJobStatusResponseTotalServerCallsFailedFlags(depth int, m *models.ServerReloadControllerJobStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalServerCallsFailedFlagName := fmt.Sprintf("%v.totalServerCallsFailed", cmdPrefix)
	if cmd.Flags().Changed(totalServerCallsFailedFlagName) {

		var totalServerCallsFailedFlagName string
		if cmdPrefix == "" {
			totalServerCallsFailedFlagName = "totalServerCallsFailed"
		} else {
			totalServerCallsFailedFlagName = fmt.Sprintf("%v.totalServerCallsFailed", cmdPrefix)
		}

		totalServerCallsFailedFlagValue, err := cmd.Flags().GetInt32(totalServerCallsFailedFlagName)
		if err != nil {
			return err, false
		}
		m.TotalServerCallsFailed = totalServerCallsFailedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerReloadControllerJobStatusResponseTotalServersQueriedFlags(depth int, m *models.ServerReloadControllerJobStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalServersQueriedFlagName := fmt.Sprintf("%v.totalServersQueried", cmdPrefix)
	if cmd.Flags().Changed(totalServersQueriedFlagName) {

		var totalServersQueriedFlagName string
		if cmdPrefix == "" {
			totalServersQueriedFlagName = "totalServersQueried"
		} else {
			totalServersQueriedFlagName = fmt.Sprintf("%v.totalServersQueried", cmdPrefix)
		}

		totalServersQueriedFlagValue, err := cmd.Flags().GetInt32(totalServersQueriedFlagName)
		if err != nil {
			return err, false
		}
		m.TotalServersQueried = totalServersQueriedFlagValue

		retAdded = true
	}

	return nil, retAdded
}
