// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/schema"
	"startree.ai/cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSchemaUpdateSchema1Cmd returns a cmd to handle operation updateSchema1
func makeOperationSchemaUpdateSchema1Cmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "updateSchema_1",
		Short: `Updates a schema`,
		RunE:  runOperationSchemaUpdateSchema1,
	}

	if err := registerOperationSchemaUpdateSchema1ParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSchemaUpdateSchema1 uses cmd flags to call endpoint api
func runOperationSchemaUpdateSchema1(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := schema.NewUpdateSchema1Params()
	if err, _ := retrieveOperationSchemaUpdateSchema1BodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSchemaUpdateSchema1ReloadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSchemaUpdateSchema1SchemaNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSchemaUpdateSchema1Result(appCli.Schema.UpdateSchema1(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSchemaUpdateSchema1ParamFlags registers all flags needed to fill params
func registerOperationSchemaUpdateSchema1ParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSchemaUpdateSchema1BodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSchemaUpdateSchema1ReloadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSchemaUpdateSchema1SchemaNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSchemaUpdateSchema1BodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. ")

	// add flags for body
	if err := registerModelFormDataMultiPartFlags(0, "formDataMultiPart", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationSchemaUpdateSchema1ReloadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	reloadDescription := `Whether to reload the table if the new schema is backward compatible`

	var reloadFlagName string
	if cmdPrefix == "" {
		reloadFlagName = "reload"
	} else {
		reloadFlagName = fmt.Sprintf("%v.reload", cmdPrefix)
	}

	var reloadFlagDefault bool

	_ = cmd.PersistentFlags().Bool(reloadFlagName, reloadFlagDefault, reloadDescription)

	return nil
}
func registerOperationSchemaUpdateSchema1SchemaNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	schemaNameDescription := `Required. Name of the schema`

	var schemaNameFlagName string
	if cmdPrefix == "" {
		schemaNameFlagName = "schemaName"
	} else {
		schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
	}

	var schemaNameFlagDefault string

	_ = cmd.PersistentFlags().String(schemaNameFlagName, schemaNameFlagDefault, schemaNameDescription)

	return nil
}

func retrieveOperationSchemaUpdateSchema1BodyFlag(m *schema.UpdateSchema1Params, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.FormDataMultiPart{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.FormDataMultiPart: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.FormDataMultiPart{}
	}
	err, added := retrieveModelFormDataMultiPartFlags(0, bodyValueModel, "formDataMultiPart", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationSchemaUpdateSchema1ReloadFlag(m *schema.UpdateSchema1Params, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("reload") {

		var reloadFlagName string
		if cmdPrefix == "" {
			reloadFlagName = "reload"
		} else {
			reloadFlagName = fmt.Sprintf("%v.reload", cmdPrefix)
		}

		reloadFlagValue, err := cmd.Flags().GetBool(reloadFlagName)
		if err != nil {
			return err, false
		}
		m.Reload = &reloadFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSchemaUpdateSchema1SchemaNameFlag(m *schema.UpdateSchema1Params, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("schemaName") {

		var schemaNameFlagName string
		if cmdPrefix == "" {
			schemaNameFlagName = "schemaName"
		} else {
			schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
		}

		schemaNameFlagValue, err := cmd.Flags().GetString(schemaNameFlagName)
		if err != nil {
			return err, false
		}
		m.SchemaName = schemaNameFlagValue

	}
	return nil, retAdded
}

// parseOperationSchemaUpdateSchema1Result parses request result and return the string content
func parseOperationSchemaUpdateSchema1Result(resp0 *schema.UpdateSchema1OK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updateSchema1OK is not supported

		// Non schema case: warning updateSchema1BadRequest is not supported

		// Non schema case: warning updateSchema1NotFound is not supported

		// Non schema case: warning updateSchema1InternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response updateSchema1OK is not supported by go-swagger cli yet.

	return "", nil
}
