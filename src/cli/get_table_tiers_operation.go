// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/segment"

	"github.com/spf13/cobra"
)

// makeOperationSegmentGetTableTiersCmd returns a cmd to handle operation getTableTiers
func makeOperationSegmentGetTableTiersCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getTableTiers",
		Short: `Get storage tier for all segments in the given table`,
		RunE:  runOperationSegmentGetTableTiers,
	}

	if err := registerOperationSegmentGetTableTiersParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSegmentGetTableTiers uses cmd flags to call endpoint api
func runOperationSegmentGetTableTiers(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := segment.NewGetTableTiersParams()
	if err, _ := retrieveOperationSegmentGetTableTiersTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentGetTableTiersTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSegmentGetTableTiersResult(appCli.Segment.GetTableTiers(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSegmentGetTableTiersParamFlags registers all flags needed to fill params
func registerOperationSegmentGetTableTiersParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSegmentGetTableTiersTableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentGetTableTiersTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSegmentGetTableTiersTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Name of the table`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}
func registerOperationSegmentGetTableTiersTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `Required. OFFLINE|REALTIME`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func retrieveOperationSegmentGetTableTiersTableNameFlag(m *segment.GetTableTiersParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSegmentGetTableTiersTypeFlag(m *segment.GetTableTiersParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

	}
	return nil, retAdded
}

// parseOperationSegmentGetTableTiersResult parses request result and return the string content
func parseOperationSegmentGetTableTiersResult(resp0 *segment.GetTableTiersOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning getTableTiersOK is not supported

		// Non schema case: warning getTableTiersNotFound is not supported

		// Non schema case: warning getTableTiersInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response getTableTiersOK is not supported by go-swagger cli yet.

	return "", nil
}
