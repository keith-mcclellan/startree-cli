// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/table"

	"github.com/spf13/cobra"
)

// makeOperationTableResumeConsumptionCmd returns a cmd to handle operation resumeConsumption
func makeOperationTableResumeConsumptionCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "resumeConsumption",
		Short: `Resume the consumption for a realtime table. ConsumeFrom parameter indicates from which offsets consumption should resume. If consumeFrom parameter is not provided, consumption continues based on the offsets in segment ZK metadata, and in case the offsets are already gone, the first available offsets are picked to minimize the data loss.`,
		RunE:  runOperationTableResumeConsumption,
	}

	if err := registerOperationTableResumeConsumptionParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTableResumeConsumption uses cmd flags to call endpoint api
func runOperationTableResumeConsumption(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := table.NewResumeConsumptionParams()
	if err, _ := retrieveOperationTableResumeConsumptionConsumeFromFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableResumeConsumptionTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTableResumeConsumptionResult(appCli.Table.ResumeConsumption(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTableResumeConsumptionParamFlags registers all flags needed to fill params
func registerOperationTableResumeConsumptionParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTableResumeConsumptionConsumeFromParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableResumeConsumptionTableNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTableResumeConsumptionConsumeFromParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	consumeFromDescription := `smallest | largest`

	var consumeFromFlagName string
	if cmdPrefix == "" {
		consumeFromFlagName = "consumeFrom"
	} else {
		consumeFromFlagName = fmt.Sprintf("%v.consumeFrom", cmdPrefix)
	}

	var consumeFromFlagDefault string

	_ = cmd.PersistentFlags().String(consumeFromFlagName, consumeFromFlagDefault, consumeFromDescription)

	return nil
}
func registerOperationTableResumeConsumptionTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Name of the table`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}

func retrieveOperationTableResumeConsumptionConsumeFromFlag(m *table.ResumeConsumptionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("consumeFrom") {

		var consumeFromFlagName string
		if cmdPrefix == "" {
			consumeFromFlagName = "consumeFrom"
		} else {
			consumeFromFlagName = fmt.Sprintf("%v.consumeFrom", cmdPrefix)
		}

		consumeFromFlagValue, err := cmd.Flags().GetString(consumeFromFlagName)
		if err != nil {
			return err, false
		}
		m.ConsumeFrom = &consumeFromFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableResumeConsumptionTableNameFlag(m *table.ResumeConsumptionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}

// parseOperationTableResumeConsumptionResult parses request result and return the string content
func parseOperationTableResumeConsumptionResult(respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning resumeConsumption default is not supported

		return "", respErr
	}
	return "", nil
}
