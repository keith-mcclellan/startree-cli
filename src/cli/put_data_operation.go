// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/zookeeper"

	"github.com/spf13/cobra"
)

// makeOperationZookeeperPutDataCmd returns a cmd to handle operation putData
func makeOperationZookeeperPutDataCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "putData",
		Short: ``,
		RunE:  runOperationZookeeperPutData,
	}

	if err := registerOperationZookeeperPutDataParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationZookeeperPutData uses cmd flags to call endpoint api
func runOperationZookeeperPutData(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := zookeeper.NewPutDataParams()
	if err, _ := retrieveOperationZookeeperPutDataAccessOptionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationZookeeperPutDataBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationZookeeperPutDataDataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationZookeeperPutDataExpectedVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationZookeeperPutDataPathFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationZookeeperPutDataResult(appCli.Zookeeper.PutData(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationZookeeperPutDataParamFlags registers all flags needed to fill params
func registerOperationZookeeperPutDataParamFlags(cmd *cobra.Command) error {
	if err := registerOperationZookeeperPutDataAccessOptionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationZookeeperPutDataBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationZookeeperPutDataDataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationZookeeperPutDataExpectedVersionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationZookeeperPutDataPathParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationZookeeperPutDataAccessOptionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	accessOptionDescription := `accessOption`

	var accessOptionFlagName string
	if cmdPrefix == "" {
		accessOptionFlagName = "accessOption"
	} else {
		accessOptionFlagName = fmt.Sprintf("%v.accessOption", cmdPrefix)
	}

	var accessOptionFlagDefault int32 = 1

	_ = cmd.PersistentFlags().Int32(accessOptionFlagName, accessOptionFlagDefault, accessOptionDescription)

	return nil
}
func registerOperationZookeeperPutDataBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	bodyDescription := ``

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	var bodyFlagDefault string

	_ = cmd.PersistentFlags().String(bodyFlagName, bodyFlagDefault, bodyDescription)

	return nil
}
func registerOperationZookeeperPutDataDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	dataDescription := `Content`

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	var dataFlagDefault string

	_ = cmd.PersistentFlags().String(dataFlagName, dataFlagDefault, dataDescription)

	return nil
}
func registerOperationZookeeperPutDataExpectedVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	expectedVersionDescription := `expectedVersion`

	var expectedVersionFlagName string
	if cmdPrefix == "" {
		expectedVersionFlagName = "expectedVersion"
	} else {
		expectedVersionFlagName = fmt.Sprintf("%v.expectedVersion", cmdPrefix)
	}

	var expectedVersionFlagDefault int32 = -1

	_ = cmd.PersistentFlags().Int32(expectedVersionFlagName, expectedVersionFlagDefault, expectedVersionDescription)

	return nil
}
func registerOperationZookeeperPutDataPathParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pathDescription := `Required. Zookeeper Path, must start with /`

	var pathFlagName string
	if cmdPrefix == "" {
		pathFlagName = "path"
	} else {
		pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
	}

	var pathFlagDefault string

	_ = cmd.PersistentFlags().String(pathFlagName, pathFlagDefault, pathDescription)

	return nil
}

func retrieveOperationZookeeperPutDataAccessOptionFlag(m *zookeeper.PutDataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("accessOption") {

		var accessOptionFlagName string
		if cmdPrefix == "" {
			accessOptionFlagName = "accessOption"
		} else {
			accessOptionFlagName = fmt.Sprintf("%v.accessOption", cmdPrefix)
		}

		accessOptionFlagValue, err := cmd.Flags().GetInt32(accessOptionFlagName)
		if err != nil {
			return err, false
		}
		m.AccessOption = &accessOptionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationZookeeperPutDataBodyFlag(m *zookeeper.PutDataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {

		var bodyFlagName string
		if cmdPrefix == "" {
			bodyFlagName = "body"
		} else {
			bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
		}

		bodyFlagValue, err := cmd.Flags().GetString(bodyFlagName)
		if err != nil {
			return err, false
		}
		m.Body = bodyFlagValue

	}
	return nil, retAdded
}
func retrieveOperationZookeeperPutDataDataFlag(m *zookeeper.PutDataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("data") {

		var dataFlagName string
		if cmdPrefix == "" {
			dataFlagName = "data"
		} else {
			dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
		}

		dataFlagValue, err := cmd.Flags().GetString(dataFlagName)
		if err != nil {
			return err, false
		}
		m.Data = &dataFlagValue

	}
	return nil, retAdded
}
func retrieveOperationZookeeperPutDataExpectedVersionFlag(m *zookeeper.PutDataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("expectedVersion") {

		var expectedVersionFlagName string
		if cmdPrefix == "" {
			expectedVersionFlagName = "expectedVersion"
		} else {
			expectedVersionFlagName = fmt.Sprintf("%v.expectedVersion", cmdPrefix)
		}

		expectedVersionFlagValue, err := cmd.Flags().GetInt32(expectedVersionFlagName)
		if err != nil {
			return err, false
		}
		m.ExpectedVersion = &expectedVersionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationZookeeperPutDataPathFlag(m *zookeeper.PutDataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("path") {

		var pathFlagName string
		if cmdPrefix == "" {
			pathFlagName = "path"
		} else {
			pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
		}

		pathFlagValue, err := cmd.Flags().GetString(pathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = pathFlagValue

	}
	return nil, retAdded
}

// parseOperationZookeeperPutDataResult parses request result and return the string content
func parseOperationZookeeperPutDataResult(resp0 *zookeeper.PutDataOK, resp1 *zookeeper.PutDataNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning putDataOK is not supported

		// Non schema case: warning putDataNoContent is not supported

		// Non schema case: warning putDataNotFound is not supported

		// Non schema case: warning putDataInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response putDataOK is not supported by go-swagger cli yet.

	// warning: non schema response putDataNoContent is not supported by go-swagger cli yet.

	return "", nil
}
