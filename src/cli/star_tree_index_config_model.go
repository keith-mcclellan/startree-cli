// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for StarTreeIndexConfig

// register flags to command
func registerModelStarTreeIndexConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStarTreeIndexConfigDimensionsSplitOrder(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStarTreeIndexConfigFunctionColumnPairs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStarTreeIndexConfigMaxLeafRecords(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStarTreeIndexConfigSkipStarNodeCreationForDimensions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStarTreeIndexConfigDimensionsSplitOrder(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: dimensionsSplitOrder []string array type is not supported by go-swagger cli yet

	return nil
}

func registerStarTreeIndexConfigFunctionColumnPairs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: functionColumnPairs []string array type is not supported by go-swagger cli yet

	return nil
}

func registerStarTreeIndexConfigMaxLeafRecords(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxLeafRecordsDescription := ``

	var maxLeafRecordsFlagName string
	if cmdPrefix == "" {
		maxLeafRecordsFlagName = "maxLeafRecords"
	} else {
		maxLeafRecordsFlagName = fmt.Sprintf("%v.maxLeafRecords", cmdPrefix)
	}

	var maxLeafRecordsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(maxLeafRecordsFlagName, maxLeafRecordsFlagDefault, maxLeafRecordsDescription)

	return nil
}

func registerStarTreeIndexConfigSkipStarNodeCreationForDimensions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: skipStarNodeCreationForDimensions []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStarTreeIndexConfigFlags(depth int, m *models.StarTreeIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dimensionsSplitOrderAdded := retrieveStarTreeIndexConfigDimensionsSplitOrderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dimensionsSplitOrderAdded

	err, functionColumnPairsAdded := retrieveStarTreeIndexConfigFunctionColumnPairsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || functionColumnPairsAdded

	err, maxLeafRecordsAdded := retrieveStarTreeIndexConfigMaxLeafRecordsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxLeafRecordsAdded

	err, skipStarNodeCreationForDimensionsAdded := retrieveStarTreeIndexConfigSkipStarNodeCreationForDimensionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || skipStarNodeCreationForDimensionsAdded

	return nil, retAdded
}

func retrieveStarTreeIndexConfigDimensionsSplitOrderFlags(depth int, m *models.StarTreeIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dimensionsSplitOrderFlagName := fmt.Sprintf("%v.dimensionsSplitOrder", cmdPrefix)
	if cmd.Flags().Changed(dimensionsSplitOrderFlagName) {
		// warning: dimensionsSplitOrder array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStarTreeIndexConfigFunctionColumnPairsFlags(depth int, m *models.StarTreeIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	functionColumnPairsFlagName := fmt.Sprintf("%v.functionColumnPairs", cmdPrefix)
	if cmd.Flags().Changed(functionColumnPairsFlagName) {
		// warning: functionColumnPairs array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStarTreeIndexConfigMaxLeafRecordsFlags(depth int, m *models.StarTreeIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxLeafRecordsFlagName := fmt.Sprintf("%v.maxLeafRecords", cmdPrefix)
	if cmd.Flags().Changed(maxLeafRecordsFlagName) {

		var maxLeafRecordsFlagName string
		if cmdPrefix == "" {
			maxLeafRecordsFlagName = "maxLeafRecords"
		} else {
			maxLeafRecordsFlagName = fmt.Sprintf("%v.maxLeafRecords", cmdPrefix)
		}

		maxLeafRecordsFlagValue, err := cmd.Flags().GetInt32(maxLeafRecordsFlagName)
		if err != nil {
			return err, false
		}
		m.MaxLeafRecords = maxLeafRecordsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStarTreeIndexConfigSkipStarNodeCreationForDimensionsFlags(depth int, m *models.StarTreeIndexConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	skipStarNodeCreationForDimensionsFlagName := fmt.Sprintf("%v.skipStarNodeCreationForDimensions", cmdPrefix)
	if cmd.Flags().Changed(skipStarNodeCreationForDimensionsFlagName) {
		// warning: skipStarNodeCreationForDimensions array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
