// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for DateTimeFieldSpec

// register flags to command
func registerModelDateTimeFieldSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDateTimeFieldSpecDataType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDateTimeFieldSpecDefaultNullValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDateTimeFieldSpecDefaultNullValueString(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDateTimeFieldSpecFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDateTimeFieldSpecGranularity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDateTimeFieldSpecMaxLength(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDateTimeFieldSpecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDateTimeFieldSpecSampleValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDateTimeFieldSpecSingleValueField(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDateTimeFieldSpecTransformFunction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDateTimeFieldSpecVirtualColumnProvider(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDateTimeFieldSpecDataType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataTypeDescription := `Enum: ["INT","LONG","FLOAT","DOUBLE","BIG_DECIMAL","BOOLEAN","TIMESTAMP","STRING","JSON","BYTES","STRUCT","MAP","LIST"]. `

	var dataTypeFlagName string
	if cmdPrefix == "" {
		dataTypeFlagName = "dataType"
	} else {
		dataTypeFlagName = fmt.Sprintf("%v.dataType", cmdPrefix)
	}

	var dataTypeFlagDefault string

	_ = cmd.PersistentFlags().String(dataTypeFlagName, dataTypeFlagDefault, dataTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(dataTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["INT","LONG","FLOAT","DOUBLE","BIG_DECIMAL","BOOLEAN","TIMESTAMP","STRING","JSON","BYTES","STRUCT","MAP","LIST"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDateTimeFieldSpecDefaultNullValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: defaultNullValue interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerDateTimeFieldSpecDefaultNullValueString(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultNullValueStringDescription := ``

	var defaultNullValueStringFlagName string
	if cmdPrefix == "" {
		defaultNullValueStringFlagName = "defaultNullValueString"
	} else {
		defaultNullValueStringFlagName = fmt.Sprintf("%v.defaultNullValueString", cmdPrefix)
	}

	var defaultNullValueStringFlagDefault string

	_ = cmd.PersistentFlags().String(defaultNullValueStringFlagName, defaultNullValueStringFlagDefault, defaultNullValueStringDescription)

	return nil
}

func registerDateTimeFieldSpecFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	formatDescription := ``

	var formatFlagName string
	if cmdPrefix == "" {
		formatFlagName = "format"
	} else {
		formatFlagName = fmt.Sprintf("%v.format", cmdPrefix)
	}

	var formatFlagDefault string

	_ = cmd.PersistentFlags().String(formatFlagName, formatFlagDefault, formatDescription)

	return nil
}

func registerDateTimeFieldSpecGranularity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	granularityDescription := ``

	var granularityFlagName string
	if cmdPrefix == "" {
		granularityFlagName = "granularity"
	} else {
		granularityFlagName = fmt.Sprintf("%v.granularity", cmdPrefix)
	}

	var granularityFlagDefault string

	_ = cmd.PersistentFlags().String(granularityFlagName, granularityFlagDefault, granularityDescription)

	return nil
}

func registerDateTimeFieldSpecMaxLength(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxLengthDescription := ``

	var maxLengthFlagName string
	if cmdPrefix == "" {
		maxLengthFlagName = "maxLength"
	} else {
		maxLengthFlagName = fmt.Sprintf("%v.maxLength", cmdPrefix)
	}

	var maxLengthFlagDefault int32

	_ = cmd.PersistentFlags().Int32(maxLengthFlagName, maxLengthFlagDefault, maxLengthDescription)

	return nil
}

func registerDateTimeFieldSpecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerDateTimeFieldSpecSampleValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: sampleValue interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerDateTimeFieldSpecSingleValueField(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	singleValueFieldDescription := ``

	var singleValueFieldFlagName string
	if cmdPrefix == "" {
		singleValueFieldFlagName = "singleValueField"
	} else {
		singleValueFieldFlagName = fmt.Sprintf("%v.singleValueField", cmdPrefix)
	}

	var singleValueFieldFlagDefault bool

	_ = cmd.PersistentFlags().Bool(singleValueFieldFlagName, singleValueFieldFlagDefault, singleValueFieldDescription)

	return nil
}

func registerDateTimeFieldSpecTransformFunction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transformFunctionDescription := ``

	var transformFunctionFlagName string
	if cmdPrefix == "" {
		transformFunctionFlagName = "transformFunction"
	} else {
		transformFunctionFlagName = fmt.Sprintf("%v.transformFunction", cmdPrefix)
	}

	var transformFunctionFlagDefault string

	_ = cmd.PersistentFlags().String(transformFunctionFlagName, transformFunctionFlagDefault, transformFunctionDescription)

	return nil
}

func registerDateTimeFieldSpecVirtualColumnProvider(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	virtualColumnProviderDescription := ``

	var virtualColumnProviderFlagName string
	if cmdPrefix == "" {
		virtualColumnProviderFlagName = "virtualColumnProvider"
	} else {
		virtualColumnProviderFlagName = fmt.Sprintf("%v.virtualColumnProvider", cmdPrefix)
	}

	var virtualColumnProviderFlagDefault string

	_ = cmd.PersistentFlags().String(virtualColumnProviderFlagName, virtualColumnProviderFlagDefault, virtualColumnProviderDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDateTimeFieldSpecFlags(depth int, m *models.DateTimeFieldSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataTypeAdded := retrieveDateTimeFieldSpecDataTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataTypeAdded

	err, defaultNullValueAdded := retrieveDateTimeFieldSpecDefaultNullValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultNullValueAdded

	err, defaultNullValueStringAdded := retrieveDateTimeFieldSpecDefaultNullValueStringFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultNullValueStringAdded

	err, formatAdded := retrieveDateTimeFieldSpecFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || formatAdded

	err, granularityAdded := retrieveDateTimeFieldSpecGranularityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || granularityAdded

	err, maxLengthAdded := retrieveDateTimeFieldSpecMaxLengthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxLengthAdded

	err, nameAdded := retrieveDateTimeFieldSpecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, sampleValueAdded := retrieveDateTimeFieldSpecSampleValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sampleValueAdded

	err, singleValueFieldAdded := retrieveDateTimeFieldSpecSingleValueFieldFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || singleValueFieldAdded

	err, transformFunctionAdded := retrieveDateTimeFieldSpecTransformFunctionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transformFunctionAdded

	err, virtualColumnProviderAdded := retrieveDateTimeFieldSpecVirtualColumnProviderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || virtualColumnProviderAdded

	return nil, retAdded
}

func retrieveDateTimeFieldSpecDataTypeFlags(depth int, m *models.DateTimeFieldSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataTypeFlagName := fmt.Sprintf("%v.dataType", cmdPrefix)
	if cmd.Flags().Changed(dataTypeFlagName) {

		var dataTypeFlagName string
		if cmdPrefix == "" {
			dataTypeFlagName = "dataType"
		} else {
			dataTypeFlagName = fmt.Sprintf("%v.dataType", cmdPrefix)
		}

		dataTypeFlagValue, err := cmd.Flags().GetString(dataTypeFlagName)
		if err != nil {
			return err, false
		}
		m.DataType = dataTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDateTimeFieldSpecDefaultNullValueFlags(depth int, m *models.DateTimeFieldSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultNullValueFlagName := fmt.Sprintf("%v.defaultNullValue", cmdPrefix)
	if cmd.Flags().Changed(defaultNullValueFlagName) {
		// warning: defaultNullValue map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDateTimeFieldSpecDefaultNullValueStringFlags(depth int, m *models.DateTimeFieldSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultNullValueStringFlagName := fmt.Sprintf("%v.defaultNullValueString", cmdPrefix)
	if cmd.Flags().Changed(defaultNullValueStringFlagName) {

		var defaultNullValueStringFlagName string
		if cmdPrefix == "" {
			defaultNullValueStringFlagName = "defaultNullValueString"
		} else {
			defaultNullValueStringFlagName = fmt.Sprintf("%v.defaultNullValueString", cmdPrefix)
		}

		defaultNullValueStringFlagValue, err := cmd.Flags().GetString(defaultNullValueStringFlagName)
		if err != nil {
			return err, false
		}
		m.DefaultNullValueString = defaultNullValueStringFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDateTimeFieldSpecFormatFlags(depth int, m *models.DateTimeFieldSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	formatFlagName := fmt.Sprintf("%v.format", cmdPrefix)
	if cmd.Flags().Changed(formatFlagName) {

		var formatFlagName string
		if cmdPrefix == "" {
			formatFlagName = "format"
		} else {
			formatFlagName = fmt.Sprintf("%v.format", cmdPrefix)
		}

		formatFlagValue, err := cmd.Flags().GetString(formatFlagName)
		if err != nil {
			return err, false
		}
		m.Format = formatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDateTimeFieldSpecGranularityFlags(depth int, m *models.DateTimeFieldSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	granularityFlagName := fmt.Sprintf("%v.granularity", cmdPrefix)
	if cmd.Flags().Changed(granularityFlagName) {

		var granularityFlagName string
		if cmdPrefix == "" {
			granularityFlagName = "granularity"
		} else {
			granularityFlagName = fmt.Sprintf("%v.granularity", cmdPrefix)
		}

		granularityFlagValue, err := cmd.Flags().GetString(granularityFlagName)
		if err != nil {
			return err, false
		}
		m.Granularity = granularityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDateTimeFieldSpecMaxLengthFlags(depth int, m *models.DateTimeFieldSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxLengthFlagName := fmt.Sprintf("%v.maxLength", cmdPrefix)
	if cmd.Flags().Changed(maxLengthFlagName) {

		var maxLengthFlagName string
		if cmdPrefix == "" {
			maxLengthFlagName = "maxLength"
		} else {
			maxLengthFlagName = fmt.Sprintf("%v.maxLength", cmdPrefix)
		}

		maxLengthFlagValue, err := cmd.Flags().GetInt32(maxLengthFlagName)
		if err != nil {
			return err, false
		}
		m.MaxLength = maxLengthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDateTimeFieldSpecNameFlags(depth int, m *models.DateTimeFieldSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDateTimeFieldSpecSampleValueFlags(depth int, m *models.DateTimeFieldSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sampleValueFlagName := fmt.Sprintf("%v.sampleValue", cmdPrefix)
	if cmd.Flags().Changed(sampleValueFlagName) {
		// warning: sampleValue map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDateTimeFieldSpecSingleValueFieldFlags(depth int, m *models.DateTimeFieldSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	singleValueFieldFlagName := fmt.Sprintf("%v.singleValueField", cmdPrefix)
	if cmd.Flags().Changed(singleValueFieldFlagName) {

		var singleValueFieldFlagName string
		if cmdPrefix == "" {
			singleValueFieldFlagName = "singleValueField"
		} else {
			singleValueFieldFlagName = fmt.Sprintf("%v.singleValueField", cmdPrefix)
		}

		singleValueFieldFlagValue, err := cmd.Flags().GetBool(singleValueFieldFlagName)
		if err != nil {
			return err, false
		}
		m.SingleValueField = singleValueFieldFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDateTimeFieldSpecTransformFunctionFlags(depth int, m *models.DateTimeFieldSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transformFunctionFlagName := fmt.Sprintf("%v.transformFunction", cmdPrefix)
	if cmd.Flags().Changed(transformFunctionFlagName) {

		var transformFunctionFlagName string
		if cmdPrefix == "" {
			transformFunctionFlagName = "transformFunction"
		} else {
			transformFunctionFlagName = fmt.Sprintf("%v.transformFunction", cmdPrefix)
		}

		transformFunctionFlagValue, err := cmd.Flags().GetString(transformFunctionFlagName)
		if err != nil {
			return err, false
		}
		m.TransformFunction = transformFunctionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDateTimeFieldSpecVirtualColumnProviderFlags(depth int, m *models.DateTimeFieldSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	virtualColumnProviderFlagName := fmt.Sprintf("%v.virtualColumnProvider", cmdPrefix)
	if cmd.Flags().Changed(virtualColumnProviderFlagName) {

		var virtualColumnProviderFlagName string
		if cmdPrefix == "" {
			virtualColumnProviderFlagName = "virtualColumnProvider"
		} else {
			virtualColumnProviderFlagName = fmt.Sprintf("%v.virtualColumnProvider", cmdPrefix)
		}

		virtualColumnProviderFlagValue, err := cmd.Flags().GetString(virtualColumnProviderFlagName)
		if err != nil {
			return err, false
		}
		m.VirtualColumnProvider = virtualColumnProviderFlagValue

		retAdded = true
	}

	return nil, retAdded
}
