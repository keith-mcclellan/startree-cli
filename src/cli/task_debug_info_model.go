// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"startree.ai/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for TaskDebugInfo

// register flags to command
func registerModelTaskDebugInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskDebugInfoExecutionStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskDebugInfoFinishTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskDebugInfoStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskDebugInfoSubtaskCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskDebugInfoSubtaskInfos(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskDebugInfoTaskState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskDebugInfoExecutionStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionStartTimeDescription := ``

	var executionStartTimeFlagName string
	if cmdPrefix == "" {
		executionStartTimeFlagName = "executionStartTime"
	} else {
		executionStartTimeFlagName = fmt.Sprintf("%v.executionStartTime", cmdPrefix)
	}

	var executionStartTimeFlagDefault string

	_ = cmd.PersistentFlags().String(executionStartTimeFlagName, executionStartTimeFlagDefault, executionStartTimeDescription)

	return nil
}

func registerTaskDebugInfoFinishTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	finishTimeDescription := ``

	var finishTimeFlagName string
	if cmdPrefix == "" {
		finishTimeFlagName = "finishTime"
	} else {
		finishTimeFlagName = fmt.Sprintf("%v.finishTime", cmdPrefix)
	}

	var finishTimeFlagDefault string

	_ = cmd.PersistentFlags().String(finishTimeFlagName, finishTimeFlagDefault, finishTimeDescription)

	return nil
}

func registerTaskDebugInfoStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimeDescription := ``

	var startTimeFlagName string
	if cmdPrefix == "" {
		startTimeFlagName = "startTime"
	} else {
		startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
	}

	var startTimeFlagDefault string

	_ = cmd.PersistentFlags().String(startTimeFlagName, startTimeFlagDefault, startTimeDescription)

	return nil
}

func registerTaskDebugInfoSubtaskCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var subtaskCountFlagName string
	if cmdPrefix == "" {
		subtaskCountFlagName = "subtaskCount"
	} else {
		subtaskCountFlagName = fmt.Sprintf("%v.subtaskCount", cmdPrefix)
	}

	if err := registerModelTaskCountFlags(depth+1, subtaskCountFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskDebugInfoSubtaskInfos(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: subtaskInfos []*SubtaskDebugInfo array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskDebugInfoTaskState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	taskStateDescription := `Enum: ["NOT_STARTED","IN_PROGRESS","STOPPED","STOPPING","FAILED","COMPLETED","ABORTED","TIMED_OUT","TIMING_OUT","FAILING"]. `

	var taskStateFlagName string
	if cmdPrefix == "" {
		taskStateFlagName = "taskState"
	} else {
		taskStateFlagName = fmt.Sprintf("%v.taskState", cmdPrefix)
	}

	var taskStateFlagDefault string

	_ = cmd.PersistentFlags().String(taskStateFlagName, taskStateFlagDefault, taskStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(taskStateFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["NOT_STARTED","IN_PROGRESS","STOPPED","STOPPING","FAILED","COMPLETED","ABORTED","TIMED_OUT","TIMING_OUT","FAILING"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskDebugInfoFlags(depth int, m *models.TaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, executionStartTimeAdded := retrieveTaskDebugInfoExecutionStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionStartTimeAdded

	err, finishTimeAdded := retrieveTaskDebugInfoFinishTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || finishTimeAdded

	err, startTimeAdded := retrieveTaskDebugInfoStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimeAdded

	err, subtaskCountAdded := retrieveTaskDebugInfoSubtaskCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subtaskCountAdded

	err, subtaskInfosAdded := retrieveTaskDebugInfoSubtaskInfosFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subtaskInfosAdded

	err, taskStateAdded := retrieveTaskDebugInfoTaskStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskStateAdded

	return nil, retAdded
}

func retrieveTaskDebugInfoExecutionStartTimeFlags(depth int, m *models.TaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionStartTimeFlagName := fmt.Sprintf("%v.executionStartTime", cmdPrefix)
	if cmd.Flags().Changed(executionStartTimeFlagName) {

		var executionStartTimeFlagName string
		if cmdPrefix == "" {
			executionStartTimeFlagName = "executionStartTime"
		} else {
			executionStartTimeFlagName = fmt.Sprintf("%v.executionStartTime", cmdPrefix)
		}

		executionStartTimeFlagValue, err := cmd.Flags().GetString(executionStartTimeFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionStartTime = executionStartTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskDebugInfoFinishTimeFlags(depth int, m *models.TaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	finishTimeFlagName := fmt.Sprintf("%v.finishTime", cmdPrefix)
	if cmd.Flags().Changed(finishTimeFlagName) {

		var finishTimeFlagName string
		if cmdPrefix == "" {
			finishTimeFlagName = "finishTime"
		} else {
			finishTimeFlagName = fmt.Sprintf("%v.finishTime", cmdPrefix)
		}

		finishTimeFlagValue, err := cmd.Flags().GetString(finishTimeFlagName)
		if err != nil {
			return err, false
		}
		m.FinishTime = finishTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskDebugInfoStartTimeFlags(depth int, m *models.TaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimeFlagName := fmt.Sprintf("%v.startTime", cmdPrefix)
	if cmd.Flags().Changed(startTimeFlagName) {

		var startTimeFlagName string
		if cmdPrefix == "" {
			startTimeFlagName = "startTime"
		} else {
			startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
		}

		startTimeFlagValue, err := cmd.Flags().GetString(startTimeFlagName)
		if err != nil {
			return err, false
		}
		m.StartTime = startTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskDebugInfoSubtaskCountFlags(depth int, m *models.TaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subtaskCountFlagName := fmt.Sprintf("%v.subtaskCount", cmdPrefix)
	if cmd.Flags().Changed(subtaskCountFlagName) {
		// info: complex object subtaskCount TaskCount is retrieved outside this Changed() block
	}
	subtaskCountFlagValue := m.SubtaskCount
	if swag.IsZero(subtaskCountFlagValue) {
		subtaskCountFlagValue = &models.TaskCount{}
	}

	err, subtaskCountAdded := retrieveModelTaskCountFlags(depth+1, subtaskCountFlagValue, subtaskCountFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subtaskCountAdded
	if subtaskCountAdded {
		m.SubtaskCount = subtaskCountFlagValue
	}

	return nil, retAdded
}

func retrieveTaskDebugInfoSubtaskInfosFlags(depth int, m *models.TaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subtaskInfosFlagName := fmt.Sprintf("%v.subtaskInfos", cmdPrefix)
	if cmd.Flags().Changed(subtaskInfosFlagName) {
		// warning: subtaskInfos array type []*SubtaskDebugInfo is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskDebugInfoTaskStateFlags(depth int, m *models.TaskDebugInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskStateFlagName := fmt.Sprintf("%v.taskState", cmdPrefix)
	if cmd.Flags().Changed(taskStateFlagName) {

		var taskStateFlagName string
		if cmdPrefix == "" {
			taskStateFlagName = "taskState"
		} else {
			taskStateFlagName = fmt.Sprintf("%v.taskState", cmdPrefix)
		}

		taskStateFlagValue, err := cmd.Flags().GetString(taskStateFlagName)
		if err != nil {
			return err, false
		}
		m.TaskState = taskStateFlagValue

		retAdded = true
	}

	return nil, retAdded
}
