// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for ClusterHealthResponse

// register flags to command
func registerModelClusterHealthResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerClusterHealthResponseTableToErrorSegmentsCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClusterHealthResponseTableToMisconfiguredSegmentCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClusterHealthResponseTableToSegmentsWitHMissingColumnsCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClusterHealthResponseUnhealthyServerCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerClusterHealthResponseTableToErrorSegmentsCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tableToErrorSegmentsCount map[string]int32 map type is not supported by go-swagger cli yet

	return nil
}

func registerClusterHealthResponseTableToMisconfiguredSegmentCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tableToMisconfiguredSegmentCount map[string]int32 map type is not supported by go-swagger cli yet

	return nil
}

func registerClusterHealthResponseTableToSegmentsWitHMissingColumnsCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tableToSegmentsWitHMissingColumnsCount map[string]int32 map type is not supported by go-swagger cli yet

	return nil
}

func registerClusterHealthResponseUnhealthyServerCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unhealthyServerCountDescription := ``

	var unhealthyServerCountFlagName string
	if cmdPrefix == "" {
		unhealthyServerCountFlagName = "unhealthyServerCount"
	} else {
		unhealthyServerCountFlagName = fmt.Sprintf("%v.unhealthyServerCount", cmdPrefix)
	}

	var unhealthyServerCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(unhealthyServerCountFlagName, unhealthyServerCountFlagDefault, unhealthyServerCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelClusterHealthResponseFlags(depth int, m *models.ClusterHealthResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, tableToErrorSegmentsCountAdded := retrieveClusterHealthResponseTableToErrorSegmentsCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableToErrorSegmentsCountAdded

	err, tableToMisconfiguredSegmentCountAdded := retrieveClusterHealthResponseTableToMisconfiguredSegmentCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableToMisconfiguredSegmentCountAdded

	err, tableToSegmentsWitHMissingColumnsCountAdded := retrieveClusterHealthResponseTableToSegmentsWitHMissingColumnsCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableToSegmentsWitHMissingColumnsCountAdded

	err, unhealthyServerCountAdded := retrieveClusterHealthResponseUnhealthyServerCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unhealthyServerCountAdded

	return nil, retAdded
}

func retrieveClusterHealthResponseTableToErrorSegmentsCountFlags(depth int, m *models.ClusterHealthResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableToErrorSegmentsCountFlagName := fmt.Sprintf("%v.tableToErrorSegmentsCount", cmdPrefix)
	if cmd.Flags().Changed(tableToErrorSegmentsCountFlagName) {
		// warning: tableToErrorSegmentsCount map type map[string]int32 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveClusterHealthResponseTableToMisconfiguredSegmentCountFlags(depth int, m *models.ClusterHealthResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableToMisconfiguredSegmentCountFlagName := fmt.Sprintf("%v.tableToMisconfiguredSegmentCount", cmdPrefix)
	if cmd.Flags().Changed(tableToMisconfiguredSegmentCountFlagName) {
		// warning: tableToMisconfiguredSegmentCount map type map[string]int32 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveClusterHealthResponseTableToSegmentsWitHMissingColumnsCountFlags(depth int, m *models.ClusterHealthResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableToSegmentsWitHMissingColumnsCountFlagName := fmt.Sprintf("%v.tableToSegmentsWitHMissingColumnsCount", cmdPrefix)
	if cmd.Flags().Changed(tableToSegmentsWitHMissingColumnsCountFlagName) {
		// warning: tableToSegmentsWitHMissingColumnsCount map type map[string]int32 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveClusterHealthResponseUnhealthyServerCountFlags(depth int, m *models.ClusterHealthResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unhealthyServerCountFlagName := fmt.Sprintf("%v.unhealthyServerCount", cmdPrefix)
	if cmd.Flags().Changed(unhealthyServerCountFlagName) {

		var unhealthyServerCountFlagName string
		if cmdPrefix == "" {
			unhealthyServerCountFlagName = "unhealthyServerCount"
		} else {
			unhealthyServerCountFlagName = fmt.Sprintf("%v.unhealthyServerCount", cmdPrefix)
		}

		unhealthyServerCountFlagValue, err := cmd.Flags().GetInt64(unhealthyServerCountFlagName)
		if err != nil {
			return err, false
		}
		m.UnhealthyServerCount = unhealthyServerCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}
