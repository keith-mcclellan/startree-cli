// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"startree.ai/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for SegmentsValidationAndRetentionConfig

// register flags to command
func registerModelSegmentsValidationAndRetentionConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSegmentsValidationAndRetentionConfigCompletionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigCrypterClassName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigDeletedSegmentsRetentionPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigMinimizeDataMovement(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigPeerSegmentDownloadScheme(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigReplicaGroupStrategyConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigReplicasPerPartition(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigReplication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigRetentionTimeUnit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigRetentionTimeValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigSchemaName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigSegmentAssignmentStrategy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigSegmentPushFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigSegmentPushType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigTimeColumnName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentsValidationAndRetentionConfigTimeType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSegmentsValidationAndRetentionConfigCompletionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var completionConfigFlagName string
	if cmdPrefix == "" {
		completionConfigFlagName = "completionConfig"
	} else {
		completionConfigFlagName = fmt.Sprintf("%v.completionConfig", cmdPrefix)
	}

	if err := registerModelCompletionConfigFlags(depth+1, completionConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSegmentsValidationAndRetentionConfigCrypterClassName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	crypterClassNameDescription := ``

	var crypterClassNameFlagName string
	if cmdPrefix == "" {
		crypterClassNameFlagName = "crypterClassName"
	} else {
		crypterClassNameFlagName = fmt.Sprintf("%v.crypterClassName", cmdPrefix)
	}

	var crypterClassNameFlagDefault string

	_ = cmd.PersistentFlags().String(crypterClassNameFlagName, crypterClassNameFlagDefault, crypterClassNameDescription)

	return nil
}

func registerSegmentsValidationAndRetentionConfigDeletedSegmentsRetentionPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deletedSegmentsRetentionPeriodDescription := ``

	var deletedSegmentsRetentionPeriodFlagName string
	if cmdPrefix == "" {
		deletedSegmentsRetentionPeriodFlagName = "deletedSegmentsRetentionPeriod"
	} else {
		deletedSegmentsRetentionPeriodFlagName = fmt.Sprintf("%v.deletedSegmentsRetentionPeriod", cmdPrefix)
	}

	var deletedSegmentsRetentionPeriodFlagDefault string

	_ = cmd.PersistentFlags().String(deletedSegmentsRetentionPeriodFlagName, deletedSegmentsRetentionPeriodFlagDefault, deletedSegmentsRetentionPeriodDescription)

	return nil
}

func registerSegmentsValidationAndRetentionConfigMinimizeDataMovement(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minimizeDataMovementDescription := ``

	var minimizeDataMovementFlagName string
	if cmdPrefix == "" {
		minimizeDataMovementFlagName = "minimizeDataMovement"
	} else {
		minimizeDataMovementFlagName = fmt.Sprintf("%v.minimizeDataMovement", cmdPrefix)
	}

	var minimizeDataMovementFlagDefault bool

	_ = cmd.PersistentFlags().Bool(minimizeDataMovementFlagName, minimizeDataMovementFlagDefault, minimizeDataMovementDescription)

	return nil
}

func registerSegmentsValidationAndRetentionConfigPeerSegmentDownloadScheme(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	peerSegmentDownloadSchemeDescription := ``

	var peerSegmentDownloadSchemeFlagName string
	if cmdPrefix == "" {
		peerSegmentDownloadSchemeFlagName = "peerSegmentDownloadScheme"
	} else {
		peerSegmentDownloadSchemeFlagName = fmt.Sprintf("%v.peerSegmentDownloadScheme", cmdPrefix)
	}

	var peerSegmentDownloadSchemeFlagDefault string

	_ = cmd.PersistentFlags().String(peerSegmentDownloadSchemeFlagName, peerSegmentDownloadSchemeFlagDefault, peerSegmentDownloadSchemeDescription)

	return nil
}

func registerSegmentsValidationAndRetentionConfigReplicaGroupStrategyConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var replicaGroupStrategyConfigFlagName string
	if cmdPrefix == "" {
		replicaGroupStrategyConfigFlagName = "replicaGroupStrategyConfig"
	} else {
		replicaGroupStrategyConfigFlagName = fmt.Sprintf("%v.replicaGroupStrategyConfig", cmdPrefix)
	}

	if err := registerModelReplicaGroupStrategyConfigFlags(depth+1, replicaGroupStrategyConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSegmentsValidationAndRetentionConfigReplicasPerPartition(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	replicasPerPartitionDescription := ``

	var replicasPerPartitionFlagName string
	if cmdPrefix == "" {
		replicasPerPartitionFlagName = "replicasPerPartition"
	} else {
		replicasPerPartitionFlagName = fmt.Sprintf("%v.replicasPerPartition", cmdPrefix)
	}

	var replicasPerPartitionFlagDefault string

	_ = cmd.PersistentFlags().String(replicasPerPartitionFlagName, replicasPerPartitionFlagDefault, replicasPerPartitionDescription)

	return nil
}

func registerSegmentsValidationAndRetentionConfigReplication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	replicationDescription := ``

	var replicationFlagName string
	if cmdPrefix == "" {
		replicationFlagName = "replication"
	} else {
		replicationFlagName = fmt.Sprintf("%v.replication", cmdPrefix)
	}

	var replicationFlagDefault string

	_ = cmd.PersistentFlags().String(replicationFlagName, replicationFlagDefault, replicationDescription)

	return nil
}

func registerSegmentsValidationAndRetentionConfigRetentionTimeUnit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	retentionTimeUnitDescription := ``

	var retentionTimeUnitFlagName string
	if cmdPrefix == "" {
		retentionTimeUnitFlagName = "retentionTimeUnit"
	} else {
		retentionTimeUnitFlagName = fmt.Sprintf("%v.retentionTimeUnit", cmdPrefix)
	}

	var retentionTimeUnitFlagDefault string

	_ = cmd.PersistentFlags().String(retentionTimeUnitFlagName, retentionTimeUnitFlagDefault, retentionTimeUnitDescription)

	return nil
}

func registerSegmentsValidationAndRetentionConfigRetentionTimeValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	retentionTimeValueDescription := ``

	var retentionTimeValueFlagName string
	if cmdPrefix == "" {
		retentionTimeValueFlagName = "retentionTimeValue"
	} else {
		retentionTimeValueFlagName = fmt.Sprintf("%v.retentionTimeValue", cmdPrefix)
	}

	var retentionTimeValueFlagDefault string

	_ = cmd.PersistentFlags().String(retentionTimeValueFlagName, retentionTimeValueFlagDefault, retentionTimeValueDescription)

	return nil
}

func registerSegmentsValidationAndRetentionConfigSchemaName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	schemaNameDescription := ``

	var schemaNameFlagName string
	if cmdPrefix == "" {
		schemaNameFlagName = "schemaName"
	} else {
		schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
	}

	var schemaNameFlagDefault string

	_ = cmd.PersistentFlags().String(schemaNameFlagName, schemaNameFlagDefault, schemaNameDescription)

	return nil
}

func registerSegmentsValidationAndRetentionConfigSegmentAssignmentStrategy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentAssignmentStrategyDescription := ``

	var segmentAssignmentStrategyFlagName string
	if cmdPrefix == "" {
		segmentAssignmentStrategyFlagName = "segmentAssignmentStrategy"
	} else {
		segmentAssignmentStrategyFlagName = fmt.Sprintf("%v.segmentAssignmentStrategy", cmdPrefix)
	}

	var segmentAssignmentStrategyFlagDefault string

	_ = cmd.PersistentFlags().String(segmentAssignmentStrategyFlagName, segmentAssignmentStrategyFlagDefault, segmentAssignmentStrategyDescription)

	return nil
}

func registerSegmentsValidationAndRetentionConfigSegmentPushFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentPushFrequencyDescription := ``

	var segmentPushFrequencyFlagName string
	if cmdPrefix == "" {
		segmentPushFrequencyFlagName = "segmentPushFrequency"
	} else {
		segmentPushFrequencyFlagName = fmt.Sprintf("%v.segmentPushFrequency", cmdPrefix)
	}

	var segmentPushFrequencyFlagDefault string

	_ = cmd.PersistentFlags().String(segmentPushFrequencyFlagName, segmentPushFrequencyFlagDefault, segmentPushFrequencyDescription)

	return nil
}

func registerSegmentsValidationAndRetentionConfigSegmentPushType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentPushTypeDescription := ``

	var segmentPushTypeFlagName string
	if cmdPrefix == "" {
		segmentPushTypeFlagName = "segmentPushType"
	} else {
		segmentPushTypeFlagName = fmt.Sprintf("%v.segmentPushType", cmdPrefix)
	}

	var segmentPushTypeFlagDefault string

	_ = cmd.PersistentFlags().String(segmentPushTypeFlagName, segmentPushTypeFlagDefault, segmentPushTypeDescription)

	return nil
}

func registerSegmentsValidationAndRetentionConfigTimeColumnName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeColumnNameDescription := ``

	var timeColumnNameFlagName string
	if cmdPrefix == "" {
		timeColumnNameFlagName = "timeColumnName"
	} else {
		timeColumnNameFlagName = fmt.Sprintf("%v.timeColumnName", cmdPrefix)
	}

	var timeColumnNameFlagDefault string

	_ = cmd.PersistentFlags().String(timeColumnNameFlagName, timeColumnNameFlagDefault, timeColumnNameDescription)

	return nil
}

func registerSegmentsValidationAndRetentionConfigTimeType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeTypeDescription := `Enum: ["NANOSECONDS","MICROSECONDS","MILLISECONDS","SECONDS","MINUTES","HOURS","DAYS"]. `

	var timeTypeFlagName string
	if cmdPrefix == "" {
		timeTypeFlagName = "timeType"
	} else {
		timeTypeFlagName = fmt.Sprintf("%v.timeType", cmdPrefix)
	}

	var timeTypeFlagDefault string

	_ = cmd.PersistentFlags().String(timeTypeFlagName, timeTypeFlagDefault, timeTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(timeTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["NANOSECONDS","MICROSECONDS","MILLISECONDS","SECONDS","MINUTES","HOURS","DAYS"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSegmentsValidationAndRetentionConfigFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, completionConfigAdded := retrieveSegmentsValidationAndRetentionConfigCompletionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || completionConfigAdded

	err, crypterClassNameAdded := retrieveSegmentsValidationAndRetentionConfigCrypterClassNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || crypterClassNameAdded

	err, deletedSegmentsRetentionPeriodAdded := retrieveSegmentsValidationAndRetentionConfigDeletedSegmentsRetentionPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deletedSegmentsRetentionPeriodAdded

	err, minimizeDataMovementAdded := retrieveSegmentsValidationAndRetentionConfigMinimizeDataMovementFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minimizeDataMovementAdded

	err, peerSegmentDownloadSchemeAdded := retrieveSegmentsValidationAndRetentionConfigPeerSegmentDownloadSchemeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || peerSegmentDownloadSchemeAdded

	err, replicaGroupStrategyConfigAdded := retrieveSegmentsValidationAndRetentionConfigReplicaGroupStrategyConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || replicaGroupStrategyConfigAdded

	err, replicasPerPartitionAdded := retrieveSegmentsValidationAndRetentionConfigReplicasPerPartitionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || replicasPerPartitionAdded

	err, replicationAdded := retrieveSegmentsValidationAndRetentionConfigReplicationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || replicationAdded

	err, retentionTimeUnitAdded := retrieveSegmentsValidationAndRetentionConfigRetentionTimeUnitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || retentionTimeUnitAdded

	err, retentionTimeValueAdded := retrieveSegmentsValidationAndRetentionConfigRetentionTimeValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || retentionTimeValueAdded

	err, schemaNameAdded := retrieveSegmentsValidationAndRetentionConfigSchemaNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || schemaNameAdded

	err, segmentAssignmentStrategyAdded := retrieveSegmentsValidationAndRetentionConfigSegmentAssignmentStrategyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentAssignmentStrategyAdded

	err, segmentPushFrequencyAdded := retrieveSegmentsValidationAndRetentionConfigSegmentPushFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentPushFrequencyAdded

	err, segmentPushTypeAdded := retrieveSegmentsValidationAndRetentionConfigSegmentPushTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentPushTypeAdded

	err, timeColumnNameAdded := retrieveSegmentsValidationAndRetentionConfigTimeColumnNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeColumnNameAdded

	err, timeTypeAdded := retrieveSegmentsValidationAndRetentionConfigTimeTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeTypeAdded

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigCompletionConfigFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	completionConfigFlagName := fmt.Sprintf("%v.completionConfig", cmdPrefix)
	if cmd.Flags().Changed(completionConfigFlagName) {
		// info: complex object completionConfig CompletionConfig is retrieved outside this Changed() block
	}
	completionConfigFlagValue := m.CompletionConfig
	if swag.IsZero(completionConfigFlagValue) {
		completionConfigFlagValue = &models.CompletionConfig{}
	}

	err, completionConfigAdded := retrieveModelCompletionConfigFlags(depth+1, completionConfigFlagValue, completionConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || completionConfigAdded
	if completionConfigAdded {
		m.CompletionConfig = completionConfigFlagValue
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigCrypterClassNameFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	crypterClassNameFlagName := fmt.Sprintf("%v.crypterClassName", cmdPrefix)
	if cmd.Flags().Changed(crypterClassNameFlagName) {

		var crypterClassNameFlagName string
		if cmdPrefix == "" {
			crypterClassNameFlagName = "crypterClassName"
		} else {
			crypterClassNameFlagName = fmt.Sprintf("%v.crypterClassName", cmdPrefix)
		}

		crypterClassNameFlagValue, err := cmd.Flags().GetString(crypterClassNameFlagName)
		if err != nil {
			return err, false
		}
		m.CrypterClassName = crypterClassNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigDeletedSegmentsRetentionPeriodFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deletedSegmentsRetentionPeriodFlagName := fmt.Sprintf("%v.deletedSegmentsRetentionPeriod", cmdPrefix)
	if cmd.Flags().Changed(deletedSegmentsRetentionPeriodFlagName) {

		var deletedSegmentsRetentionPeriodFlagName string
		if cmdPrefix == "" {
			deletedSegmentsRetentionPeriodFlagName = "deletedSegmentsRetentionPeriod"
		} else {
			deletedSegmentsRetentionPeriodFlagName = fmt.Sprintf("%v.deletedSegmentsRetentionPeriod", cmdPrefix)
		}

		deletedSegmentsRetentionPeriodFlagValue, err := cmd.Flags().GetString(deletedSegmentsRetentionPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.DeletedSegmentsRetentionPeriod = deletedSegmentsRetentionPeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigMinimizeDataMovementFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minimizeDataMovementFlagName := fmt.Sprintf("%v.minimizeDataMovement", cmdPrefix)
	if cmd.Flags().Changed(minimizeDataMovementFlagName) {

		var minimizeDataMovementFlagName string
		if cmdPrefix == "" {
			minimizeDataMovementFlagName = "minimizeDataMovement"
		} else {
			minimizeDataMovementFlagName = fmt.Sprintf("%v.minimizeDataMovement", cmdPrefix)
		}

		minimizeDataMovementFlagValue, err := cmd.Flags().GetBool(minimizeDataMovementFlagName)
		if err != nil {
			return err, false
		}
		m.MinimizeDataMovement = minimizeDataMovementFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigPeerSegmentDownloadSchemeFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	peerSegmentDownloadSchemeFlagName := fmt.Sprintf("%v.peerSegmentDownloadScheme", cmdPrefix)
	if cmd.Flags().Changed(peerSegmentDownloadSchemeFlagName) {

		var peerSegmentDownloadSchemeFlagName string
		if cmdPrefix == "" {
			peerSegmentDownloadSchemeFlagName = "peerSegmentDownloadScheme"
		} else {
			peerSegmentDownloadSchemeFlagName = fmt.Sprintf("%v.peerSegmentDownloadScheme", cmdPrefix)
		}

		peerSegmentDownloadSchemeFlagValue, err := cmd.Flags().GetString(peerSegmentDownloadSchemeFlagName)
		if err != nil {
			return err, false
		}
		m.PeerSegmentDownloadScheme = peerSegmentDownloadSchemeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigReplicaGroupStrategyConfigFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	replicaGroupStrategyConfigFlagName := fmt.Sprintf("%v.replicaGroupStrategyConfig", cmdPrefix)
	if cmd.Flags().Changed(replicaGroupStrategyConfigFlagName) {
		// info: complex object replicaGroupStrategyConfig ReplicaGroupStrategyConfig is retrieved outside this Changed() block
	}
	replicaGroupStrategyConfigFlagValue := m.ReplicaGroupStrategyConfig
	if swag.IsZero(replicaGroupStrategyConfigFlagValue) {
		replicaGroupStrategyConfigFlagValue = &models.ReplicaGroupStrategyConfig{}
	}

	err, replicaGroupStrategyConfigAdded := retrieveModelReplicaGroupStrategyConfigFlags(depth+1, replicaGroupStrategyConfigFlagValue, replicaGroupStrategyConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || replicaGroupStrategyConfigAdded
	if replicaGroupStrategyConfigAdded {
		m.ReplicaGroupStrategyConfig = replicaGroupStrategyConfigFlagValue
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigReplicasPerPartitionFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	replicasPerPartitionFlagName := fmt.Sprintf("%v.replicasPerPartition", cmdPrefix)
	if cmd.Flags().Changed(replicasPerPartitionFlagName) {

		var replicasPerPartitionFlagName string
		if cmdPrefix == "" {
			replicasPerPartitionFlagName = "replicasPerPartition"
		} else {
			replicasPerPartitionFlagName = fmt.Sprintf("%v.replicasPerPartition", cmdPrefix)
		}

		replicasPerPartitionFlagValue, err := cmd.Flags().GetString(replicasPerPartitionFlagName)
		if err != nil {
			return err, false
		}
		m.ReplicasPerPartition = replicasPerPartitionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigReplicationFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	replicationFlagName := fmt.Sprintf("%v.replication", cmdPrefix)
	if cmd.Flags().Changed(replicationFlagName) {

		var replicationFlagName string
		if cmdPrefix == "" {
			replicationFlagName = "replication"
		} else {
			replicationFlagName = fmt.Sprintf("%v.replication", cmdPrefix)
		}

		replicationFlagValue, err := cmd.Flags().GetString(replicationFlagName)
		if err != nil {
			return err, false
		}
		m.Replication = replicationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigRetentionTimeUnitFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	retentionTimeUnitFlagName := fmt.Sprintf("%v.retentionTimeUnit", cmdPrefix)
	if cmd.Flags().Changed(retentionTimeUnitFlagName) {

		var retentionTimeUnitFlagName string
		if cmdPrefix == "" {
			retentionTimeUnitFlagName = "retentionTimeUnit"
		} else {
			retentionTimeUnitFlagName = fmt.Sprintf("%v.retentionTimeUnit", cmdPrefix)
		}

		retentionTimeUnitFlagValue, err := cmd.Flags().GetString(retentionTimeUnitFlagName)
		if err != nil {
			return err, false
		}
		m.RetentionTimeUnit = retentionTimeUnitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigRetentionTimeValueFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	retentionTimeValueFlagName := fmt.Sprintf("%v.retentionTimeValue", cmdPrefix)
	if cmd.Flags().Changed(retentionTimeValueFlagName) {

		var retentionTimeValueFlagName string
		if cmdPrefix == "" {
			retentionTimeValueFlagName = "retentionTimeValue"
		} else {
			retentionTimeValueFlagName = fmt.Sprintf("%v.retentionTimeValue", cmdPrefix)
		}

		retentionTimeValueFlagValue, err := cmd.Flags().GetString(retentionTimeValueFlagName)
		if err != nil {
			return err, false
		}
		m.RetentionTimeValue = retentionTimeValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigSchemaNameFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	schemaNameFlagName := fmt.Sprintf("%v.schemaName", cmdPrefix)
	if cmd.Flags().Changed(schemaNameFlagName) {

		var schemaNameFlagName string
		if cmdPrefix == "" {
			schemaNameFlagName = "schemaName"
		} else {
			schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
		}

		schemaNameFlagValue, err := cmd.Flags().GetString(schemaNameFlagName)
		if err != nil {
			return err, false
		}
		m.SchemaName = schemaNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigSegmentAssignmentStrategyFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentAssignmentStrategyFlagName := fmt.Sprintf("%v.segmentAssignmentStrategy", cmdPrefix)
	if cmd.Flags().Changed(segmentAssignmentStrategyFlagName) {

		var segmentAssignmentStrategyFlagName string
		if cmdPrefix == "" {
			segmentAssignmentStrategyFlagName = "segmentAssignmentStrategy"
		} else {
			segmentAssignmentStrategyFlagName = fmt.Sprintf("%v.segmentAssignmentStrategy", cmdPrefix)
		}

		segmentAssignmentStrategyFlagValue, err := cmd.Flags().GetString(segmentAssignmentStrategyFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentAssignmentStrategy = segmentAssignmentStrategyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigSegmentPushFrequencyFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentPushFrequencyFlagName := fmt.Sprintf("%v.segmentPushFrequency", cmdPrefix)
	if cmd.Flags().Changed(segmentPushFrequencyFlagName) {

		var segmentPushFrequencyFlagName string
		if cmdPrefix == "" {
			segmentPushFrequencyFlagName = "segmentPushFrequency"
		} else {
			segmentPushFrequencyFlagName = fmt.Sprintf("%v.segmentPushFrequency", cmdPrefix)
		}

		segmentPushFrequencyFlagValue, err := cmd.Flags().GetString(segmentPushFrequencyFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentPushFrequency = segmentPushFrequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigSegmentPushTypeFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentPushTypeFlagName := fmt.Sprintf("%v.segmentPushType", cmdPrefix)
	if cmd.Flags().Changed(segmentPushTypeFlagName) {

		var segmentPushTypeFlagName string
		if cmdPrefix == "" {
			segmentPushTypeFlagName = "segmentPushType"
		} else {
			segmentPushTypeFlagName = fmt.Sprintf("%v.segmentPushType", cmdPrefix)
		}

		segmentPushTypeFlagValue, err := cmd.Flags().GetString(segmentPushTypeFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentPushType = segmentPushTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigTimeColumnNameFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeColumnNameFlagName := fmt.Sprintf("%v.timeColumnName", cmdPrefix)
	if cmd.Flags().Changed(timeColumnNameFlagName) {

		var timeColumnNameFlagName string
		if cmdPrefix == "" {
			timeColumnNameFlagName = "timeColumnName"
		} else {
			timeColumnNameFlagName = fmt.Sprintf("%v.timeColumnName", cmdPrefix)
		}

		timeColumnNameFlagValue, err := cmd.Flags().GetString(timeColumnNameFlagName)
		if err != nil {
			return err, false
		}
		m.TimeColumnName = timeColumnNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentsValidationAndRetentionConfigTimeTypeFlags(depth int, m *models.SegmentsValidationAndRetentionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeTypeFlagName := fmt.Sprintf("%v.timeType", cmdPrefix)
	if cmd.Flags().Changed(timeTypeFlagName) {

		var timeTypeFlagName string
		if cmdPrefix == "" {
			timeTypeFlagName = "timeType"
		} else {
			timeTypeFlagName = fmt.Sprintf("%v.timeType", cmdPrefix)
		}

		timeTypeFlagValue, err := cmd.Flags().GetString(timeTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TimeType = timeTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
