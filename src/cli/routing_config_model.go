// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for RoutingConfig

// register flags to command
func registerModelRoutingConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRoutingConfigInstanceSelectorType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRoutingConfigRoutingTableBuilderName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRoutingConfigSegmentPrunerTypes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRoutingConfigInstanceSelectorType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	instanceSelectorTypeDescription := ``

	var instanceSelectorTypeFlagName string
	if cmdPrefix == "" {
		instanceSelectorTypeFlagName = "instanceSelectorType"
	} else {
		instanceSelectorTypeFlagName = fmt.Sprintf("%v.instanceSelectorType", cmdPrefix)
	}

	var instanceSelectorTypeFlagDefault string

	_ = cmd.PersistentFlags().String(instanceSelectorTypeFlagName, instanceSelectorTypeFlagDefault, instanceSelectorTypeDescription)

	return nil
}

func registerRoutingConfigRoutingTableBuilderName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	routingTableBuilderNameDescription := ``

	var routingTableBuilderNameFlagName string
	if cmdPrefix == "" {
		routingTableBuilderNameFlagName = "routingTableBuilderName"
	} else {
		routingTableBuilderNameFlagName = fmt.Sprintf("%v.routingTableBuilderName", cmdPrefix)
	}

	var routingTableBuilderNameFlagDefault string

	_ = cmd.PersistentFlags().String(routingTableBuilderNameFlagName, routingTableBuilderNameFlagDefault, routingTableBuilderNameDescription)

	return nil
}

func registerRoutingConfigSegmentPrunerTypes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: segmentPrunerTypes []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRoutingConfigFlags(depth int, m *models.RoutingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, instanceSelectorTypeAdded := retrieveRoutingConfigInstanceSelectorTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || instanceSelectorTypeAdded

	err, routingTableBuilderNameAdded := retrieveRoutingConfigRoutingTableBuilderNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || routingTableBuilderNameAdded

	err, segmentPrunerTypesAdded := retrieveRoutingConfigSegmentPrunerTypesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentPrunerTypesAdded

	return nil, retAdded
}

func retrieveRoutingConfigInstanceSelectorTypeFlags(depth int, m *models.RoutingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	instanceSelectorTypeFlagName := fmt.Sprintf("%v.instanceSelectorType", cmdPrefix)
	if cmd.Flags().Changed(instanceSelectorTypeFlagName) {

		var instanceSelectorTypeFlagName string
		if cmdPrefix == "" {
			instanceSelectorTypeFlagName = "instanceSelectorType"
		} else {
			instanceSelectorTypeFlagName = fmt.Sprintf("%v.instanceSelectorType", cmdPrefix)
		}

		instanceSelectorTypeFlagValue, err := cmd.Flags().GetString(instanceSelectorTypeFlagName)
		if err != nil {
			return err, false
		}
		m.InstanceSelectorType = instanceSelectorTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRoutingConfigRoutingTableBuilderNameFlags(depth int, m *models.RoutingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	routingTableBuilderNameFlagName := fmt.Sprintf("%v.routingTableBuilderName", cmdPrefix)
	if cmd.Flags().Changed(routingTableBuilderNameFlagName) {

		var routingTableBuilderNameFlagName string
		if cmdPrefix == "" {
			routingTableBuilderNameFlagName = "routingTableBuilderName"
		} else {
			routingTableBuilderNameFlagName = fmt.Sprintf("%v.routingTableBuilderName", cmdPrefix)
		}

		routingTableBuilderNameFlagValue, err := cmd.Flags().GetString(routingTableBuilderNameFlagName)
		if err != nil {
			return err, false
		}
		m.RoutingTableBuilderName = routingTableBuilderNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRoutingConfigSegmentPrunerTypesFlags(depth int, m *models.RoutingConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentPrunerTypesFlagName := fmt.Sprintf("%v.segmentPrunerTypes", cmdPrefix)
	if cmd.Flags().Changed(segmentPrunerTypesFlagName) {
		// warning: segmentPrunerTypes array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
