// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/schema"

	"github.com/spf13/cobra"
)

// makeOperationSchemaAddSchema1Cmd returns a cmd to handle operation addSchema1
func makeOperationSchemaAddSchema1Cmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "addSchema_1",
		Short: `Adds a new schema`,
		RunE:  runOperationSchemaAddSchema1,
	}

	if err := registerOperationSchemaAddSchema1ParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSchemaAddSchema1 uses cmd flags to call endpoint api
func runOperationSchemaAddSchema1(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := schema.NewAddSchema1Params()
	if err, _ := retrieveOperationSchemaAddSchema1BodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSchemaAddSchema1ForceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSchemaAddSchema1OverrideFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSchemaAddSchema1Result(appCli.Schema.AddSchema1(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSchemaAddSchema1ParamFlags registers all flags needed to fill params
func registerOperationSchemaAddSchema1ParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSchemaAddSchema1BodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSchemaAddSchema1ForceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSchemaAddSchema1OverrideParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSchemaAddSchema1BodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	bodyDescription := ``

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	var bodyFlagDefault string

	_ = cmd.PersistentFlags().String(bodyFlagName, bodyFlagDefault, bodyDescription)

	return nil
}
func registerOperationSchemaAddSchema1ForceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	forceDescription := `Whether to force overriding the schema if the schema exists`

	var forceFlagName string
	if cmdPrefix == "" {
		forceFlagName = "force"
	} else {
		forceFlagName = fmt.Sprintf("%v.force", cmdPrefix)
	}

	var forceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceFlagName, forceFlagDefault, forceDescription)

	return nil
}
func registerOperationSchemaAddSchema1OverrideParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	overrideDescription := `Whether to override the schema if the schema exists`

	var overrideFlagName string
	if cmdPrefix == "" {
		overrideFlagName = "override"
	} else {
		overrideFlagName = fmt.Sprintf("%v.override", cmdPrefix)
	}

	var overrideFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(overrideFlagName, overrideFlagDefault, overrideDescription)

	return nil
}

func retrieveOperationSchemaAddSchema1BodyFlag(m *schema.AddSchema1Params, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {

		var bodyFlagName string
		if cmdPrefix == "" {
			bodyFlagName = "body"
		} else {
			bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
		}

		bodyFlagValue, err := cmd.Flags().GetString(bodyFlagName)
		if err != nil {
			return err, false
		}
		m.Body = bodyFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSchemaAddSchema1ForceFlag(m *schema.AddSchema1Params, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("force") {

		var forceFlagName string
		if cmdPrefix == "" {
			forceFlagName = "force"
		} else {
			forceFlagName = fmt.Sprintf("%v.force", cmdPrefix)
		}

		forceFlagValue, err := cmd.Flags().GetBool(forceFlagName)
		if err != nil {
			return err, false
		}
		m.Force = &forceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSchemaAddSchema1OverrideFlag(m *schema.AddSchema1Params, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("override") {

		var overrideFlagName string
		if cmdPrefix == "" {
			overrideFlagName = "override"
		} else {
			overrideFlagName = fmt.Sprintf("%v.override", cmdPrefix)
		}

		overrideFlagValue, err := cmd.Flags().GetBool(overrideFlagName)
		if err != nil {
			return err, false
		}
		m.Override = &overrideFlagValue

	}
	return nil, retAdded
}

// parseOperationSchemaAddSchema1Result parses request result and return the string content
func parseOperationSchemaAddSchema1Result(resp0 *schema.AddSchema1OK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning addSchema1OK is not supported

		// Non schema case: warning addSchema1BadRequest is not supported

		// Non schema case: warning addSchema1Conflict is not supported

		// Non schema case: warning addSchema1InternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response addSchema1OK is not supported by go-swagger cli yet.

	return "", nil
}
