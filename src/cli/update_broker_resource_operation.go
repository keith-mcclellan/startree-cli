// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/instance"

	"github.com/spf13/cobra"
)

// makeOperationInstanceUpdateBrokerResourceCmd returns a cmd to handle operation updateBrokerResource
func makeOperationInstanceUpdateBrokerResourceCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "updateBrokerResource",
		Short: `Broker resource should be updated when a new broker instance is added, or the tags for an existing broker are changed. Updating broker resource requires reading all the table configs, which can be costly for large cluster. Consider updating broker resource for each table individually.`,
		RunE:  runOperationInstanceUpdateBrokerResource,
	}

	if err := registerOperationInstanceUpdateBrokerResourceParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationInstanceUpdateBrokerResource uses cmd flags to call endpoint api
func runOperationInstanceUpdateBrokerResource(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := instance.NewUpdateBrokerResourceParams()
	if err, _ := retrieveOperationInstanceUpdateBrokerResourceInstanceNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationInstanceUpdateBrokerResourceResult(appCli.Instance.UpdateBrokerResource(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationInstanceUpdateBrokerResourceParamFlags registers all flags needed to fill params
func registerOperationInstanceUpdateBrokerResourceParamFlags(cmd *cobra.Command) error {
	if err := registerOperationInstanceUpdateBrokerResourceInstanceNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationInstanceUpdateBrokerResourceInstanceNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	instanceNameDescription := `Required. Instance name`

	var instanceNameFlagName string
	if cmdPrefix == "" {
		instanceNameFlagName = "instanceName"
	} else {
		instanceNameFlagName = fmt.Sprintf("%v.instanceName", cmdPrefix)
	}

	var instanceNameFlagDefault string

	_ = cmd.PersistentFlags().String(instanceNameFlagName, instanceNameFlagDefault, instanceNameDescription)

	return nil
}

func retrieveOperationInstanceUpdateBrokerResourceInstanceNameFlag(m *instance.UpdateBrokerResourceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("instanceName") {

		var instanceNameFlagName string
		if cmdPrefix == "" {
			instanceNameFlagName = "instanceName"
		} else {
			instanceNameFlagName = fmt.Sprintf("%v.instanceName", cmdPrefix)
		}

		instanceNameFlagValue, err := cmd.Flags().GetString(instanceNameFlagName)
		if err != nil {
			return err, false
		}
		m.InstanceName = instanceNameFlagValue

	}
	return nil, retAdded
}

// parseOperationInstanceUpdateBrokerResourceResult parses request result and return the string content
func parseOperationInstanceUpdateBrokerResourceResult(resp0 *instance.UpdateBrokerResourceOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updateBrokerResourceOK is not supported

		// Non schema case: warning updateBrokerResourceBadRequest is not supported

		// Non schema case: warning updateBrokerResourceNotFound is not supported

		// Non schema case: warning updateBrokerResourceInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response updateBrokerResourceOK is not supported by go-swagger cli yet.

	return "", nil
}
