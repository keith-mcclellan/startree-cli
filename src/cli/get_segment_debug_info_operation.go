// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/cluster"

	"github.com/spf13/cobra"
)

// makeOperationClusterGetSegmentDebugInfoCmd returns a cmd to handle operation getSegmentDebugInfo
func makeOperationClusterGetSegmentDebugInfoCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getSegmentDebugInfo",
		Short: `Debug information for segment.`,
		RunE:  runOperationClusterGetSegmentDebugInfo,
	}

	if err := registerOperationClusterGetSegmentDebugInfoParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationClusterGetSegmentDebugInfo uses cmd flags to call endpoint api
func runOperationClusterGetSegmentDebugInfo(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := cluster.NewGetSegmentDebugInfoParams()
	if err, _ := retrieveOperationClusterGetSegmentDebugInfoSegmentNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationClusterGetSegmentDebugInfoTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationClusterGetSegmentDebugInfoResult(appCli.Cluster.GetSegmentDebugInfo(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationClusterGetSegmentDebugInfoParamFlags registers all flags needed to fill params
func registerOperationClusterGetSegmentDebugInfoParamFlags(cmd *cobra.Command) error {
	if err := registerOperationClusterGetSegmentDebugInfoSegmentNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationClusterGetSegmentDebugInfoTableNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationClusterGetSegmentDebugInfoSegmentNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	segmentNameDescription := `Required. Name of the segment`

	var segmentNameFlagName string
	if cmdPrefix == "" {
		segmentNameFlagName = "segmentName"
	} else {
		segmentNameFlagName = fmt.Sprintf("%v.segmentName", cmdPrefix)
	}

	var segmentNameFlagDefault string

	_ = cmd.PersistentFlags().String(segmentNameFlagName, segmentNameFlagDefault, segmentNameDescription)

	return nil
}
func registerOperationClusterGetSegmentDebugInfoTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Name of the table (with type)`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}

func retrieveOperationClusterGetSegmentDebugInfoSegmentNameFlag(m *cluster.GetSegmentDebugInfoParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("segmentName") {

		var segmentNameFlagName string
		if cmdPrefix == "" {
			segmentNameFlagName = "segmentName"
		} else {
			segmentNameFlagName = fmt.Sprintf("%v.segmentName", cmdPrefix)
		}

		segmentNameFlagValue, err := cmd.Flags().GetString(segmentNameFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentName = segmentNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationClusterGetSegmentDebugInfoTableNameFlag(m *cluster.GetSegmentDebugInfoParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}

// parseOperationClusterGetSegmentDebugInfoResult parses request result and return the string content
func parseOperationClusterGetSegmentDebugInfoResult(resp0 *cluster.GetSegmentDebugInfoOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning getSegmentDebugInfoOK is not supported

		// Non schema case: warning getSegmentDebugInfoNotFound is not supported

		// Non schema case: warning getSegmentDebugInfoInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response getSegmentDebugInfoOK is not supported by go-swagger cli yet.

	return "", nil
}
