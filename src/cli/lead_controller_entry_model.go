// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for LeadControllerEntry

// register flags to command
func registerModelLeadControllerEntryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLeadControllerEntryLeadControllerID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLeadControllerEntryTableNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLeadControllerEntryLeadControllerID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	leadControllerIdDescription := ``

	var leadControllerIdFlagName string
	if cmdPrefix == "" {
		leadControllerIdFlagName = "leadControllerId"
	} else {
		leadControllerIdFlagName = fmt.Sprintf("%v.leadControllerId", cmdPrefix)
	}

	var leadControllerIdFlagDefault string

	_ = cmd.PersistentFlags().String(leadControllerIdFlagName, leadControllerIdFlagDefault, leadControllerIdDescription)

	return nil
}

func registerLeadControllerEntryTableNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tableNames []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLeadControllerEntryFlags(depth int, m *models.LeadControllerEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, leadControllerIdAdded := retrieveLeadControllerEntryLeadControllerIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || leadControllerIdAdded

	err, tableNamesAdded := retrieveLeadControllerEntryTableNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableNamesAdded

	return nil, retAdded
}

func retrieveLeadControllerEntryLeadControllerIDFlags(depth int, m *models.LeadControllerEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	leadControllerIdFlagName := fmt.Sprintf("%v.leadControllerId", cmdPrefix)
	if cmd.Flags().Changed(leadControllerIdFlagName) {

		var leadControllerIdFlagName string
		if cmdPrefix == "" {
			leadControllerIdFlagName = "leadControllerId"
		} else {
			leadControllerIdFlagName = fmt.Sprintf("%v.leadControllerId", cmdPrefix)
		}

		leadControllerIdFlagValue, err := cmd.Flags().GetString(leadControllerIdFlagName)
		if err != nil {
			return err, false
		}
		m.LeadControllerID = leadControllerIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLeadControllerEntryTableNamesFlags(depth int, m *models.LeadControllerEntry, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableNamesFlagName := fmt.Sprintf("%v.tableNames", cmdPrefix)
	if cmd.Flags().Changed(tableNamesFlagName) {
		// warning: tableNames array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
