// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"startree.ai/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for SegmentConsumerInfo

// register flags to command
func registerModelSegmentConsumerInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSegmentConsumerInfoConsumerState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentConsumerInfoLastConsumedTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentConsumerInfoPartitionOffsetInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentConsumerInfoPartitionToOffsetMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentConsumerInfoSegmentName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSegmentConsumerInfoConsumerState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	consumerStateDescription := ``

	var consumerStateFlagName string
	if cmdPrefix == "" {
		consumerStateFlagName = "consumerState"
	} else {
		consumerStateFlagName = fmt.Sprintf("%v.consumerState", cmdPrefix)
	}

	var consumerStateFlagDefault string

	_ = cmd.PersistentFlags().String(consumerStateFlagName, consumerStateFlagDefault, consumerStateDescription)

	return nil
}

func registerSegmentConsumerInfoLastConsumedTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastConsumedTimestampDescription := ``

	var lastConsumedTimestampFlagName string
	if cmdPrefix == "" {
		lastConsumedTimestampFlagName = "lastConsumedTimestamp"
	} else {
		lastConsumedTimestampFlagName = fmt.Sprintf("%v.lastConsumedTimestamp", cmdPrefix)
	}

	var lastConsumedTimestampFlagDefault int64

	_ = cmd.PersistentFlags().Int64(lastConsumedTimestampFlagName, lastConsumedTimestampFlagDefault, lastConsumedTimestampDescription)

	return nil
}

func registerSegmentConsumerInfoPartitionOffsetInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var partitionOffsetInfoFlagName string
	if cmdPrefix == "" {
		partitionOffsetInfoFlagName = "partitionOffsetInfo"
	} else {
		partitionOffsetInfoFlagName = fmt.Sprintf("%v.partitionOffsetInfo", cmdPrefix)
	}

	if err := registerModelPartitionOffsetInfoFlags(depth+1, partitionOffsetInfoFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSegmentConsumerInfoPartitionToOffsetMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: partitionToOffsetMap map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerSegmentConsumerInfoSegmentName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentNameDescription := ``

	var segmentNameFlagName string
	if cmdPrefix == "" {
		segmentNameFlagName = "segmentName"
	} else {
		segmentNameFlagName = fmt.Sprintf("%v.segmentName", cmdPrefix)
	}

	var segmentNameFlagDefault string

	_ = cmd.PersistentFlags().String(segmentNameFlagName, segmentNameFlagDefault, segmentNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSegmentConsumerInfoFlags(depth int, m *models.SegmentConsumerInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, consumerStateAdded := retrieveSegmentConsumerInfoConsumerStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || consumerStateAdded

	err, lastConsumedTimestampAdded := retrieveSegmentConsumerInfoLastConsumedTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastConsumedTimestampAdded

	err, partitionOffsetInfoAdded := retrieveSegmentConsumerInfoPartitionOffsetInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || partitionOffsetInfoAdded

	err, partitionToOffsetMapAdded := retrieveSegmentConsumerInfoPartitionToOffsetMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || partitionToOffsetMapAdded

	err, segmentNameAdded := retrieveSegmentConsumerInfoSegmentNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentNameAdded

	return nil, retAdded
}

func retrieveSegmentConsumerInfoConsumerStateFlags(depth int, m *models.SegmentConsumerInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	consumerStateFlagName := fmt.Sprintf("%v.consumerState", cmdPrefix)
	if cmd.Flags().Changed(consumerStateFlagName) {

		var consumerStateFlagName string
		if cmdPrefix == "" {
			consumerStateFlagName = "consumerState"
		} else {
			consumerStateFlagName = fmt.Sprintf("%v.consumerState", cmdPrefix)
		}

		consumerStateFlagValue, err := cmd.Flags().GetString(consumerStateFlagName)
		if err != nil {
			return err, false
		}
		m.ConsumerState = consumerStateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentConsumerInfoLastConsumedTimestampFlags(depth int, m *models.SegmentConsumerInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastConsumedTimestampFlagName := fmt.Sprintf("%v.lastConsumedTimestamp", cmdPrefix)
	if cmd.Flags().Changed(lastConsumedTimestampFlagName) {

		var lastConsumedTimestampFlagName string
		if cmdPrefix == "" {
			lastConsumedTimestampFlagName = "lastConsumedTimestamp"
		} else {
			lastConsumedTimestampFlagName = fmt.Sprintf("%v.lastConsumedTimestamp", cmdPrefix)
		}

		lastConsumedTimestampFlagValue, err := cmd.Flags().GetInt64(lastConsumedTimestampFlagName)
		if err != nil {
			return err, false
		}
		m.LastConsumedTimestamp = lastConsumedTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentConsumerInfoPartitionOffsetInfoFlags(depth int, m *models.SegmentConsumerInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	partitionOffsetInfoFlagName := fmt.Sprintf("%v.partitionOffsetInfo", cmdPrefix)
	if cmd.Flags().Changed(partitionOffsetInfoFlagName) {
		// info: complex object partitionOffsetInfo PartitionOffsetInfo is retrieved outside this Changed() block
	}
	partitionOffsetInfoFlagValue := m.PartitionOffsetInfo
	if swag.IsZero(partitionOffsetInfoFlagValue) {
		partitionOffsetInfoFlagValue = &models.PartitionOffsetInfo{}
	}

	err, partitionOffsetInfoAdded := retrieveModelPartitionOffsetInfoFlags(depth+1, partitionOffsetInfoFlagValue, partitionOffsetInfoFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || partitionOffsetInfoAdded
	if partitionOffsetInfoAdded {
		m.PartitionOffsetInfo = partitionOffsetInfoFlagValue
	}

	return nil, retAdded
}

func retrieveSegmentConsumerInfoPartitionToOffsetMapFlags(depth int, m *models.SegmentConsumerInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	partitionToOffsetMapFlagName := fmt.Sprintf("%v.partitionToOffsetMap", cmdPrefix)
	if cmd.Flags().Changed(partitionToOffsetMapFlagName) {
		// warning: partitionToOffsetMap map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSegmentConsumerInfoSegmentNameFlags(depth int, m *models.SegmentConsumerInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentNameFlagName := fmt.Sprintf("%v.segmentName", cmdPrefix)
	if cmd.Flags().Changed(segmentNameFlagName) {

		var segmentNameFlagName string
		if cmdPrefix == "" {
			segmentNameFlagName = "segmentName"
		} else {
			segmentNameFlagName = fmt.Sprintf("%v.segmentName", cmdPrefix)
		}

		segmentNameFlagValue, err := cmd.Flags().GetString(segmentNameFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentName = segmentNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
