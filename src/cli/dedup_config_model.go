// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for DedupConfig

// register flags to command
func registerModelDedupConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDedupConfigDedupEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDedupConfigHashFunction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDedupConfigDedupEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dedupEnabledDescription := `Required. `

	var dedupEnabledFlagName string
	if cmdPrefix == "" {
		dedupEnabledFlagName = "dedupEnabled"
	} else {
		dedupEnabledFlagName = fmt.Sprintf("%v.dedupEnabled", cmdPrefix)
	}

	var dedupEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dedupEnabledFlagName, dedupEnabledFlagDefault, dedupEnabledDescription)

	return nil
}

func registerDedupConfigHashFunction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hashFunctionDescription := `Enum: ["NONE","MD5","MURMUR3"]. `

	var hashFunctionFlagName string
	if cmdPrefix == "" {
		hashFunctionFlagName = "hashFunction"
	} else {
		hashFunctionFlagName = fmt.Sprintf("%v.hashFunction", cmdPrefix)
	}

	var hashFunctionFlagDefault string

	_ = cmd.PersistentFlags().String(hashFunctionFlagName, hashFunctionFlagDefault, hashFunctionDescription)

	if err := cmd.RegisterFlagCompletionFunc(hashFunctionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["NONE","MD5","MURMUR3"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDedupConfigFlags(depth int, m *models.DedupConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dedupEnabledAdded := retrieveDedupConfigDedupEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dedupEnabledAdded

	err, hashFunctionAdded := retrieveDedupConfigHashFunctionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hashFunctionAdded

	return nil, retAdded
}

func retrieveDedupConfigDedupEnabledFlags(depth int, m *models.DedupConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dedupEnabledFlagName := fmt.Sprintf("%v.dedupEnabled", cmdPrefix)
	if cmd.Flags().Changed(dedupEnabledFlagName) {

		var dedupEnabledFlagName string
		if cmdPrefix == "" {
			dedupEnabledFlagName = "dedupEnabled"
		} else {
			dedupEnabledFlagName = fmt.Sprintf("%v.dedupEnabled", cmdPrefix)
		}

		dedupEnabledFlagValue, err := cmd.Flags().GetBool(dedupEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.DedupEnabled = dedupEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDedupConfigHashFunctionFlags(depth int, m *models.DedupConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hashFunctionFlagName := fmt.Sprintf("%v.hashFunction", cmdPrefix)
	if cmd.Flags().Changed(hashFunctionFlagName) {

		var hashFunctionFlagName string
		if cmdPrefix == "" {
			hashFunctionFlagName = "hashFunction"
		} else {
			hashFunctionFlagName = fmt.Sprintf("%v.hashFunction", cmdPrefix)
		}

		hashFunctionFlagValue, err := cmd.Flags().GetString(hashFunctionFlagName)
		if err != nil {
			return err, false
		}
		m.HashFunction = hashFunctionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
