// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for BatchIngestionConfig

// register flags to command
func registerModelBatchIngestionConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBatchIngestionConfigBatchConfigMaps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBatchIngestionConfigConsistentDataPush(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBatchIngestionConfigSegmentIngestionFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBatchIngestionConfigSegmentIngestionType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBatchIngestionConfigBatchConfigMaps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: batchConfigMaps []map[string]string array type is not supported by go-swagger cli yet

	return nil
}

func registerBatchIngestionConfigConsistentDataPush(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	consistentDataPushDescription := ``

	var consistentDataPushFlagName string
	if cmdPrefix == "" {
		consistentDataPushFlagName = "consistentDataPush"
	} else {
		consistentDataPushFlagName = fmt.Sprintf("%v.consistentDataPush", cmdPrefix)
	}

	var consistentDataPushFlagDefault bool

	_ = cmd.PersistentFlags().Bool(consistentDataPushFlagName, consistentDataPushFlagDefault, consistentDataPushDescription)

	return nil
}

func registerBatchIngestionConfigSegmentIngestionFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentIngestionFrequencyDescription := ``

	var segmentIngestionFrequencyFlagName string
	if cmdPrefix == "" {
		segmentIngestionFrequencyFlagName = "segmentIngestionFrequency"
	} else {
		segmentIngestionFrequencyFlagName = fmt.Sprintf("%v.segmentIngestionFrequency", cmdPrefix)
	}

	var segmentIngestionFrequencyFlagDefault string

	_ = cmd.PersistentFlags().String(segmentIngestionFrequencyFlagName, segmentIngestionFrequencyFlagDefault, segmentIngestionFrequencyDescription)

	return nil
}

func registerBatchIngestionConfigSegmentIngestionType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentIngestionTypeDescription := ``

	var segmentIngestionTypeFlagName string
	if cmdPrefix == "" {
		segmentIngestionTypeFlagName = "segmentIngestionType"
	} else {
		segmentIngestionTypeFlagName = fmt.Sprintf("%v.segmentIngestionType", cmdPrefix)
	}

	var segmentIngestionTypeFlagDefault string

	_ = cmd.PersistentFlags().String(segmentIngestionTypeFlagName, segmentIngestionTypeFlagDefault, segmentIngestionTypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBatchIngestionConfigFlags(depth int, m *models.BatchIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, batchConfigMapsAdded := retrieveBatchIngestionConfigBatchConfigMapsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || batchConfigMapsAdded

	err, consistentDataPushAdded := retrieveBatchIngestionConfigConsistentDataPushFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || consistentDataPushAdded

	err, segmentIngestionFrequencyAdded := retrieveBatchIngestionConfigSegmentIngestionFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentIngestionFrequencyAdded

	err, segmentIngestionTypeAdded := retrieveBatchIngestionConfigSegmentIngestionTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentIngestionTypeAdded

	return nil, retAdded
}

func retrieveBatchIngestionConfigBatchConfigMapsFlags(depth int, m *models.BatchIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	batchConfigMapsFlagName := fmt.Sprintf("%v.batchConfigMaps", cmdPrefix)
	if cmd.Flags().Changed(batchConfigMapsFlagName) {
		// warning: batchConfigMaps array type []map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveBatchIngestionConfigConsistentDataPushFlags(depth int, m *models.BatchIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	consistentDataPushFlagName := fmt.Sprintf("%v.consistentDataPush", cmdPrefix)
	if cmd.Flags().Changed(consistentDataPushFlagName) {

		var consistentDataPushFlagName string
		if cmdPrefix == "" {
			consistentDataPushFlagName = "consistentDataPush"
		} else {
			consistentDataPushFlagName = fmt.Sprintf("%v.consistentDataPush", cmdPrefix)
		}

		consistentDataPushFlagValue, err := cmd.Flags().GetBool(consistentDataPushFlagName)
		if err != nil {
			return err, false
		}
		m.ConsistentDataPush = consistentDataPushFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBatchIngestionConfigSegmentIngestionFrequencyFlags(depth int, m *models.BatchIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentIngestionFrequencyFlagName := fmt.Sprintf("%v.segmentIngestionFrequency", cmdPrefix)
	if cmd.Flags().Changed(segmentIngestionFrequencyFlagName) {

		var segmentIngestionFrequencyFlagName string
		if cmdPrefix == "" {
			segmentIngestionFrequencyFlagName = "segmentIngestionFrequency"
		} else {
			segmentIngestionFrequencyFlagName = fmt.Sprintf("%v.segmentIngestionFrequency", cmdPrefix)
		}

		segmentIngestionFrequencyFlagValue, err := cmd.Flags().GetString(segmentIngestionFrequencyFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentIngestionFrequency = segmentIngestionFrequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBatchIngestionConfigSegmentIngestionTypeFlags(depth int, m *models.BatchIngestionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentIngestionTypeFlagName := fmt.Sprintf("%v.segmentIngestionType", cmdPrefix)
	if cmd.Flags().Changed(segmentIngestionTypeFlagName) {

		var segmentIngestionTypeFlagName string
		if cmdPrefix == "" {
			segmentIngestionTypeFlagName = "segmentIngestionType"
		} else {
			segmentIngestionTypeFlagName = fmt.Sprintf("%v.segmentIngestionType", cmdPrefix)
		}

		segmentIngestionTypeFlagValue, err := cmd.Flags().GetString(segmentIngestionTypeFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentIngestionType = segmentIngestionTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
