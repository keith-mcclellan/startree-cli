// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for ColumnPartitionConfig

// register flags to command
func registerModelColumnPartitionConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerColumnPartitionConfigFunctionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerColumnPartitionConfigFunctionName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerColumnPartitionConfigNumPartitions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerColumnPartitionConfigFunctionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: functionConfig map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerColumnPartitionConfigFunctionName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	functionNameDescription := `Required. `

	var functionNameFlagName string
	if cmdPrefix == "" {
		functionNameFlagName = "functionName"
	} else {
		functionNameFlagName = fmt.Sprintf("%v.functionName", cmdPrefix)
	}

	var functionNameFlagDefault string

	_ = cmd.PersistentFlags().String(functionNameFlagName, functionNameFlagDefault, functionNameDescription)

	return nil
}

func registerColumnPartitionConfigNumPartitions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numPartitionsDescription := `Required. `

	var numPartitionsFlagName string
	if cmdPrefix == "" {
		numPartitionsFlagName = "numPartitions"
	} else {
		numPartitionsFlagName = fmt.Sprintf("%v.numPartitions", cmdPrefix)
	}

	var numPartitionsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(numPartitionsFlagName, numPartitionsFlagDefault, numPartitionsDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelColumnPartitionConfigFlags(depth int, m *models.ColumnPartitionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, functionConfigAdded := retrieveColumnPartitionConfigFunctionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || functionConfigAdded

	err, functionNameAdded := retrieveColumnPartitionConfigFunctionNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || functionNameAdded

	err, numPartitionsAdded := retrieveColumnPartitionConfigNumPartitionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numPartitionsAdded

	return nil, retAdded
}

func retrieveColumnPartitionConfigFunctionConfigFlags(depth int, m *models.ColumnPartitionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	functionConfigFlagName := fmt.Sprintf("%v.functionConfig", cmdPrefix)
	if cmd.Flags().Changed(functionConfigFlagName) {
		// warning: functionConfig map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveColumnPartitionConfigFunctionNameFlags(depth int, m *models.ColumnPartitionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	functionNameFlagName := fmt.Sprintf("%v.functionName", cmdPrefix)
	if cmd.Flags().Changed(functionNameFlagName) {

		var functionNameFlagName string
		if cmdPrefix == "" {
			functionNameFlagName = "functionName"
		} else {
			functionNameFlagName = fmt.Sprintf("%v.functionName", cmdPrefix)
		}

		functionNameFlagValue, err := cmd.Flags().GetString(functionNameFlagName)
		if err != nil {
			return err, false
		}
		m.FunctionName = functionNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveColumnPartitionConfigNumPartitionsFlags(depth int, m *models.ColumnPartitionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numPartitionsFlagName := fmt.Sprintf("%v.numPartitions", cmdPrefix)
	if cmd.Flags().Changed(numPartitionsFlagName) {

		var numPartitionsFlagName string
		if cmdPrefix == "" {
			numPartitionsFlagName = "numPartitions"
		} else {
			numPartitionsFlagName = fmt.Sprintf("%v.numPartitions", cmdPrefix)
		}

		numPartitionsFlagValue, err := cmd.Flags().GetInt32(numPartitionsFlagName)
		if err != nil {
			return err, false
		}
		m.NumPartitions = numPartitionsFlagValue

		retAdded = true
	}

	return nil, retAdded
}
