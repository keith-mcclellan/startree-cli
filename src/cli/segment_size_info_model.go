// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for SegmentSizeInfo

// register flags to command
func registerModelSegmentSizeInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSegmentSizeInfoDiskSizeInBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSegmentSizeInfoSegmentName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSegmentSizeInfoDiskSizeInBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	diskSizeInBytesDescription := ``

	var diskSizeInBytesFlagName string
	if cmdPrefix == "" {
		diskSizeInBytesFlagName = "diskSizeInBytes"
	} else {
		diskSizeInBytesFlagName = fmt.Sprintf("%v.diskSizeInBytes", cmdPrefix)
	}

	var diskSizeInBytesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(diskSizeInBytesFlagName, diskSizeInBytesFlagDefault, diskSizeInBytesDescription)

	return nil
}

func registerSegmentSizeInfoSegmentName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	segmentNameDescription := ``

	var segmentNameFlagName string
	if cmdPrefix == "" {
		segmentNameFlagName = "segmentName"
	} else {
		segmentNameFlagName = fmt.Sprintf("%v.segmentName", cmdPrefix)
	}

	var segmentNameFlagDefault string

	_ = cmd.PersistentFlags().String(segmentNameFlagName, segmentNameFlagDefault, segmentNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSegmentSizeInfoFlags(depth int, m *models.SegmentSizeInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, diskSizeInBytesAdded := retrieveSegmentSizeInfoDiskSizeInBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || diskSizeInBytesAdded

	err, segmentNameAdded := retrieveSegmentSizeInfoSegmentNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentNameAdded

	return nil, retAdded
}

func retrieveSegmentSizeInfoDiskSizeInBytesFlags(depth int, m *models.SegmentSizeInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	diskSizeInBytesFlagName := fmt.Sprintf("%v.diskSizeInBytes", cmdPrefix)
	if cmd.Flags().Changed(diskSizeInBytesFlagName) {

		var diskSizeInBytesFlagName string
		if cmdPrefix == "" {
			diskSizeInBytesFlagName = "diskSizeInBytes"
		} else {
			diskSizeInBytesFlagName = fmt.Sprintf("%v.diskSizeInBytes", cmdPrefix)
		}

		diskSizeInBytesFlagValue, err := cmd.Flags().GetInt64(diskSizeInBytesFlagName)
		if err != nil {
			return err, false
		}
		m.DiskSizeInBytes = diskSizeInBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSegmentSizeInfoSegmentNameFlags(depth int, m *models.SegmentSizeInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentNameFlagName := fmt.Sprintf("%v.segmentName", cmdPrefix)
	if cmd.Flags().Changed(segmentNameFlagName) {

		var segmentNameFlagName string
		if cmdPrefix == "" {
			segmentNameFlagName = "segmentName"
		} else {
			segmentNameFlagName = fmt.Sprintf("%v.segmentName", cmdPrefix)
		}

		segmentNameFlagValue, err := cmd.Flags().GetString(segmentNameFlagName)
		if err != nil {
			return err, false
		}
		m.SegmentName = segmentNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
