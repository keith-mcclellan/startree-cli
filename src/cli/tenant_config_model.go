// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"startree.ai/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for TenantConfig

// register flags to command
func registerModelTenantConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTenantConfigBroker(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTenantConfigServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTenantConfigTagOverrideConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTenantConfigBroker(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	brokerDescription := ``

	var brokerFlagName string
	if cmdPrefix == "" {
		brokerFlagName = "broker"
	} else {
		brokerFlagName = fmt.Sprintf("%v.broker", cmdPrefix)
	}

	var brokerFlagDefault string

	_ = cmd.PersistentFlags().String(brokerFlagName, brokerFlagDefault, brokerDescription)

	return nil
}

func registerTenantConfigServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverDescription := ``

	var serverFlagName string
	if cmdPrefix == "" {
		serverFlagName = "server"
	} else {
		serverFlagName = fmt.Sprintf("%v.server", cmdPrefix)
	}

	var serverFlagDefault string

	_ = cmd.PersistentFlags().String(serverFlagName, serverFlagDefault, serverDescription)

	return nil
}

func registerTenantConfigTagOverrideConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tagOverrideConfigFlagName string
	if cmdPrefix == "" {
		tagOverrideConfigFlagName = "tagOverrideConfig"
	} else {
		tagOverrideConfigFlagName = fmt.Sprintf("%v.tagOverrideConfig", cmdPrefix)
	}

	if err := registerModelTagOverrideConfigFlags(depth+1, tagOverrideConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTenantConfigFlags(depth int, m *models.TenantConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, brokerAdded := retrieveTenantConfigBrokerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || brokerAdded

	err, serverAdded := retrieveTenantConfigServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverAdded

	err, tagOverrideConfigAdded := retrieveTenantConfigTagOverrideConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagOverrideConfigAdded

	return nil, retAdded
}

func retrieveTenantConfigBrokerFlags(depth int, m *models.TenantConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	brokerFlagName := fmt.Sprintf("%v.broker", cmdPrefix)
	if cmd.Flags().Changed(brokerFlagName) {

		var brokerFlagName string
		if cmdPrefix == "" {
			brokerFlagName = "broker"
		} else {
			brokerFlagName = fmt.Sprintf("%v.broker", cmdPrefix)
		}

		brokerFlagValue, err := cmd.Flags().GetString(brokerFlagName)
		if err != nil {
			return err, false
		}
		m.Broker = brokerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTenantConfigServerFlags(depth int, m *models.TenantConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverFlagName := fmt.Sprintf("%v.server", cmdPrefix)
	if cmd.Flags().Changed(serverFlagName) {

		var serverFlagName string
		if cmdPrefix == "" {
			serverFlagName = "server"
		} else {
			serverFlagName = fmt.Sprintf("%v.server", cmdPrefix)
		}

		serverFlagValue, err := cmd.Flags().GetString(serverFlagName)
		if err != nil {
			return err, false
		}
		m.Server = serverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTenantConfigTagOverrideConfigFlags(depth int, m *models.TenantConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagOverrideConfigFlagName := fmt.Sprintf("%v.tagOverrideConfig", cmdPrefix)
	if cmd.Flags().Changed(tagOverrideConfigFlagName) {
		// info: complex object tagOverrideConfig TagOverrideConfig is retrieved outside this Changed() block
	}
	tagOverrideConfigFlagValue := m.TagOverrideConfig
	if swag.IsZero(tagOverrideConfigFlagValue) {
		tagOverrideConfigFlagValue = &models.TagOverrideConfig{}
	}

	err, tagOverrideConfigAdded := retrieveModelTagOverrideConfigFlags(depth+1, tagOverrideConfigFlagValue, tagOverrideConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagOverrideConfigAdded
	if tagOverrideConfigAdded {
		m.TagOverrideConfig = tagOverrideConfigFlagValue
	}

	return nil, retAdded
}
