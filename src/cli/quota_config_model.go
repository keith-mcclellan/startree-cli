// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for QuotaConfig

// register flags to command
func registerModelQuotaConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerQuotaConfigMaxQueriesPerSecond(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerQuotaConfigStorage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerQuotaConfigMaxQueriesPerSecond(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxQueriesPerSecondDescription := ``

	var maxQueriesPerSecondFlagName string
	if cmdPrefix == "" {
		maxQueriesPerSecondFlagName = "maxQueriesPerSecond"
	} else {
		maxQueriesPerSecondFlagName = fmt.Sprintf("%v.maxQueriesPerSecond", cmdPrefix)
	}

	var maxQueriesPerSecondFlagDefault string

	_ = cmd.PersistentFlags().String(maxQueriesPerSecondFlagName, maxQueriesPerSecondFlagDefault, maxQueriesPerSecondDescription)

	return nil
}

func registerQuotaConfigStorage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	storageDescription := ``

	var storageFlagName string
	if cmdPrefix == "" {
		storageFlagName = "storage"
	} else {
		storageFlagName = fmt.Sprintf("%v.storage", cmdPrefix)
	}

	var storageFlagDefault string

	_ = cmd.PersistentFlags().String(storageFlagName, storageFlagDefault, storageDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelQuotaConfigFlags(depth int, m *models.QuotaConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, maxQueriesPerSecondAdded := retrieveQuotaConfigMaxQueriesPerSecondFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxQueriesPerSecondAdded

	err, storageAdded := retrieveQuotaConfigStorageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storageAdded

	return nil, retAdded
}

func retrieveQuotaConfigMaxQueriesPerSecondFlags(depth int, m *models.QuotaConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxQueriesPerSecondFlagName := fmt.Sprintf("%v.maxQueriesPerSecond", cmdPrefix)
	if cmd.Flags().Changed(maxQueriesPerSecondFlagName) {

		var maxQueriesPerSecondFlagName string
		if cmdPrefix == "" {
			maxQueriesPerSecondFlagName = "maxQueriesPerSecond"
		} else {
			maxQueriesPerSecondFlagName = fmt.Sprintf("%v.maxQueriesPerSecond", cmdPrefix)
		}

		maxQueriesPerSecondFlagValue, err := cmd.Flags().GetString(maxQueriesPerSecondFlagName)
		if err != nil {
			return err, false
		}
		m.MaxQueriesPerSecond = maxQueriesPerSecondFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveQuotaConfigStorageFlags(depth int, m *models.QuotaConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	storageFlagName := fmt.Sprintf("%v.storage", cmdPrefix)
	if cmd.Flags().Changed(storageFlagName) {

		var storageFlagName string
		if cmdPrefix == "" {
			storageFlagName = "storage"
		} else {
			storageFlagName = fmt.Sprintf("%v.storage", cmdPrefix)
		}

		storageFlagValue, err := cmd.Flags().GetString(storageFlagName)
		if err != nil {
			return err, false
		}
		m.Storage = storageFlagValue

		retAdded = true
	}

	return nil, retAdded
}
