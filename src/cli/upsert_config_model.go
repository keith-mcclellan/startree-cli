// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for UpsertConfig

// register flags to command
func registerModelUpsertConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUpsertConfigComparisonColumn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpsertConfigDefaultPartialUpsertStrategy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpsertConfigEnableSnapshot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpsertConfigHashFunction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpsertConfigMetadataManagerClass(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpsertConfigMetadataManagerConfigs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpsertConfigMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpsertConfigPartialUpsertStrategies(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUpsertConfigComparisonColumn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	comparisonColumnDescription := ``

	var comparisonColumnFlagName string
	if cmdPrefix == "" {
		comparisonColumnFlagName = "comparisonColumn"
	} else {
		comparisonColumnFlagName = fmt.Sprintf("%v.comparisonColumn", cmdPrefix)
	}

	var comparisonColumnFlagDefault string

	_ = cmd.PersistentFlags().String(comparisonColumnFlagName, comparisonColumnFlagDefault, comparisonColumnDescription)

	return nil
}

func registerUpsertConfigDefaultPartialUpsertStrategy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultPartialUpsertStrategyDescription := `Enum: ["APPEND","IGNORE","INCREMENT","MAX","MIN","OVERWRITE","UNION"]. `

	var defaultPartialUpsertStrategyFlagName string
	if cmdPrefix == "" {
		defaultPartialUpsertStrategyFlagName = "defaultPartialUpsertStrategy"
	} else {
		defaultPartialUpsertStrategyFlagName = fmt.Sprintf("%v.defaultPartialUpsertStrategy", cmdPrefix)
	}

	var defaultPartialUpsertStrategyFlagDefault string

	_ = cmd.PersistentFlags().String(defaultPartialUpsertStrategyFlagName, defaultPartialUpsertStrategyFlagDefault, defaultPartialUpsertStrategyDescription)

	if err := cmd.RegisterFlagCompletionFunc(defaultPartialUpsertStrategyFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["APPEND","IGNORE","INCREMENT","MAX","MIN","OVERWRITE","UNION"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerUpsertConfigEnableSnapshot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enableSnapshotDescription := ``

	var enableSnapshotFlagName string
	if cmdPrefix == "" {
		enableSnapshotFlagName = "enableSnapshot"
	} else {
		enableSnapshotFlagName = fmt.Sprintf("%v.enableSnapshot", cmdPrefix)
	}

	var enableSnapshotFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableSnapshotFlagName, enableSnapshotFlagDefault, enableSnapshotDescription)

	return nil
}

func registerUpsertConfigHashFunction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hashFunctionDescription := `Enum: ["NONE","MD5","MURMUR3"]. `

	var hashFunctionFlagName string
	if cmdPrefix == "" {
		hashFunctionFlagName = "hashFunction"
	} else {
		hashFunctionFlagName = fmt.Sprintf("%v.hashFunction", cmdPrefix)
	}

	var hashFunctionFlagDefault string

	_ = cmd.PersistentFlags().String(hashFunctionFlagName, hashFunctionFlagDefault, hashFunctionDescription)

	if err := cmd.RegisterFlagCompletionFunc(hashFunctionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["NONE","MD5","MURMUR3"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerUpsertConfigMetadataManagerClass(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	metadataManagerClassDescription := ``

	var metadataManagerClassFlagName string
	if cmdPrefix == "" {
		metadataManagerClassFlagName = "metadataManagerClass"
	} else {
		metadataManagerClassFlagName = fmt.Sprintf("%v.metadataManagerClass", cmdPrefix)
	}

	var metadataManagerClassFlagDefault string

	_ = cmd.PersistentFlags().String(metadataManagerClassFlagName, metadataManagerClassFlagDefault, metadataManagerClassDescription)

	return nil
}

func registerUpsertConfigMetadataManagerConfigs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: metadataManagerConfigs map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerUpsertConfigMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `Enum: ["FULL","PARTIAL","NONE"]. Required. `

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	if err := cmd.RegisterFlagCompletionFunc(modeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["FULL","PARTIAL","NONE"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerUpsertConfigPartialUpsertStrategies(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: partialUpsertStrategies map[string]string map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUpsertConfigFlags(depth int, m *models.UpsertConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, comparisonColumnAdded := retrieveUpsertConfigComparisonColumnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || comparisonColumnAdded

	err, defaultPartialUpsertStrategyAdded := retrieveUpsertConfigDefaultPartialUpsertStrategyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultPartialUpsertStrategyAdded

	err, enableSnapshotAdded := retrieveUpsertConfigEnableSnapshotFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enableSnapshotAdded

	err, hashFunctionAdded := retrieveUpsertConfigHashFunctionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hashFunctionAdded

	err, metadataManagerClassAdded := retrieveUpsertConfigMetadataManagerClassFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataManagerClassAdded

	err, metadataManagerConfigsAdded := retrieveUpsertConfigMetadataManagerConfigsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataManagerConfigsAdded

	err, modeAdded := retrieveUpsertConfigModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, partialUpsertStrategiesAdded := retrieveUpsertConfigPartialUpsertStrategiesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || partialUpsertStrategiesAdded

	return nil, retAdded
}

func retrieveUpsertConfigComparisonColumnFlags(depth int, m *models.UpsertConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	comparisonColumnFlagName := fmt.Sprintf("%v.comparisonColumn", cmdPrefix)
	if cmd.Flags().Changed(comparisonColumnFlagName) {

		var comparisonColumnFlagName string
		if cmdPrefix == "" {
			comparisonColumnFlagName = "comparisonColumn"
		} else {
			comparisonColumnFlagName = fmt.Sprintf("%v.comparisonColumn", cmdPrefix)
		}

		comparisonColumnFlagValue, err := cmd.Flags().GetString(comparisonColumnFlagName)
		if err != nil {
			return err, false
		}
		m.ComparisonColumn = comparisonColumnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpsertConfigDefaultPartialUpsertStrategyFlags(depth int, m *models.UpsertConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultPartialUpsertStrategyFlagName := fmt.Sprintf("%v.defaultPartialUpsertStrategy", cmdPrefix)
	if cmd.Flags().Changed(defaultPartialUpsertStrategyFlagName) {

		var defaultPartialUpsertStrategyFlagName string
		if cmdPrefix == "" {
			defaultPartialUpsertStrategyFlagName = "defaultPartialUpsertStrategy"
		} else {
			defaultPartialUpsertStrategyFlagName = fmt.Sprintf("%v.defaultPartialUpsertStrategy", cmdPrefix)
		}

		defaultPartialUpsertStrategyFlagValue, err := cmd.Flags().GetString(defaultPartialUpsertStrategyFlagName)
		if err != nil {
			return err, false
		}
		m.DefaultPartialUpsertStrategy = defaultPartialUpsertStrategyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpsertConfigEnableSnapshotFlags(depth int, m *models.UpsertConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enableSnapshotFlagName := fmt.Sprintf("%v.enableSnapshot", cmdPrefix)
	if cmd.Flags().Changed(enableSnapshotFlagName) {

		var enableSnapshotFlagName string
		if cmdPrefix == "" {
			enableSnapshotFlagName = "enableSnapshot"
		} else {
			enableSnapshotFlagName = fmt.Sprintf("%v.enableSnapshot", cmdPrefix)
		}

		enableSnapshotFlagValue, err := cmd.Flags().GetBool(enableSnapshotFlagName)
		if err != nil {
			return err, false
		}
		m.EnableSnapshot = enableSnapshotFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpsertConfigHashFunctionFlags(depth int, m *models.UpsertConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hashFunctionFlagName := fmt.Sprintf("%v.hashFunction", cmdPrefix)
	if cmd.Flags().Changed(hashFunctionFlagName) {

		var hashFunctionFlagName string
		if cmdPrefix == "" {
			hashFunctionFlagName = "hashFunction"
		} else {
			hashFunctionFlagName = fmt.Sprintf("%v.hashFunction", cmdPrefix)
		}

		hashFunctionFlagValue, err := cmd.Flags().GetString(hashFunctionFlagName)
		if err != nil {
			return err, false
		}
		m.HashFunction = hashFunctionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpsertConfigMetadataManagerClassFlags(depth int, m *models.UpsertConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metadataManagerClassFlagName := fmt.Sprintf("%v.metadataManagerClass", cmdPrefix)
	if cmd.Flags().Changed(metadataManagerClassFlagName) {

		var metadataManagerClassFlagName string
		if cmdPrefix == "" {
			metadataManagerClassFlagName = "metadataManagerClass"
		} else {
			metadataManagerClassFlagName = fmt.Sprintf("%v.metadataManagerClass", cmdPrefix)
		}

		metadataManagerClassFlagValue, err := cmd.Flags().GetString(metadataManagerClassFlagName)
		if err != nil {
			return err, false
		}
		m.MetadataManagerClass = metadataManagerClassFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpsertConfigMetadataManagerConfigsFlags(depth int, m *models.UpsertConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metadataManagerConfigsFlagName := fmt.Sprintf("%v.metadataManagerConfigs", cmdPrefix)
	if cmd.Flags().Changed(metadataManagerConfigsFlagName) {
		// warning: metadataManagerConfigs map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveUpsertConfigModeFlags(depth int, m *models.UpsertConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpsertConfigPartialUpsertStrategiesFlags(depth int, m *models.UpsertConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	partialUpsertStrategiesFlagName := fmt.Sprintf("%v.partialUpsertStrategies", cmdPrefix)
	if cmd.Flags().Changed(partialUpsertStrategiesFlagName) {
		// warning: partialUpsertStrategies map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
