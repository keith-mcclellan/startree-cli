// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/task"

	"github.com/spf13/cobra"
)

// makeOperationTaskGetSubtaskOnWorkerProgressCmd returns a cmd to handle operation getSubtaskOnWorkerProgress
func makeOperationTaskGetSubtaskOnWorkerProgressCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getSubtaskOnWorkerProgress",
		Short: ``,
		RunE:  runOperationTaskGetSubtaskOnWorkerProgress,
	}

	if err := registerOperationTaskGetSubtaskOnWorkerProgressParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTaskGetSubtaskOnWorkerProgress uses cmd flags to call endpoint api
func runOperationTaskGetSubtaskOnWorkerProgress(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := task.NewGetSubtaskOnWorkerProgressParams()
	if err, _ := retrieveOperationTaskGetSubtaskOnWorkerProgressMinionWorkerIdsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTaskGetSubtaskOnWorkerProgressSubTaskStateFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTaskGetSubtaskOnWorkerProgressResult(appCli.Task.GetSubtaskOnWorkerProgress(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTaskGetSubtaskOnWorkerProgressParamFlags registers all flags needed to fill params
func registerOperationTaskGetSubtaskOnWorkerProgressParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTaskGetSubtaskOnWorkerProgressMinionWorkerIdsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTaskGetSubtaskOnWorkerProgressSubTaskStateParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTaskGetSubtaskOnWorkerProgressMinionWorkerIdsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	minionWorkerIdsDescription := `Minion worker IDs separated by comma`

	var minionWorkerIdsFlagName string
	if cmdPrefix == "" {
		minionWorkerIdsFlagName = "minionWorkerIds"
	} else {
		minionWorkerIdsFlagName = fmt.Sprintf("%v.minionWorkerIds", cmdPrefix)
	}

	var minionWorkerIdsFlagDefault string

	_ = cmd.PersistentFlags().String(minionWorkerIdsFlagName, minionWorkerIdsFlagDefault, minionWorkerIdsDescription)

	return nil
}
func registerOperationTaskGetSubtaskOnWorkerProgressSubTaskStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	subTaskStateDescription := `Required. Subtask state (UNKNOWN,IN_PROGRESS,SUCCEEDED,CANCELLED,ERROR)`

	var subTaskStateFlagName string
	if cmdPrefix == "" {
		subTaskStateFlagName = "subTaskState"
	} else {
		subTaskStateFlagName = fmt.Sprintf("%v.subTaskState", cmdPrefix)
	}

	var subTaskStateFlagDefault string

	_ = cmd.PersistentFlags().String(subTaskStateFlagName, subTaskStateFlagDefault, subTaskStateDescription)

	return nil
}

func retrieveOperationTaskGetSubtaskOnWorkerProgressMinionWorkerIdsFlag(m *task.GetSubtaskOnWorkerProgressParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("minionWorkerIds") {

		var minionWorkerIdsFlagName string
		if cmdPrefix == "" {
			minionWorkerIdsFlagName = "minionWorkerIds"
		} else {
			minionWorkerIdsFlagName = fmt.Sprintf("%v.minionWorkerIds", cmdPrefix)
		}

		minionWorkerIdsFlagValue, err := cmd.Flags().GetString(minionWorkerIdsFlagName)
		if err != nil {
			return err, false
		}
		m.MinionWorkerIds = &minionWorkerIdsFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTaskGetSubtaskOnWorkerProgressSubTaskStateFlag(m *task.GetSubtaskOnWorkerProgressParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("subTaskState") {

		var subTaskStateFlagName string
		if cmdPrefix == "" {
			subTaskStateFlagName = "subTaskState"
		} else {
			subTaskStateFlagName = fmt.Sprintf("%v.subTaskState", cmdPrefix)
		}

		subTaskStateFlagValue, err := cmd.Flags().GetString(subTaskStateFlagName)
		if err != nil {
			return err, false
		}
		m.SubTaskState = subTaskStateFlagValue

	}
	return nil, retAdded
}

// parseOperationTaskGetSubtaskOnWorkerProgressResult parses request result and return the string content
func parseOperationTaskGetSubtaskOnWorkerProgressResult(resp0 *task.GetSubtaskOnWorkerProgressOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning getSubtaskOnWorkerProgressOK is not supported

		// Non schema case: warning getSubtaskOnWorkerProgressInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response getSubtaskOnWorkerProgressOK is not supported by go-swagger cli yet.

	return "", nil
}
