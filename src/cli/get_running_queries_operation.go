// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/query"

	"github.com/spf13/cobra"
)

// makeOperationQueryGetRunningQueriesCmd returns a cmd to handle operation getRunningQueries
func makeOperationQueryGetRunningQueriesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getRunningQueries",
		Short: `The queries are returned with brokers running them`,
		RunE:  runOperationQueryGetRunningQueries,
	}

	if err := registerOperationQueryGetRunningQueriesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationQueryGetRunningQueries uses cmd flags to call endpoint api
func runOperationQueryGetRunningQueries(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := query.NewGetRunningQueriesParams()
	if err, _ := retrieveOperationQueryGetRunningQueriesTimeoutMsFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationQueryGetRunningQueriesResult(appCli.Query.GetRunningQueries(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationQueryGetRunningQueriesParamFlags registers all flags needed to fill params
func registerOperationQueryGetRunningQueriesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationQueryGetRunningQueriesTimeoutMsParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationQueryGetRunningQueriesTimeoutMsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	timeoutMsDescription := `Timeout for brokers to return running queries`

	var timeoutMsFlagName string
	if cmdPrefix == "" {
		timeoutMsFlagName = "timeoutMs"
	} else {
		timeoutMsFlagName = fmt.Sprintf("%v.timeoutMs", cmdPrefix)
	}

	var timeoutMsFlagDefault int32 = 3000

	_ = cmd.PersistentFlags().Int32(timeoutMsFlagName, timeoutMsFlagDefault, timeoutMsDescription)

	return nil
}

func retrieveOperationQueryGetRunningQueriesTimeoutMsFlag(m *query.GetRunningQueriesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("timeoutMs") {

		var timeoutMsFlagName string
		if cmdPrefix == "" {
			timeoutMsFlagName = "timeoutMs"
		} else {
			timeoutMsFlagName = fmt.Sprintf("%v.timeoutMs", cmdPrefix)
		}

		timeoutMsFlagValue, err := cmd.Flags().GetInt32(timeoutMsFlagName)
		if err != nil {
			return err, false
		}
		m.TimeoutMs = &timeoutMsFlagValue

	}
	return nil, retAdded
}

// parseOperationQueryGetRunningQueriesResult parses request result and return the string content
func parseOperationQueryGetRunningQueriesResult(resp0 *query.GetRunningQueriesOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning getRunningQueriesOK is not supported

		// Non schema case: warning getRunningQueriesInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response getRunningQueriesOK is not supported by go-swagger cli yet.

	return "", nil
}
