// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/segment"
	"startree.ai/cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSegmentUploadSegmentAsMultiPartCmd returns a cmd to handle operation uploadSegmentAsMultiPart
func makeOperationSegmentUploadSegmentAsMultiPartCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "uploadSegmentAsMultiPart",
		Short: `Upload a segment as binary`,
		RunE:  runOperationSegmentUploadSegmentAsMultiPart,
	}

	if err := registerOperationSegmentUploadSegmentAsMultiPartParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSegmentUploadSegmentAsMultiPart uses cmd flags to call endpoint api
func runOperationSegmentUploadSegmentAsMultiPart(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := segment.NewUploadSegmentAsMultiPartParams()
	if err, _ := retrieveOperationSegmentUploadSegmentAsMultiPartAllowRefreshFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentUploadSegmentAsMultiPartBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentUploadSegmentAsMultiPartEnableParallelPushProtectionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentUploadSegmentAsMultiPartTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSegmentUploadSegmentAsMultiPartTableTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSegmentUploadSegmentAsMultiPartResult(appCli.Segment.UploadSegmentAsMultiPart(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSegmentUploadSegmentAsMultiPartParamFlags registers all flags needed to fill params
func registerOperationSegmentUploadSegmentAsMultiPartParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSegmentUploadSegmentAsMultiPartAllowRefreshParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentUploadSegmentAsMultiPartBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentUploadSegmentAsMultiPartEnableParallelPushProtectionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentUploadSegmentAsMultiPartTableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSegmentUploadSegmentAsMultiPartTableTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSegmentUploadSegmentAsMultiPartAllowRefreshParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	allowRefreshDescription := `Whether to refresh if the segment already exists`

	var allowRefreshFlagName string
	if cmdPrefix == "" {
		allowRefreshFlagName = "allowRefresh"
	} else {
		allowRefreshFlagName = fmt.Sprintf("%v.allowRefresh", cmdPrefix)
	}

	var allowRefreshFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(allowRefreshFlagName, allowRefreshFlagDefault, allowRefreshDescription)

	return nil
}
func registerOperationSegmentUploadSegmentAsMultiPartBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. ")

	// add flags for body
	if err := registerModelFormDataMultiPartFlags(0, "formDataMultiPart", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationSegmentUploadSegmentAsMultiPartEnableParallelPushProtectionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	enableParallelPushProtectionDescription := `Whether to enable parallel push protection`

	var enableParallelPushProtectionFlagName string
	if cmdPrefix == "" {
		enableParallelPushProtectionFlagName = "enableParallelPushProtection"
	} else {
		enableParallelPushProtectionFlagName = fmt.Sprintf("%v.enableParallelPushProtection", cmdPrefix)
	}

	var enableParallelPushProtectionFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enableParallelPushProtectionFlagName, enableParallelPushProtectionFlagDefault, enableParallelPushProtectionDescription)

	return nil
}
func registerOperationSegmentUploadSegmentAsMultiPartTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Name of the table`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}
func registerOperationSegmentUploadSegmentAsMultiPartTableTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableTypeDescription := `Type of the table`

	var tableTypeFlagName string
	if cmdPrefix == "" {
		tableTypeFlagName = "tableType"
	} else {
		tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
	}

	var tableTypeFlagDefault string = "OFFLINE"

	_ = cmd.PersistentFlags().String(tableTypeFlagName, tableTypeFlagDefault, tableTypeDescription)

	return nil
}

func retrieveOperationSegmentUploadSegmentAsMultiPartAllowRefreshFlag(m *segment.UploadSegmentAsMultiPartParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("allowRefresh") {

		var allowRefreshFlagName string
		if cmdPrefix == "" {
			allowRefreshFlagName = "allowRefresh"
		} else {
			allowRefreshFlagName = fmt.Sprintf("%v.allowRefresh", cmdPrefix)
		}

		allowRefreshFlagValue, err := cmd.Flags().GetBool(allowRefreshFlagName)
		if err != nil {
			return err, false
		}
		m.AllowRefresh = &allowRefreshFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSegmentUploadSegmentAsMultiPartBodyFlag(m *segment.UploadSegmentAsMultiPartParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.FormDataMultiPart{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.FormDataMultiPart: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.FormDataMultiPart{}
	}
	err, added := retrieveModelFormDataMultiPartFlags(0, bodyValueModel, "formDataMultiPart", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationSegmentUploadSegmentAsMultiPartEnableParallelPushProtectionFlag(m *segment.UploadSegmentAsMultiPartParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("enableParallelPushProtection") {

		var enableParallelPushProtectionFlagName string
		if cmdPrefix == "" {
			enableParallelPushProtectionFlagName = "enableParallelPushProtection"
		} else {
			enableParallelPushProtectionFlagName = fmt.Sprintf("%v.enableParallelPushProtection", cmdPrefix)
		}

		enableParallelPushProtectionFlagValue, err := cmd.Flags().GetBool(enableParallelPushProtectionFlagName)
		if err != nil {
			return err, false
		}
		m.EnableParallelPushProtection = &enableParallelPushProtectionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSegmentUploadSegmentAsMultiPartTableNameFlag(m *segment.UploadSegmentAsMultiPartParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = &tableNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSegmentUploadSegmentAsMultiPartTableTypeFlag(m *segment.UploadSegmentAsMultiPartParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableType") {

		var tableTypeFlagName string
		if cmdPrefix == "" {
			tableTypeFlagName = "tableType"
		} else {
			tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
		}

		tableTypeFlagValue, err := cmd.Flags().GetString(tableTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TableType = &tableTypeFlagValue

	}
	return nil, retAdded
}

// parseOperationSegmentUploadSegmentAsMultiPartResult parses request result and return the string content
func parseOperationSegmentUploadSegmentAsMultiPartResult(resp0 *segment.UploadSegmentAsMultiPartOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning uploadSegmentAsMultiPartOK is not supported

		// Non schema case: warning uploadSegmentAsMultiPartBadRequest is not supported

		// Non schema case: warning uploadSegmentAsMultiPartForbidden is not supported

		// Non schema case: warning uploadSegmentAsMultiPartConflict is not supported

		// Non schema case: warning uploadSegmentAsMultiPartGone is not supported

		// Non schema case: warning uploadSegmentAsMultiPartPreconditionFailed is not supported

		// Non schema case: warning uploadSegmentAsMultiPartInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response uploadSegmentAsMultiPartOK is not supported by go-swagger cli yet.

	return "", nil
}
