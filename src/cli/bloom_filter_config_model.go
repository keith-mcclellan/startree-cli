// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for BloomFilterConfig

// register flags to command
func registerModelBloomFilterConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBloomFilterConfigFpp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBloomFilterConfigLoadOnHeap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBloomFilterConfigMaxSizeInBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBloomFilterConfigFpp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fppDescription := ``

	var fppFlagName string
	if cmdPrefix == "" {
		fppFlagName = "fpp"
	} else {
		fppFlagName = fmt.Sprintf("%v.fpp", cmdPrefix)
	}

	var fppFlagDefault float64

	_ = cmd.PersistentFlags().Float64(fppFlagName, fppFlagDefault, fppDescription)

	return nil
}

func registerBloomFilterConfigLoadOnHeap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	loadOnHeapDescription := ``

	var loadOnHeapFlagName string
	if cmdPrefix == "" {
		loadOnHeapFlagName = "loadOnHeap"
	} else {
		loadOnHeapFlagName = fmt.Sprintf("%v.loadOnHeap", cmdPrefix)
	}

	var loadOnHeapFlagDefault bool

	_ = cmd.PersistentFlags().Bool(loadOnHeapFlagName, loadOnHeapFlagDefault, loadOnHeapDescription)

	return nil
}

func registerBloomFilterConfigMaxSizeInBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxSizeInBytesDescription := ``

	var maxSizeInBytesFlagName string
	if cmdPrefix == "" {
		maxSizeInBytesFlagName = "maxSizeInBytes"
	} else {
		maxSizeInBytesFlagName = fmt.Sprintf("%v.maxSizeInBytes", cmdPrefix)
	}

	var maxSizeInBytesFlagDefault int32

	_ = cmd.PersistentFlags().Int32(maxSizeInBytesFlagName, maxSizeInBytesFlagDefault, maxSizeInBytesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBloomFilterConfigFlags(depth int, m *models.BloomFilterConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, fppAdded := retrieveBloomFilterConfigFppFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fppAdded

	err, loadOnHeapAdded := retrieveBloomFilterConfigLoadOnHeapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || loadOnHeapAdded

	err, maxSizeInBytesAdded := retrieveBloomFilterConfigMaxSizeInBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxSizeInBytesAdded

	return nil, retAdded
}

func retrieveBloomFilterConfigFppFlags(depth int, m *models.BloomFilterConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fppFlagName := fmt.Sprintf("%v.fpp", cmdPrefix)
	if cmd.Flags().Changed(fppFlagName) {

		var fppFlagName string
		if cmdPrefix == "" {
			fppFlagName = "fpp"
		} else {
			fppFlagName = fmt.Sprintf("%v.fpp", cmdPrefix)
		}

		fppFlagValue, err := cmd.Flags().GetFloat64(fppFlagName)
		if err != nil {
			return err, false
		}
		m.Fpp = fppFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBloomFilterConfigLoadOnHeapFlags(depth int, m *models.BloomFilterConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	loadOnHeapFlagName := fmt.Sprintf("%v.loadOnHeap", cmdPrefix)
	if cmd.Flags().Changed(loadOnHeapFlagName) {

		var loadOnHeapFlagName string
		if cmdPrefix == "" {
			loadOnHeapFlagName = "loadOnHeap"
		} else {
			loadOnHeapFlagName = fmt.Sprintf("%v.loadOnHeap", cmdPrefix)
		}

		loadOnHeapFlagValue, err := cmd.Flags().GetBool(loadOnHeapFlagName)
		if err != nil {
			return err, false
		}
		m.LoadOnHeap = &loadOnHeapFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBloomFilterConfigMaxSizeInBytesFlags(depth int, m *models.BloomFilterConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxSizeInBytesFlagName := fmt.Sprintf("%v.maxSizeInBytes", cmdPrefix)
	if cmd.Flags().Changed(maxSizeInBytesFlagName) {

		var maxSizeInBytesFlagName string
		if cmdPrefix == "" {
			maxSizeInBytesFlagName = "maxSizeInBytes"
		} else {
			maxSizeInBytesFlagName = fmt.Sprintf("%v.maxSizeInBytes", cmdPrefix)
		}

		maxSizeInBytesFlagValue, err := cmd.Flags().GetInt32(maxSizeInBytesFlagName)
		if err != nil {
			return err, false
		}
		m.MaxSizeInBytes = maxSizeInBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}
