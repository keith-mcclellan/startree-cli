// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/table"

	"github.com/spf13/cobra"
)

// makeOperationTableGetTableInstancesCmd returns a cmd to handle operation getTableInstances
func makeOperationTableGetTableInstancesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getTableInstances",
		Short: `List instances of the given table`,
		RunE:  runOperationTableGetTableInstances,
	}

	if err := registerOperationTableGetTableInstancesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTableGetTableInstances uses cmd flags to call endpoint api
func runOperationTableGetTableInstances(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := table.NewGetTableInstancesParams()
	if err, _ := retrieveOperationTableGetTableInstancesTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableGetTableInstancesTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTableGetTableInstancesResult(appCli.Table.GetTableInstances(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTableGetTableInstancesParamFlags registers all flags needed to fill params
func registerOperationTableGetTableInstancesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTableGetTableInstancesTableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableGetTableInstancesTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTableGetTableInstancesTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Table name without type`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}
func registerOperationTableGetTableInstancesTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `Enum: ["BROKER","SERVER"]. Instance type`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["BROKER","SERVER"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func retrieveOperationTableGetTableInstancesTableNameFlag(m *table.GetTableInstancesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableGetTableInstancesTypeFlag(m *table.GetTableInstancesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

	}
	return nil, retAdded
}

// parseOperationTableGetTableInstancesResult parses request result and return the string content
func parseOperationTableGetTableInstancesResult(resp0 *table.GetTableInstancesOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning getTableInstancesOK is not supported

		// Non schema case: warning getTableInstancesNotFound is not supported

		// Non schema case: warning getTableInstancesInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response getTableInstancesOK is not supported by go-swagger cli yet.

	return "", nil
}
