// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for InstanceTagPoolConfig

// register flags to command
func registerModelInstanceTagPoolConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInstanceTagPoolConfigNumPools(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceTagPoolConfigPoolBased(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceTagPoolConfigPools(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceTagPoolConfigTag(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInstanceTagPoolConfigNumPools(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numPoolsDescription := ``

	var numPoolsFlagName string
	if cmdPrefix == "" {
		numPoolsFlagName = "numPools"
	} else {
		numPoolsFlagName = fmt.Sprintf("%v.numPools", cmdPrefix)
	}

	var numPoolsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(numPoolsFlagName, numPoolsFlagDefault, numPoolsDescription)

	return nil
}

func registerInstanceTagPoolConfigPoolBased(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poolBasedDescription := ``

	var poolBasedFlagName string
	if cmdPrefix == "" {
		poolBasedFlagName = "poolBased"
	} else {
		poolBasedFlagName = fmt.Sprintf("%v.poolBased", cmdPrefix)
	}

	var poolBasedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(poolBasedFlagName, poolBasedFlagDefault, poolBasedDescription)

	return nil
}

func registerInstanceTagPoolConfigPools(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: pools []int32 array type is not supported by go-swagger cli yet

	return nil
}

func registerInstanceTagPoolConfigTag(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tagDescription := `Required. `

	var tagFlagName string
	if cmdPrefix == "" {
		tagFlagName = "tag"
	} else {
		tagFlagName = fmt.Sprintf("%v.tag", cmdPrefix)
	}

	var tagFlagDefault string

	_ = cmd.PersistentFlags().String(tagFlagName, tagFlagDefault, tagDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInstanceTagPoolConfigFlags(depth int, m *models.InstanceTagPoolConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, numPoolsAdded := retrieveInstanceTagPoolConfigNumPoolsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numPoolsAdded

	err, poolBasedAdded := retrieveInstanceTagPoolConfigPoolBasedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poolBasedAdded

	err, poolsAdded := retrieveInstanceTagPoolConfigPoolsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poolsAdded

	err, tagAdded := retrieveInstanceTagPoolConfigTagFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagAdded

	return nil, retAdded
}

func retrieveInstanceTagPoolConfigNumPoolsFlags(depth int, m *models.InstanceTagPoolConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numPoolsFlagName := fmt.Sprintf("%v.numPools", cmdPrefix)
	if cmd.Flags().Changed(numPoolsFlagName) {

		var numPoolsFlagName string
		if cmdPrefix == "" {
			numPoolsFlagName = "numPools"
		} else {
			numPoolsFlagName = fmt.Sprintf("%v.numPools", cmdPrefix)
		}

		numPoolsFlagValue, err := cmd.Flags().GetInt32(numPoolsFlagName)
		if err != nil {
			return err, false
		}
		m.NumPools = numPoolsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceTagPoolConfigPoolBasedFlags(depth int, m *models.InstanceTagPoolConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poolBasedFlagName := fmt.Sprintf("%v.poolBased", cmdPrefix)
	if cmd.Flags().Changed(poolBasedFlagName) {

		var poolBasedFlagName string
		if cmdPrefix == "" {
			poolBasedFlagName = "poolBased"
		} else {
			poolBasedFlagName = fmt.Sprintf("%v.poolBased", cmdPrefix)
		}

		poolBasedFlagValue, err := cmd.Flags().GetBool(poolBasedFlagName)
		if err != nil {
			return err, false
		}
		m.PoolBased = &poolBasedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceTagPoolConfigPoolsFlags(depth int, m *models.InstanceTagPoolConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poolsFlagName := fmt.Sprintf("%v.pools", cmdPrefix)
	if cmd.Flags().Changed(poolsFlagName) {
		// warning: pools array type []int32 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveInstanceTagPoolConfigTagFlags(depth int, m *models.InstanceTagPoolConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagFlagName := fmt.Sprintf("%v.tag", cmdPrefix)
	if cmd.Flags().Changed(tagFlagName) {

		var tagFlagName string
		if cmdPrefix == "" {
			tagFlagName = "tag"
		} else {
			tagFlagName = fmt.Sprintf("%v.tag", cmdPrefix)
		}

		tagFlagValue, err := cmd.Flags().GetString(tagFlagName)
		if err != nil {
			return err, false
		}
		m.Tag = tagFlagValue

		retAdded = true
	}

	return nil, retAdded
}
