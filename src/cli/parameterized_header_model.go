// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for ParameterizedHeader

// register flags to command
func registerModelParameterizedHeaderFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerParameterizedHeaderParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerParameterizedHeaderValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerParameterizedHeaderParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: parameters map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerParameterizedHeaderValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	valueDescription := ``

	var valueFlagName string
	if cmdPrefix == "" {
		valueFlagName = "value"
	} else {
		valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
	}

	var valueFlagDefault string

	_ = cmd.PersistentFlags().String(valueFlagName, valueFlagDefault, valueDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelParameterizedHeaderFlags(depth int, m *models.ParameterizedHeader, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, parametersAdded := retrieveParameterizedHeaderParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parametersAdded

	err, valueAdded := retrieveParameterizedHeaderValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valueAdded

	return nil, retAdded
}

func retrieveParameterizedHeaderParametersFlags(depth int, m *models.ParameterizedHeader, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parametersFlagName := fmt.Sprintf("%v.parameters", cmdPrefix)
	if cmd.Flags().Changed(parametersFlagName) {
		// warning: parameters map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveParameterizedHeaderValueFlags(depth int, m *models.ParameterizedHeader, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valueFlagName := fmt.Sprintf("%v.value", cmdPrefix)
	if cmd.Flags().Changed(valueFlagName) {

		var valueFlagName string
		if cmdPrefix == "" {
			valueFlagName = "value"
		} else {
			valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
		}

		valueFlagValue, err := cmd.Flags().GetString(valueFlagName)
		if err != nil {
			return err, false
		}
		m.Value = valueFlagValue

		retAdded = true
	}

	return nil, retAdded
}
