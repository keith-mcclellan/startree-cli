// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/cluster"

	"github.com/spf13/cobra"
)

// makeOperationClusterDeleteClusterConfigCmd returns a cmd to handle operation deleteClusterConfig
func makeOperationClusterDeleteClusterConfigCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "deleteClusterConfig",
		Short: ``,
		RunE:  runOperationClusterDeleteClusterConfig,
	}

	if err := registerOperationClusterDeleteClusterConfigParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationClusterDeleteClusterConfig uses cmd flags to call endpoint api
func runOperationClusterDeleteClusterConfig(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := cluster.NewDeleteClusterConfigParams()
	if err, _ := retrieveOperationClusterDeleteClusterConfigConfigNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationClusterDeleteClusterConfigResult(appCli.Cluster.DeleteClusterConfig(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationClusterDeleteClusterConfigParamFlags registers all flags needed to fill params
func registerOperationClusterDeleteClusterConfigParamFlags(cmd *cobra.Command) error {
	if err := registerOperationClusterDeleteClusterConfigConfigNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationClusterDeleteClusterConfigConfigNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	configNameDescription := `Required. Name of the config to delete`

	var configNameFlagName string
	if cmdPrefix == "" {
		configNameFlagName = "configName"
	} else {
		configNameFlagName = fmt.Sprintf("%v.configName", cmdPrefix)
	}

	var configNameFlagDefault string

	_ = cmd.PersistentFlags().String(configNameFlagName, configNameFlagDefault, configNameDescription)

	return nil
}

func retrieveOperationClusterDeleteClusterConfigConfigNameFlag(m *cluster.DeleteClusterConfigParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("configName") {

		var configNameFlagName string
		if cmdPrefix == "" {
			configNameFlagName = "configName"
		} else {
			configNameFlagName = fmt.Sprintf("%v.configName", cmdPrefix)
		}

		configNameFlagValue, err := cmd.Flags().GetString(configNameFlagName)
		if err != nil {
			return err, false
		}
		m.ConfigName = configNameFlagValue

	}
	return nil, retAdded
}

// parseOperationClusterDeleteClusterConfigResult parses request result and return the string content
func parseOperationClusterDeleteClusterConfigResult(resp0 *cluster.DeleteClusterConfigOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning deleteClusterConfigOK is not supported

		// Non schema case: warning deleteClusterConfigInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response deleteClusterConfigOK is not supported by go-swagger cli yet.

	return "", nil
}
