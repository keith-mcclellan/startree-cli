// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/table"

	"github.com/spf13/cobra"
)

// makeOperationTableIngestFromURICmd returns a cmd to handle operation ingestFromUri
func makeOperationTableIngestFromURICmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "ingestFromURI",
		Short: `Creates a segment using file at the given URI and pushes it to Pinot. 
 All steps happen on the controller. This API is NOT meant for production environments/large input files. 
Example usage (query params need encoding):
` + "`" + `` + "`" + `` + "`" + `
curl -X POST "http://localhost:9000/ingestFromURI?tableNameWithType=foo_OFFLINE
&batchConfigMapStr={
  "inputFormat":"json",
  "input.fs.className":"org.apache.pinot.plugin.filesystem.S3PinotFS",
  "input.fs.prop.region":"us-central",
  "input.fs.prop.accessKey":"foo",
  "input.fs.prop.secretKey":"bar"
}
&sourceURIStr=s3://test.bucket/path/to/json/data/data.json"
` + "`" + `` + "`" + `` + "`" + ``,
		RunE: runOperationTableIngestFromURI,
	}

	if err := registerOperationTableIngestFromURIParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTableIngestFromURI uses cmd flags to call endpoint api
func runOperationTableIngestFromURI(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := table.NewIngestFromURIParams()
	if err, _ := retrieveOperationTableIngestFromURIBatchConfigMapStrFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableIngestFromURISourceURIStrFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableIngestFromURITableNameWithTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTableIngestFromURIResult(appCli.Table.IngestFromURI(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTableIngestFromURIParamFlags registers all flags needed to fill params
func registerOperationTableIngestFromURIParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTableIngestFromURIBatchConfigMapStrParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableIngestFromURISourceURIStrParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableIngestFromURITableNameWithTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTableIngestFromURIBatchConfigMapStrParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	batchConfigMapStrDescription := `Required. Batch config Map as json string. Must pass inputFormat, and optionally input FS properties. e.g. {"inputFormat":"json"}`

	var batchConfigMapStrFlagName string
	if cmdPrefix == "" {
		batchConfigMapStrFlagName = "batchConfigMapStr"
	} else {
		batchConfigMapStrFlagName = fmt.Sprintf("%v.batchConfigMapStr", cmdPrefix)
	}

	var batchConfigMapStrFlagDefault string

	_ = cmd.PersistentFlags().String(batchConfigMapStrFlagName, batchConfigMapStrFlagDefault, batchConfigMapStrDescription)

	return nil
}
func registerOperationTableIngestFromURISourceURIStrParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sourceUriStrDescription := `Required. URI of file to upload`

	var sourceUriStrFlagName string
	if cmdPrefix == "" {
		sourceUriStrFlagName = "sourceURIStr"
	} else {
		sourceUriStrFlagName = fmt.Sprintf("%v.sourceURIStr", cmdPrefix)
	}

	var sourceUriStrFlagDefault string

	_ = cmd.PersistentFlags().String(sourceUriStrFlagName, sourceUriStrFlagDefault, sourceUriStrDescription)

	return nil
}
func registerOperationTableIngestFromURITableNameWithTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameWithTypeDescription := `Required. Name of the table to upload the file to`

	var tableNameWithTypeFlagName string
	if cmdPrefix == "" {
		tableNameWithTypeFlagName = "tableNameWithType"
	} else {
		tableNameWithTypeFlagName = fmt.Sprintf("%v.tableNameWithType", cmdPrefix)
	}

	var tableNameWithTypeFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameWithTypeFlagName, tableNameWithTypeFlagDefault, tableNameWithTypeDescription)

	return nil
}

func retrieveOperationTableIngestFromURIBatchConfigMapStrFlag(m *table.IngestFromURIParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("batchConfigMapStr") {

		var batchConfigMapStrFlagName string
		if cmdPrefix == "" {
			batchConfigMapStrFlagName = "batchConfigMapStr"
		} else {
			batchConfigMapStrFlagName = fmt.Sprintf("%v.batchConfigMapStr", cmdPrefix)
		}

		batchConfigMapStrFlagValue, err := cmd.Flags().GetString(batchConfigMapStrFlagName)
		if err != nil {
			return err, false
		}
		m.BatchConfigMapStr = batchConfigMapStrFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableIngestFromURISourceURIStrFlag(m *table.IngestFromURIParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sourceURIStr") {

		var sourceUriStrFlagName string
		if cmdPrefix == "" {
			sourceUriStrFlagName = "sourceURIStr"
		} else {
			sourceUriStrFlagName = fmt.Sprintf("%v.sourceURIStr", cmdPrefix)
		}

		sourceUriStrFlagValue, err := cmd.Flags().GetString(sourceUriStrFlagName)
		if err != nil {
			return err, false
		}
		m.SourceURIStr = sourceUriStrFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableIngestFromURITableNameWithTypeFlag(m *table.IngestFromURIParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableNameWithType") {

		var tableNameWithTypeFlagName string
		if cmdPrefix == "" {
			tableNameWithTypeFlagName = "tableNameWithType"
		} else {
			tableNameWithTypeFlagName = fmt.Sprintf("%v.tableNameWithType", cmdPrefix)
		}

		tableNameWithTypeFlagValue, err := cmd.Flags().GetString(tableNameWithTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TableNameWithType = tableNameWithTypeFlagValue

	}
	return nil, retAdded
}

// parseOperationTableIngestFromURIResult parses request result and return the string content
func parseOperationTableIngestFromURIResult(respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning ingestFromURI default is not supported

		return "", respErr
	}
	return "", nil
}
