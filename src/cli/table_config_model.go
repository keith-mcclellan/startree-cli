// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"startree.ai/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for TableConfig

// register flags to command
func registerModelTableConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableConfigDedupConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigDimensionTableConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigFieldConfigList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigIngestionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigInstanceAssignmentConfigMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigInstancePartitionsMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigIsDimTable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigQuery(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigQuota(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigRouting(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigSegmentAssignmentConfigMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigSegmentsConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigTableIndexConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigTableName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigTableType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigTask(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigTenants(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigTierConfigs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigTunerConfigs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableConfigUpsertConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigDedupConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dedupConfigFlagName string
	if cmdPrefix == "" {
		dedupConfigFlagName = "dedupConfig"
	} else {
		dedupConfigFlagName = fmt.Sprintf("%v.dedupConfig", cmdPrefix)
	}

	if err := registerModelDedupConfigFlags(depth+1, dedupConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigDimensionTableConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dimensionTableConfigFlagName string
	if cmdPrefix == "" {
		dimensionTableConfigFlagName = "dimensionTableConfig"
	} else {
		dimensionTableConfigFlagName = fmt.Sprintf("%v.dimensionTableConfig", cmdPrefix)
	}

	if err := registerModelDimensionTableConfigFlags(depth+1, dimensionTableConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigFieldConfigList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: fieldConfigList []*FieldConfig array type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigIngestionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ingestionConfigFlagName string
	if cmdPrefix == "" {
		ingestionConfigFlagName = "ingestionConfig"
	} else {
		ingestionConfigFlagName = fmt.Sprintf("%v.ingestionConfig", cmdPrefix)
	}

	if err := registerModelIngestionConfigFlags(depth+1, ingestionConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigInstanceAssignmentConfigMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: instanceAssignmentConfigMap map[string]InstanceAssignmentConfig map type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigInstancePartitionsMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: instancePartitionsMap map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigIsDimTable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isDimTableDescription := ``

	var isDimTableFlagName string
	if cmdPrefix == "" {
		isDimTableFlagName = "isDimTable"
	} else {
		isDimTableFlagName = fmt.Sprintf("%v.isDimTable", cmdPrefix)
	}

	var isDimTableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isDimTableFlagName, isDimTableFlagDefault, isDimTableDescription)

	return nil
}

func registerTableConfigMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var metadataFlagName string
	if cmdPrefix == "" {
		metadataFlagName = "metadata"
	} else {
		metadataFlagName = fmt.Sprintf("%v.metadata", cmdPrefix)
	}

	if err := registerModelTableCustomConfigFlags(depth+1, metadataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigQuery(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var queryFlagName string
	if cmdPrefix == "" {
		queryFlagName = "query"
	} else {
		queryFlagName = fmt.Sprintf("%v.query", cmdPrefix)
	}

	if err := registerModelQueryConfigFlags(depth+1, queryFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigQuota(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var quotaFlagName string
	if cmdPrefix == "" {
		quotaFlagName = "quota"
	} else {
		quotaFlagName = fmt.Sprintf("%v.quota", cmdPrefix)
	}

	if err := registerModelQuotaConfigFlags(depth+1, quotaFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigRouting(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var routingFlagName string
	if cmdPrefix == "" {
		routingFlagName = "routing"
	} else {
		routingFlagName = fmt.Sprintf("%v.routing", cmdPrefix)
	}

	if err := registerModelRoutingConfigFlags(depth+1, routingFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigSegmentAssignmentConfigMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: segmentAssignmentConfigMap map[string]SegmentAssignmentConfig map type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigSegmentsConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var segmentsConfigFlagName string
	if cmdPrefix == "" {
		segmentsConfigFlagName = "segmentsConfig"
	} else {
		segmentsConfigFlagName = fmt.Sprintf("%v.segmentsConfig", cmdPrefix)
	}

	if err := registerModelSegmentsValidationAndRetentionConfigFlags(depth+1, segmentsConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigTableIndexConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tableIndexConfigFlagName string
	if cmdPrefix == "" {
		tableIndexConfigFlagName = "tableIndexConfig"
	} else {
		tableIndexConfigFlagName = fmt.Sprintf("%v.tableIndexConfig", cmdPrefix)
	}

	if err := registerModelIndexingConfigFlags(depth+1, tableIndexConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigTableName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tableNameDescription := ``

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}

func registerTableConfigTableType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tableTypeDescription := `Enum: ["OFFLINE","REALTIME"]. `

	var tableTypeFlagName string
	if cmdPrefix == "" {
		tableTypeFlagName = "tableType"
	} else {
		tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
	}

	var tableTypeFlagDefault string

	_ = cmd.PersistentFlags().String(tableTypeFlagName, tableTypeFlagDefault, tableTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(tableTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["OFFLINE","REALTIME"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTableConfigTask(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var taskFlagName string
	if cmdPrefix == "" {
		taskFlagName = "task"
	} else {
		taskFlagName = fmt.Sprintf("%v.task", cmdPrefix)
	}

	if err := registerModelTableTaskConfigFlags(depth+1, taskFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigTenants(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tenantsFlagName string
	if cmdPrefix == "" {
		tenantsFlagName = "tenants"
	} else {
		tenantsFlagName = fmt.Sprintf("%v.tenants", cmdPrefix)
	}

	if err := registerModelTenantConfigFlags(depth+1, tenantsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableConfigTierConfigs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tierConfigs []*TierConfig array type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigTunerConfigs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tunerConfigs []*TunerConfig array type is not supported by go-swagger cli yet

	return nil
}

func registerTableConfigUpsertConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var upsertConfigFlagName string
	if cmdPrefix == "" {
		upsertConfigFlagName = "upsertConfig"
	} else {
		upsertConfigFlagName = fmt.Sprintf("%v.upsertConfig", cmdPrefix)
	}

	if err := registerModelUpsertConfigFlags(depth+1, upsertConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableConfigFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dedupConfigAdded := retrieveTableConfigDedupConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dedupConfigAdded

	err, dimensionTableConfigAdded := retrieveTableConfigDimensionTableConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dimensionTableConfigAdded

	err, fieldConfigListAdded := retrieveTableConfigFieldConfigListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fieldConfigListAdded

	err, ingestionConfigAdded := retrieveTableConfigIngestionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ingestionConfigAdded

	err, instanceAssignmentConfigMapAdded := retrieveTableConfigInstanceAssignmentConfigMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || instanceAssignmentConfigMapAdded

	err, instancePartitionsMapAdded := retrieveTableConfigInstancePartitionsMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || instancePartitionsMapAdded

	err, isDimTableAdded := retrieveTableConfigIsDimTableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isDimTableAdded

	err, metadataAdded := retrieveTableConfigMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded

	err, queryAdded := retrieveTableConfigQueryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || queryAdded

	err, quotaAdded := retrieveTableConfigQuotaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quotaAdded

	err, routingAdded := retrieveTableConfigRoutingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || routingAdded

	err, segmentAssignmentConfigMapAdded := retrieveTableConfigSegmentAssignmentConfigMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentAssignmentConfigMapAdded

	err, segmentsConfigAdded := retrieveTableConfigSegmentsConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentsConfigAdded

	err, tableIndexConfigAdded := retrieveTableConfigTableIndexConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableIndexConfigAdded

	err, tableNameAdded := retrieveTableConfigTableNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableNameAdded

	err, tableTypeAdded := retrieveTableConfigTableTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableTypeAdded

	err, taskAdded := retrieveTableConfigTaskFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskAdded

	err, tenantsAdded := retrieveTableConfigTenantsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tenantsAdded

	err, tierConfigsAdded := retrieveTableConfigTierConfigsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tierConfigsAdded

	err, tunerConfigsAdded := retrieveTableConfigTunerConfigsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tunerConfigsAdded

	err, upsertConfigAdded := retrieveTableConfigUpsertConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upsertConfigAdded

	return nil, retAdded
}

func retrieveTableConfigDedupConfigFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dedupConfigFlagName := fmt.Sprintf("%v.dedupConfig", cmdPrefix)
	if cmd.Flags().Changed(dedupConfigFlagName) {
		// info: complex object dedupConfig DedupConfig is retrieved outside this Changed() block
	}
	dedupConfigFlagValue := m.DedupConfig
	if swag.IsZero(dedupConfigFlagValue) {
		dedupConfigFlagValue = &models.DedupConfig{}
	}

	err, dedupConfigAdded := retrieveModelDedupConfigFlags(depth+1, dedupConfigFlagValue, dedupConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dedupConfigAdded
	if dedupConfigAdded {
		m.DedupConfig = dedupConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigDimensionTableConfigFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dimensionTableConfigFlagName := fmt.Sprintf("%v.dimensionTableConfig", cmdPrefix)
	if cmd.Flags().Changed(dimensionTableConfigFlagName) {
		// info: complex object dimensionTableConfig DimensionTableConfig is retrieved outside this Changed() block
	}
	dimensionTableConfigFlagValue := m.DimensionTableConfig
	if swag.IsZero(dimensionTableConfigFlagValue) {
		dimensionTableConfigFlagValue = &models.DimensionTableConfig{}
	}

	err, dimensionTableConfigAdded := retrieveModelDimensionTableConfigFlags(depth+1, dimensionTableConfigFlagValue, dimensionTableConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dimensionTableConfigAdded
	if dimensionTableConfigAdded {
		m.DimensionTableConfig = dimensionTableConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigFieldConfigListFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fieldConfigListFlagName := fmt.Sprintf("%v.fieldConfigList", cmdPrefix)
	if cmd.Flags().Changed(fieldConfigListFlagName) {
		// warning: fieldConfigList array type []*FieldConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigIngestionConfigFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ingestionConfigFlagName := fmt.Sprintf("%v.ingestionConfig", cmdPrefix)
	if cmd.Flags().Changed(ingestionConfigFlagName) {
		// info: complex object ingestionConfig IngestionConfig is retrieved outside this Changed() block
	}
	ingestionConfigFlagValue := m.IngestionConfig
	if swag.IsZero(ingestionConfigFlagValue) {
		ingestionConfigFlagValue = &models.IngestionConfig{}
	}

	err, ingestionConfigAdded := retrieveModelIngestionConfigFlags(depth+1, ingestionConfigFlagValue, ingestionConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ingestionConfigAdded
	if ingestionConfigAdded {
		m.IngestionConfig = ingestionConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigInstanceAssignmentConfigMapFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	instanceAssignmentConfigMapFlagName := fmt.Sprintf("%v.instanceAssignmentConfigMap", cmdPrefix)
	if cmd.Flags().Changed(instanceAssignmentConfigMapFlagName) {
		// warning: instanceAssignmentConfigMap map type map[string]InstanceAssignmentConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigInstancePartitionsMapFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	instancePartitionsMapFlagName := fmt.Sprintf("%v.instancePartitionsMap", cmdPrefix)
	if cmd.Flags().Changed(instancePartitionsMapFlagName) {
		// warning: instancePartitionsMap map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigIsDimTableFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isDimTableFlagName := fmt.Sprintf("%v.isDimTable", cmdPrefix)
	if cmd.Flags().Changed(isDimTableFlagName) {

		var isDimTableFlagName string
		if cmdPrefix == "" {
			isDimTableFlagName = "isDimTable"
		} else {
			isDimTableFlagName = fmt.Sprintf("%v.isDimTable", cmdPrefix)
		}

		isDimTableFlagValue, err := cmd.Flags().GetBool(isDimTableFlagName)
		if err != nil {
			return err, false
		}
		m.IsDimTable = &isDimTableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigMetadataFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metadataFlagName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(metadataFlagName) {
		// info: complex object metadata TableCustomConfig is retrieved outside this Changed() block
	}
	metadataFlagValue := m.Metadata
	if swag.IsZero(metadataFlagValue) {
		metadataFlagValue = &models.TableCustomConfig{}
	}

	err, metadataAdded := retrieveModelTableCustomConfigFlags(depth+1, metadataFlagValue, metadataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded
	if metadataAdded {
		m.Metadata = metadataFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigQueryFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	queryFlagName := fmt.Sprintf("%v.query", cmdPrefix)
	if cmd.Flags().Changed(queryFlagName) {
		// info: complex object query QueryConfig is retrieved outside this Changed() block
	}
	queryFlagValue := m.Query
	if swag.IsZero(queryFlagValue) {
		queryFlagValue = &models.QueryConfig{}
	}

	err, queryAdded := retrieveModelQueryConfigFlags(depth+1, queryFlagValue, queryFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || queryAdded
	if queryAdded {
		m.Query = queryFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigQuotaFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	quotaFlagName := fmt.Sprintf("%v.quota", cmdPrefix)
	if cmd.Flags().Changed(quotaFlagName) {
		// info: complex object quota QuotaConfig is retrieved outside this Changed() block
	}
	quotaFlagValue := m.Quota
	if swag.IsZero(quotaFlagValue) {
		quotaFlagValue = &models.QuotaConfig{}
	}

	err, quotaAdded := retrieveModelQuotaConfigFlags(depth+1, quotaFlagValue, quotaFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quotaAdded
	if quotaAdded {
		m.Quota = quotaFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigRoutingFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	routingFlagName := fmt.Sprintf("%v.routing", cmdPrefix)
	if cmd.Flags().Changed(routingFlagName) {
		// info: complex object routing RoutingConfig is retrieved outside this Changed() block
	}
	routingFlagValue := m.Routing
	if swag.IsZero(routingFlagValue) {
		routingFlagValue = &models.RoutingConfig{}
	}

	err, routingAdded := retrieveModelRoutingConfigFlags(depth+1, routingFlagValue, routingFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || routingAdded
	if routingAdded {
		m.Routing = routingFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigSegmentAssignmentConfigMapFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentAssignmentConfigMapFlagName := fmt.Sprintf("%v.segmentAssignmentConfigMap", cmdPrefix)
	if cmd.Flags().Changed(segmentAssignmentConfigMapFlagName) {
		// warning: segmentAssignmentConfigMap map type map[string]SegmentAssignmentConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigSegmentsConfigFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentsConfigFlagName := fmt.Sprintf("%v.segmentsConfig", cmdPrefix)
	if cmd.Flags().Changed(segmentsConfigFlagName) {
		// info: complex object segmentsConfig SegmentsValidationAndRetentionConfig is retrieved outside this Changed() block
	}
	segmentsConfigFlagValue := m.SegmentsConfig
	if swag.IsZero(segmentsConfigFlagValue) {
		segmentsConfigFlagValue = &models.SegmentsValidationAndRetentionConfig{}
	}

	err, segmentsConfigAdded := retrieveModelSegmentsValidationAndRetentionConfigFlags(depth+1, segmentsConfigFlagValue, segmentsConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentsConfigAdded
	if segmentsConfigAdded {
		m.SegmentsConfig = segmentsConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigTableIndexConfigFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableIndexConfigFlagName := fmt.Sprintf("%v.tableIndexConfig", cmdPrefix)
	if cmd.Flags().Changed(tableIndexConfigFlagName) {
		// info: complex object tableIndexConfig IndexingConfig is retrieved outside this Changed() block
	}
	tableIndexConfigFlagValue := m.TableIndexConfig
	if swag.IsZero(tableIndexConfigFlagValue) {
		tableIndexConfigFlagValue = &models.IndexingConfig{}
	}

	err, tableIndexConfigAdded := retrieveModelIndexingConfigFlags(depth+1, tableIndexConfigFlagValue, tableIndexConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableIndexConfigAdded
	if tableIndexConfigAdded {
		m.TableIndexConfig = tableIndexConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigTableNameFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableNameFlagName := fmt.Sprintf("%v.tableName", cmdPrefix)
	if cmd.Flags().Changed(tableNameFlagName) {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigTableTypeFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableTypeFlagName := fmt.Sprintf("%v.tableType", cmdPrefix)
	if cmd.Flags().Changed(tableTypeFlagName) {

		var tableTypeFlagName string
		if cmdPrefix == "" {
			tableTypeFlagName = "tableType"
		} else {
			tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
		}

		tableTypeFlagValue, err := cmd.Flags().GetString(tableTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TableType = tableTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableConfigTaskFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskFlagName := fmt.Sprintf("%v.task", cmdPrefix)
	if cmd.Flags().Changed(taskFlagName) {
		// info: complex object task TableTaskConfig is retrieved outside this Changed() block
	}
	taskFlagValue := m.Task
	if swag.IsZero(taskFlagValue) {
		taskFlagValue = &models.TableTaskConfig{}
	}

	err, taskAdded := retrieveModelTableTaskConfigFlags(depth+1, taskFlagValue, taskFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskAdded
	if taskAdded {
		m.Task = taskFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigTenantsFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tenantsFlagName := fmt.Sprintf("%v.tenants", cmdPrefix)
	if cmd.Flags().Changed(tenantsFlagName) {
		// info: complex object tenants TenantConfig is retrieved outside this Changed() block
	}
	tenantsFlagValue := m.Tenants
	if swag.IsZero(tenantsFlagValue) {
		tenantsFlagValue = &models.TenantConfig{}
	}

	err, tenantsAdded := retrieveModelTenantConfigFlags(depth+1, tenantsFlagValue, tenantsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tenantsAdded
	if tenantsAdded {
		m.Tenants = tenantsFlagValue
	}

	return nil, retAdded
}

func retrieveTableConfigTierConfigsFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tierConfigsFlagName := fmt.Sprintf("%v.tierConfigs", cmdPrefix)
	if cmd.Flags().Changed(tierConfigsFlagName) {
		// warning: tierConfigs array type []*TierConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigTunerConfigsFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tunerConfigsFlagName := fmt.Sprintf("%v.tunerConfigs", cmdPrefix)
	if cmd.Flags().Changed(tunerConfigsFlagName) {
		// warning: tunerConfigs array type []*TunerConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTableConfigUpsertConfigFlags(depth int, m *models.TableConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	upsertConfigFlagName := fmt.Sprintf("%v.upsertConfig", cmdPrefix)
	if cmd.Flags().Changed(upsertConfigFlagName) {
		// info: complex object upsertConfig UpsertConfig is retrieved outside this Changed() block
	}
	upsertConfigFlagValue := m.UpsertConfig
	if swag.IsZero(upsertConfigFlagValue) {
		upsertConfigFlagValue = &models.UpsertConfig{}
	}

	err, upsertConfigAdded := retrieveModelUpsertConfigFlags(depth+1, upsertConfigFlagValue, upsertConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upsertConfigAdded
	if upsertConfigAdded {
		m.UpsertConfig = upsertConfigFlagValue
	}

	return nil, retAdded
}
