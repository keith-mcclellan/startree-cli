// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for Instance

// register flags to command
func registerModelInstanceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInstanceAdminPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceGrpcPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceHost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstancePools(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstancePort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceQueriesDisabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceQueryMailboxPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceQueryServicePort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInstanceAdminPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	adminPortDescription := ``

	var adminPortFlagName string
	if cmdPrefix == "" {
		adminPortFlagName = "adminPort"
	} else {
		adminPortFlagName = fmt.Sprintf("%v.adminPort", cmdPrefix)
	}

	var adminPortFlagDefault int32

	_ = cmd.PersistentFlags().Int32(adminPortFlagName, adminPortFlagDefault, adminPortDescription)

	return nil
}

func registerInstanceGrpcPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	grpcPortDescription := ``

	var grpcPortFlagName string
	if cmdPrefix == "" {
		grpcPortFlagName = "grpcPort"
	} else {
		grpcPortFlagName = fmt.Sprintf("%v.grpcPort", cmdPrefix)
	}

	var grpcPortFlagDefault int32

	_ = cmd.PersistentFlags().Int32(grpcPortFlagName, grpcPortFlagDefault, grpcPortDescription)

	return nil
}

func registerInstanceHost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostDescription := `Required. `

	var hostFlagName string
	if cmdPrefix == "" {
		hostFlagName = "host"
	} else {
		hostFlagName = fmt.Sprintf("%v.host", cmdPrefix)
	}

	var hostFlagDefault string

	_ = cmd.PersistentFlags().String(hostFlagName, hostFlagDefault, hostDescription)

	return nil
}

func registerInstancePools(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: pools map[string]int32 map type is not supported by go-swagger cli yet

	return nil
}

func registerInstancePort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := `Required. `

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault int32

	_ = cmd.PersistentFlags().Int32(portFlagName, portFlagDefault, portDescription)

	return nil
}

func registerInstanceQueriesDisabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	queriesDisabledDescription := ``

	var queriesDisabledFlagName string
	if cmdPrefix == "" {
		queriesDisabledFlagName = "queriesDisabled"
	} else {
		queriesDisabledFlagName = fmt.Sprintf("%v.queriesDisabled", cmdPrefix)
	}

	var queriesDisabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(queriesDisabledFlagName, queriesDisabledFlagDefault, queriesDisabledDescription)

	return nil
}

func registerInstanceQueryMailboxPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	queryMailboxPortDescription := ``

	var queryMailboxPortFlagName string
	if cmdPrefix == "" {
		queryMailboxPortFlagName = "queryMailboxPort"
	} else {
		queryMailboxPortFlagName = fmt.Sprintf("%v.queryMailboxPort", cmdPrefix)
	}

	var queryMailboxPortFlagDefault int32

	_ = cmd.PersistentFlags().Int32(queryMailboxPortFlagName, queryMailboxPortFlagDefault, queryMailboxPortDescription)

	return nil
}

func registerInstanceQueryServicePort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	queryServicePortDescription := ``

	var queryServicePortFlagName string
	if cmdPrefix == "" {
		queryServicePortFlagName = "queryServicePort"
	} else {
		queryServicePortFlagName = fmt.Sprintf("%v.queryServicePort", cmdPrefix)
	}

	var queryServicePortFlagDefault int32

	_ = cmd.PersistentFlags().Int32(queryServicePortFlagName, queryServicePortFlagDefault, queryServicePortDescription)

	return nil
}

func registerInstanceTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tags []string array type is not supported by go-swagger cli yet

	return nil
}

func registerInstanceType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["CONTROLLER","BROKER","SERVER","MINION"]. Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["CONTROLLER","BROKER","SERVER","MINION"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInstanceFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, adminPortAdded := retrieveInstanceAdminPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || adminPortAdded

	err, grpcPortAdded := retrieveInstanceGrpcPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || grpcPortAdded

	err, hostAdded := retrieveInstanceHostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostAdded

	err, poolsAdded := retrieveInstancePoolsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poolsAdded

	err, portAdded := retrieveInstancePortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, queriesDisabledAdded := retrieveInstanceQueriesDisabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || queriesDisabledAdded

	err, queryMailboxPortAdded := retrieveInstanceQueryMailboxPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || queryMailboxPortAdded

	err, queryServicePortAdded := retrieveInstanceQueryServicePortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || queryServicePortAdded

	err, tagsAdded := retrieveInstanceTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagsAdded

	err, typeAdded := retrieveInstanceTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveInstanceAdminPortFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	adminPortFlagName := fmt.Sprintf("%v.adminPort", cmdPrefix)
	if cmd.Flags().Changed(adminPortFlagName) {

		var adminPortFlagName string
		if cmdPrefix == "" {
			adminPortFlagName = "adminPort"
		} else {
			adminPortFlagName = fmt.Sprintf("%v.adminPort", cmdPrefix)
		}

		adminPortFlagValue, err := cmd.Flags().GetInt32(adminPortFlagName)
		if err != nil {
			return err, false
		}
		m.AdminPort = adminPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceGrpcPortFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	grpcPortFlagName := fmt.Sprintf("%v.grpcPort", cmdPrefix)
	if cmd.Flags().Changed(grpcPortFlagName) {

		var grpcPortFlagName string
		if cmdPrefix == "" {
			grpcPortFlagName = "grpcPort"
		} else {
			grpcPortFlagName = fmt.Sprintf("%v.grpcPort", cmdPrefix)
		}

		grpcPortFlagValue, err := cmd.Flags().GetInt32(grpcPortFlagName)
		if err != nil {
			return err, false
		}
		m.GrpcPort = grpcPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceHostFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostFlagName := fmt.Sprintf("%v.host", cmdPrefix)
	if cmd.Flags().Changed(hostFlagName) {

		var hostFlagName string
		if cmdPrefix == "" {
			hostFlagName = "host"
		} else {
			hostFlagName = fmt.Sprintf("%v.host", cmdPrefix)
		}

		hostFlagValue, err := cmd.Flags().GetString(hostFlagName)
		if err != nil {
			return err, false
		}
		m.Host = hostFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstancePoolsFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poolsFlagName := fmt.Sprintf("%v.pools", cmdPrefix)
	if cmd.Flags().Changed(poolsFlagName) {
		// warning: pools map type map[string]int32 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveInstancePortFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetInt32(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = portFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceQueriesDisabledFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	queriesDisabledFlagName := fmt.Sprintf("%v.queriesDisabled", cmdPrefix)
	if cmd.Flags().Changed(queriesDisabledFlagName) {

		var queriesDisabledFlagName string
		if cmdPrefix == "" {
			queriesDisabledFlagName = "queriesDisabled"
		} else {
			queriesDisabledFlagName = fmt.Sprintf("%v.queriesDisabled", cmdPrefix)
		}

		queriesDisabledFlagValue, err := cmd.Flags().GetBool(queriesDisabledFlagName)
		if err != nil {
			return err, false
		}
		m.QueriesDisabled = &queriesDisabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceQueryMailboxPortFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	queryMailboxPortFlagName := fmt.Sprintf("%v.queryMailboxPort", cmdPrefix)
	if cmd.Flags().Changed(queryMailboxPortFlagName) {

		var queryMailboxPortFlagName string
		if cmdPrefix == "" {
			queryMailboxPortFlagName = "queryMailboxPort"
		} else {
			queryMailboxPortFlagName = fmt.Sprintf("%v.queryMailboxPort", cmdPrefix)
		}

		queryMailboxPortFlagValue, err := cmd.Flags().GetInt32(queryMailboxPortFlagName)
		if err != nil {
			return err, false
		}
		m.QueryMailboxPort = queryMailboxPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceQueryServicePortFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	queryServicePortFlagName := fmt.Sprintf("%v.queryServicePort", cmdPrefix)
	if cmd.Flags().Changed(queryServicePortFlagName) {

		var queryServicePortFlagName string
		if cmdPrefix == "" {
			queryServicePortFlagName = "queryServicePort"
		} else {
			queryServicePortFlagName = fmt.Sprintf("%v.queryServicePort", cmdPrefix)
		}

		queryServicePortFlagValue, err := cmd.Flags().GetInt32(queryServicePortFlagName)
		if err != nil {
			return err, false
		}
		m.QueryServicePort = queryServicePortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceTagsFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagsFlagName := fmt.Sprintf("%v.tags", cmdPrefix)
	if cmd.Flags().Changed(tagsFlagName) {
		// warning: tags array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveInstanceTypeFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
