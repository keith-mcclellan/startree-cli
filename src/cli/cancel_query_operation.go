// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/query"

	"github.com/spf13/cobra"
)

// makeOperationQueryCancelQueryCmd returns a cmd to handle operation cancelQuery
func makeOperationQueryCancelQueryCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "cancelQuery",
		Short: `No effect if no query exists for the given queryId on the requested broker. Query may continue to run for a short while after calling cancel as it's done in a non-blocking manner. The cancel method can be called multiple times.`,
		RunE:  runOperationQueryCancelQuery,
	}

	if err := registerOperationQueryCancelQueryParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationQueryCancelQuery uses cmd flags to call endpoint api
func runOperationQueryCancelQuery(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := query.NewCancelQueryParams()
	if err, _ := retrieveOperationQueryCancelQueryBrokerIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationQueryCancelQueryQueryIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationQueryCancelQueryTimeoutMsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationQueryCancelQueryVerboseFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationQueryCancelQueryResult(appCli.Query.CancelQuery(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationQueryCancelQueryParamFlags registers all flags needed to fill params
func registerOperationQueryCancelQueryParamFlags(cmd *cobra.Command) error {
	if err := registerOperationQueryCancelQueryBrokerIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationQueryCancelQueryQueryIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationQueryCancelQueryTimeoutMsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationQueryCancelQueryVerboseParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationQueryCancelQueryBrokerIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	brokerIdDescription := `Required. Broker that's running the query`

	var brokerIdFlagName string
	if cmdPrefix == "" {
		brokerIdFlagName = "brokerId"
	} else {
		brokerIdFlagName = fmt.Sprintf("%v.brokerId", cmdPrefix)
	}

	var brokerIdFlagDefault string

	_ = cmd.PersistentFlags().String(brokerIdFlagName, brokerIdFlagDefault, brokerIdDescription)

	return nil
}
func registerOperationQueryCancelQueryQueryIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	queryIdDescription := `Required. QueryId as assigned by the broker`

	var queryIdFlagName string
	if cmdPrefix == "" {
		queryIdFlagName = "queryId"
	} else {
		queryIdFlagName = fmt.Sprintf("%v.queryId", cmdPrefix)
	}

	var queryIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(queryIdFlagName, queryIdFlagDefault, queryIdDescription)

	return nil
}
func registerOperationQueryCancelQueryTimeoutMsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	timeoutMsDescription := `Timeout for servers to respond the cancel request`

	var timeoutMsFlagName string
	if cmdPrefix == "" {
		timeoutMsFlagName = "timeoutMs"
	} else {
		timeoutMsFlagName = fmt.Sprintf("%v.timeoutMs", cmdPrefix)
	}

	var timeoutMsFlagDefault int32 = 3000

	_ = cmd.PersistentFlags().Int32(timeoutMsFlagName, timeoutMsFlagDefault, timeoutMsDescription)

	return nil
}
func registerOperationQueryCancelQueryVerboseParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	verboseDescription := `Return verbose responses for troubleshooting`

	var verboseFlagName string
	if cmdPrefix == "" {
		verboseFlagName = "verbose"
	} else {
		verboseFlagName = fmt.Sprintf("%v.verbose", cmdPrefix)
	}

	var verboseFlagDefault bool

	_ = cmd.PersistentFlags().Bool(verboseFlagName, verboseFlagDefault, verboseDescription)

	return nil
}

func retrieveOperationQueryCancelQueryBrokerIDFlag(m *query.CancelQueryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("brokerId") {

		var brokerIdFlagName string
		if cmdPrefix == "" {
			brokerIdFlagName = "brokerId"
		} else {
			brokerIdFlagName = fmt.Sprintf("%v.brokerId", cmdPrefix)
		}

		brokerIdFlagValue, err := cmd.Flags().GetString(brokerIdFlagName)
		if err != nil {
			return err, false
		}
		m.BrokerID = brokerIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationQueryCancelQueryQueryIDFlag(m *query.CancelQueryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("queryId") {

		var queryIdFlagName string
		if cmdPrefix == "" {
			queryIdFlagName = "queryId"
		} else {
			queryIdFlagName = fmt.Sprintf("%v.queryId", cmdPrefix)
		}

		queryIdFlagValue, err := cmd.Flags().GetInt64(queryIdFlagName)
		if err != nil {
			return err, false
		}
		m.QueryID = queryIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationQueryCancelQueryTimeoutMsFlag(m *query.CancelQueryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("timeoutMs") {

		var timeoutMsFlagName string
		if cmdPrefix == "" {
			timeoutMsFlagName = "timeoutMs"
		} else {
			timeoutMsFlagName = fmt.Sprintf("%v.timeoutMs", cmdPrefix)
		}

		timeoutMsFlagValue, err := cmd.Flags().GetInt32(timeoutMsFlagName)
		if err != nil {
			return err, false
		}
		m.TimeoutMs = &timeoutMsFlagValue

	}
	return nil, retAdded
}
func retrieveOperationQueryCancelQueryVerboseFlag(m *query.CancelQueryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("verbose") {

		var verboseFlagName string
		if cmdPrefix == "" {
			verboseFlagName = "verbose"
		} else {
			verboseFlagName = fmt.Sprintf("%v.verbose", cmdPrefix)
		}

		verboseFlagValue, err := cmd.Flags().GetBool(verboseFlagName)
		if err != nil {
			return err, false
		}
		m.Verbose = &verboseFlagValue

	}
	return nil, retAdded
}

// parseOperationQueryCancelQueryResult parses request result and return the string content
func parseOperationQueryCancelQueryResult(resp0 *query.CancelQueryOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning cancelQueryOK is not supported

		// Non schema case: warning cancelQueryNotFound is not supported

		// Non schema case: warning cancelQueryInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response cancelQueryOK is not supported by go-swagger cli yet.

	return "", nil
}
