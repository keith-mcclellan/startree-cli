// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/user"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationUserUpdateUserConfigCmd returns a cmd to handle operation updateUserConfig
func makeOperationUserUpdateUserConfigCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "updateUserConfig",
		Short: `Update user config for user`,
		RunE:  runOperationUserUpdateUserConfig,
	}

	if err := registerOperationUserUpdateUserConfigParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUserUpdateUserConfig uses cmd flags to call endpoint api
func runOperationUserUpdateUserConfig(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := user.NewUpdateUserConfigParams()
	if err, _ := retrieveOperationUserUpdateUserConfigBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserUpdateUserConfigComponentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserUpdateUserConfigPasswordChangedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserUpdateUserConfigUsernameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUserUpdateUserConfigResult(appCli.User.UpdateUserConfig(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationUserUpdateUserConfigParamFlags registers all flags needed to fill params
func registerOperationUserUpdateUserConfigParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUserUpdateUserConfigBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserUpdateUserConfigComponentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserUpdateUserConfigPasswordChangedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserUpdateUserConfigUsernameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUserUpdateUserConfigBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	bodyDescription := ``

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	var bodyFlagDefault string

	_ = cmd.PersistentFlags().String(bodyFlagName, bodyFlagDefault, bodyDescription)

	return nil
}
func registerOperationUserUpdateUserConfigComponentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	componentDescription := ``

	var componentFlagName string
	if cmdPrefix == "" {
		componentFlagName = "component"
	} else {
		componentFlagName = fmt.Sprintf("%v.component", cmdPrefix)
	}

	var componentFlagDefault string

	_ = cmd.PersistentFlags().String(componentFlagName, componentFlagDefault, componentDescription)

	return nil
}
func registerOperationUserUpdateUserConfigPasswordChangedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	passwordChangedDescription := ``

	var passwordChangedFlagName string
	if cmdPrefix == "" {
		passwordChangedFlagName = "passwordChanged"
	} else {
		passwordChangedFlagName = fmt.Sprintf("%v.passwordChanged", cmdPrefix)
	}

	var passwordChangedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(passwordChangedFlagName, passwordChangedFlagDefault, passwordChangedDescription)

	return nil
}
func registerOperationUserUpdateUserConfigUsernameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	usernameDescription := `Required. `

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

func retrieveOperationUserUpdateUserConfigBodyFlag(m *user.UpdateUserConfigParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {

		var bodyFlagName string
		if cmdPrefix == "" {
			bodyFlagName = "body"
		} else {
			bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
		}

		bodyFlagValue, err := cmd.Flags().GetString(bodyFlagName)
		if err != nil {
			return err, false
		}
		m.Body = bodyFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUserUpdateUserConfigComponentFlag(m *user.UpdateUserConfigParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("component") {

		var componentFlagName string
		if cmdPrefix == "" {
			componentFlagName = "component"
		} else {
			componentFlagName = fmt.Sprintf("%v.component", cmdPrefix)
		}

		componentFlagValue, err := cmd.Flags().GetString(componentFlagName)
		if err != nil {
			return err, false
		}
		m.Component = &componentFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUserUpdateUserConfigPasswordChangedFlag(m *user.UpdateUserConfigParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("passwordChanged") {

		var passwordChangedFlagName string
		if cmdPrefix == "" {
			passwordChangedFlagName = "passwordChanged"
		} else {
			passwordChangedFlagName = fmt.Sprintf("%v.passwordChanged", cmdPrefix)
		}

		passwordChangedFlagValue, err := cmd.Flags().GetBool(passwordChangedFlagName)
		if err != nil {
			return err, false
		}
		m.PasswordChanged = &passwordChangedFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUserUpdateUserConfigUsernameFlag(m *user.UpdateUserConfigParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("username") {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

	}
	return nil, retAdded
}

// parseOperationUserUpdateUserConfigResult parses request result and return the string content
func parseOperationUserUpdateUserConfigResult(resp0 *user.UpdateUserConfigOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*user.UpdateUserConfigOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
