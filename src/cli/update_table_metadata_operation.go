// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"startree.ai/cli/client/table"

	"github.com/spf13/cobra"
)

// makeOperationTableUpdateTableMetadataCmd returns a cmd to handle operation updateTableMetadata
func makeOperationTableUpdateTableMetadataCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "updateTableMetadata",
		Short: `Updates table configuration`,
		RunE:  runOperationTableUpdateTableMetadata,
	}

	if err := registerOperationTableUpdateTableMetadataParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTableUpdateTableMetadata uses cmd flags to call endpoint api
func runOperationTableUpdateTableMetadata(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := table.NewUpdateTableMetadataParams()
	if err, _ := retrieveOperationTableUpdateTableMetadataBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableUpdateTableMetadataTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTableUpdateTableMetadataResult(appCli.Table.UpdateTableMetadata(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTableUpdateTableMetadataParamFlags registers all flags needed to fill params
func registerOperationTableUpdateTableMetadataParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTableUpdateTableMetadataBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableUpdateTableMetadataTableNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTableUpdateTableMetadataBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	bodyDescription := ``

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	var bodyFlagDefault string

	_ = cmd.PersistentFlags().String(bodyFlagName, bodyFlagDefault, bodyDescription)

	return nil
}
func registerOperationTableUpdateTableMetadataTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. `

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}

func retrieveOperationTableUpdateTableMetadataBodyFlag(m *table.UpdateTableMetadataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {

		var bodyFlagName string
		if cmdPrefix == "" {
			bodyFlagName = "body"
		} else {
			bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
		}

		bodyFlagValue, err := cmd.Flags().GetString(bodyFlagName)
		if err != nil {
			return err, false
		}
		m.Body = bodyFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableUpdateTableMetadataTableNameFlag(m *table.UpdateTableMetadataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}

// parseOperationTableUpdateTableMetadataResult parses request result and return the string content
func parseOperationTableUpdateTableMetadataResult(resp0 *table.UpdateTableMetadataOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updateTableMetadataOK is not supported

		// Non schema case: warning updateTableMetadataNotFound is not supported

		// Non schema case: warning updateTableMetadataInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response updateTableMetadataOK is not supported by go-swagger cli yet.

	return "", nil
}
