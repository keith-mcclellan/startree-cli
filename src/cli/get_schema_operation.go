// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/schema"
	"startree.ai/cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSchemaGetSchemaCmd returns a cmd to handle operation getSchema
func makeOperationSchemaGetSchemaCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getSchema",
		Short: `Gets a schema by name`,
		RunE:  runOperationSchemaGetSchema,
	}

	if err := registerOperationSchemaGetSchemaParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSchemaGetSchema uses cmd flags to call endpoint api
func runOperationSchemaGetSchema(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := schema.NewGetSchemaParams()
	if err, _ := retrieveOperationSchemaGetSchemaSchemaNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSchemaGetSchemaResult(appCli.Schema.GetSchema(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSchemaGetSchemaParamFlags registers all flags needed to fill params
func registerOperationSchemaGetSchemaParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSchemaGetSchemaSchemaNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSchemaGetSchemaSchemaNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	schemaNameDescription := `Required. Schema name`

	var schemaNameFlagName string
	if cmdPrefix == "" {
		schemaNameFlagName = "schemaName"
	} else {
		schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
	}

	var schemaNameFlagDefault string

	_ = cmd.PersistentFlags().String(schemaNameFlagName, schemaNameFlagDefault, schemaNameDescription)

	return nil
}

func retrieveOperationSchemaGetSchemaSchemaNameFlag(m *schema.GetSchemaParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("schemaName") {

		var schemaNameFlagName string
		if cmdPrefix == "" {
			schemaNameFlagName = "schemaName"
		} else {
			schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
		}

		schemaNameFlagValue, err := cmd.Flags().GetString(schemaNameFlagName)
		if err != nil {
			return err, false
		}
		m.SchemaName = schemaNameFlagValue

	}
	return nil, retAdded
}

// parseOperationSchemaGetSchemaResult parses request result and return the string content
func parseOperationSchemaGetSchemaResult(resp0 *schema.GetSchemaOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*schema.GetSchemaOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning getSchemaNotFound is not supported

		// Non schema case: warning getSchemaInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelGetSchemaOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGetSchemaOKBodyDateTimeFieldSpecs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGetSchemaOKBodyDimensionFieldSpecs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGetSchemaOKBodyMetricFieldSpecs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGetSchemaOKBodyPrimaryKeyColumns(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGetSchemaOKBodySchemaName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGetSchemaOKBodyTimeFieldSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGetSchemaOKBodyDateTimeFieldSpecs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: dateTimeFieldSpecs []*models.DateTimeFieldSpec array type is not supported by go-swagger cli yet

	return nil
}

func registerGetSchemaOKBodyDimensionFieldSpecs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: dimensionFieldSpecs []*models.DimensionFieldSpec array type is not supported by go-swagger cli yet

	return nil
}

func registerGetSchemaOKBodyMetricFieldSpecs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: metricFieldSpecs []*models.MetricFieldSpec array type is not supported by go-swagger cli yet

	return nil
}

func registerGetSchemaOKBodyPrimaryKeyColumns(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primaryKeyColumns []string array type is not supported by go-swagger cli yet

	return nil
}

func registerGetSchemaOKBodySchemaName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	schemaNameDescription := ``

	var schemaNameFlagName string
	if cmdPrefix == "" {
		schemaNameFlagName = "schemaName"
	} else {
		schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
	}

	var schemaNameFlagDefault string

	_ = cmd.PersistentFlags().String(schemaNameFlagName, schemaNameFlagDefault, schemaNameDescription)

	return nil
}

func registerGetSchemaOKBodyTimeFieldSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var timeFieldSpecFlagName string
	if cmdPrefix == "" {
		timeFieldSpecFlagName = "timeFieldSpec"
	} else {
		timeFieldSpecFlagName = fmt.Sprintf("%v.timeFieldSpec", cmdPrefix)
	}

	if err := registerModelTimeFieldSpecFlags(depth+1, timeFieldSpecFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGetSchemaOKBodyFlags(depth int, m *schema.GetSchemaOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dateTimeFieldSpecsAdded := retrieveGetSchemaOKBodyDateTimeFieldSpecsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dateTimeFieldSpecsAdded

	err, dimensionFieldSpecsAdded := retrieveGetSchemaOKBodyDimensionFieldSpecsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dimensionFieldSpecsAdded

	err, metricFieldSpecsAdded := retrieveGetSchemaOKBodyMetricFieldSpecsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metricFieldSpecsAdded

	err, primaryKeyColumnsAdded := retrieveGetSchemaOKBodyPrimaryKeyColumnsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || primaryKeyColumnsAdded

	err, schemaNameAdded := retrieveGetSchemaOKBodySchemaNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || schemaNameAdded

	err, timeFieldSpecAdded := retrieveGetSchemaOKBodyTimeFieldSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeFieldSpecAdded

	return nil, retAdded
}

func retrieveGetSchemaOKBodyDateTimeFieldSpecsFlags(depth int, m *schema.GetSchemaOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dateTimeFieldSpecsFlagName := fmt.Sprintf("%v.dateTimeFieldSpecs", cmdPrefix)
	if cmd.Flags().Changed(dateTimeFieldSpecsFlagName) {
		// warning: dateTimeFieldSpecs array type []*models.DateTimeFieldSpec is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGetSchemaOKBodyDimensionFieldSpecsFlags(depth int, m *schema.GetSchemaOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dimensionFieldSpecsFlagName := fmt.Sprintf("%v.dimensionFieldSpecs", cmdPrefix)
	if cmd.Flags().Changed(dimensionFieldSpecsFlagName) {
		// warning: dimensionFieldSpecs array type []*models.DimensionFieldSpec is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGetSchemaOKBodyMetricFieldSpecsFlags(depth int, m *schema.GetSchemaOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metricFieldSpecsFlagName := fmt.Sprintf("%v.metricFieldSpecs", cmdPrefix)
	if cmd.Flags().Changed(metricFieldSpecsFlagName) {
		// warning: metricFieldSpecs array type []*models.MetricFieldSpec is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGetSchemaOKBodyPrimaryKeyColumnsFlags(depth int, m *schema.GetSchemaOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	primaryKeyColumnsFlagName := fmt.Sprintf("%v.primaryKeyColumns", cmdPrefix)
	if cmd.Flags().Changed(primaryKeyColumnsFlagName) {
		// warning: primaryKeyColumns array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGetSchemaOKBodySchemaNameFlags(depth int, m *schema.GetSchemaOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	schemaNameFlagName := fmt.Sprintf("%v.schemaName", cmdPrefix)
	if cmd.Flags().Changed(schemaNameFlagName) {

		var schemaNameFlagName string
		if cmdPrefix == "" {
			schemaNameFlagName = "schemaName"
		} else {
			schemaNameFlagName = fmt.Sprintf("%v.schemaName", cmdPrefix)
		}

		schemaNameFlagValue, err := cmd.Flags().GetString(schemaNameFlagName)
		if err != nil {
			return err, false
		}
		m.SchemaName = schemaNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGetSchemaOKBodyTimeFieldSpecFlags(depth int, m *schema.GetSchemaOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeFieldSpecFlagName := fmt.Sprintf("%v.timeFieldSpec", cmdPrefix)
	if cmd.Flags().Changed(timeFieldSpecFlagName) {
		// info: complex object timeFieldSpec models.TimeFieldSpec is retrieved outside this Changed() block
	}
	timeFieldSpecFlagValue := m.TimeFieldSpec
	if swag.IsZero(timeFieldSpecFlagValue) {
		timeFieldSpecFlagValue = &models.TimeFieldSpec{}
	}

	err, timeFieldSpecAdded := retrieveModelTimeFieldSpecFlags(depth+1, timeFieldSpecFlagValue, timeFieldSpecFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeFieldSpecAdded
	if timeFieldSpecAdded {
		m.TimeFieldSpec = timeFieldSpecFlagValue
	}

	return nil, retAdded
}
