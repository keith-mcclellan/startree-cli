// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"startree.ai/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for TableSizeDetails

// register flags to command
func registerModelTableSizeDetailsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTableSizeDetailsEstimatedSizeInBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableSizeDetailsOfflineSegments(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableSizeDetailsRealtimeSegments(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableSizeDetailsReportedSizeInBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTableSizeDetailsTableName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableSizeDetailsEstimatedSizeInBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	estimatedSizeInBytesDescription := ``

	var estimatedSizeInBytesFlagName string
	if cmdPrefix == "" {
		estimatedSizeInBytesFlagName = "estimatedSizeInBytes"
	} else {
		estimatedSizeInBytesFlagName = fmt.Sprintf("%v.estimatedSizeInBytes", cmdPrefix)
	}

	var estimatedSizeInBytesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(estimatedSizeInBytesFlagName, estimatedSizeInBytesFlagDefault, estimatedSizeInBytesDescription)

	return nil
}

func registerTableSizeDetailsOfflineSegments(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var offlineSegmentsFlagName string
	if cmdPrefix == "" {
		offlineSegmentsFlagName = "offlineSegments"
	} else {
		offlineSegmentsFlagName = fmt.Sprintf("%v.offlineSegments", cmdPrefix)
	}

	if err := registerModelTableSubTypeSizeDetailsFlags(depth+1, offlineSegmentsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableSizeDetailsRealtimeSegments(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var realtimeSegmentsFlagName string
	if cmdPrefix == "" {
		realtimeSegmentsFlagName = "realtimeSegments"
	} else {
		realtimeSegmentsFlagName = fmt.Sprintf("%v.realtimeSegments", cmdPrefix)
	}

	if err := registerModelTableSubTypeSizeDetailsFlags(depth+1, realtimeSegmentsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTableSizeDetailsReportedSizeInBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	reportedSizeInBytesDescription := ``

	var reportedSizeInBytesFlagName string
	if cmdPrefix == "" {
		reportedSizeInBytesFlagName = "reportedSizeInBytes"
	} else {
		reportedSizeInBytesFlagName = fmt.Sprintf("%v.reportedSizeInBytes", cmdPrefix)
	}

	var reportedSizeInBytesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(reportedSizeInBytesFlagName, reportedSizeInBytesFlagDefault, reportedSizeInBytesDescription)

	return nil
}

func registerTableSizeDetailsTableName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tableNameDescription := ``

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTableSizeDetailsFlags(depth int, m *models.TableSizeDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, estimatedSizeInBytesAdded := retrieveTableSizeDetailsEstimatedSizeInBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || estimatedSizeInBytesAdded

	err, offlineSegmentsAdded := retrieveTableSizeDetailsOfflineSegmentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || offlineSegmentsAdded

	err, realtimeSegmentsAdded := retrieveTableSizeDetailsRealtimeSegmentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || realtimeSegmentsAdded

	err, reportedSizeInBytesAdded := retrieveTableSizeDetailsReportedSizeInBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || reportedSizeInBytesAdded

	err, tableNameAdded := retrieveTableSizeDetailsTableNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableNameAdded

	return nil, retAdded
}

func retrieveTableSizeDetailsEstimatedSizeInBytesFlags(depth int, m *models.TableSizeDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	estimatedSizeInBytesFlagName := fmt.Sprintf("%v.estimatedSizeInBytes", cmdPrefix)
	if cmd.Flags().Changed(estimatedSizeInBytesFlagName) {

		var estimatedSizeInBytesFlagName string
		if cmdPrefix == "" {
			estimatedSizeInBytesFlagName = "estimatedSizeInBytes"
		} else {
			estimatedSizeInBytesFlagName = fmt.Sprintf("%v.estimatedSizeInBytes", cmdPrefix)
		}

		estimatedSizeInBytesFlagValue, err := cmd.Flags().GetInt64(estimatedSizeInBytesFlagName)
		if err != nil {
			return err, false
		}
		m.EstimatedSizeInBytes = estimatedSizeInBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableSizeDetailsOfflineSegmentsFlags(depth int, m *models.TableSizeDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	offlineSegmentsFlagName := fmt.Sprintf("%v.offlineSegments", cmdPrefix)
	if cmd.Flags().Changed(offlineSegmentsFlagName) {
		// info: complex object offlineSegments TableSubTypeSizeDetails is retrieved outside this Changed() block
	}
	offlineSegmentsFlagValue := m.OfflineSegments
	if swag.IsZero(offlineSegmentsFlagValue) {
		offlineSegmentsFlagValue = &models.TableSubTypeSizeDetails{}
	}

	err, offlineSegmentsAdded := retrieveModelTableSubTypeSizeDetailsFlags(depth+1, offlineSegmentsFlagValue, offlineSegmentsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || offlineSegmentsAdded
	if offlineSegmentsAdded {
		m.OfflineSegments = offlineSegmentsFlagValue
	}

	return nil, retAdded
}

func retrieveTableSizeDetailsRealtimeSegmentsFlags(depth int, m *models.TableSizeDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	realtimeSegmentsFlagName := fmt.Sprintf("%v.realtimeSegments", cmdPrefix)
	if cmd.Flags().Changed(realtimeSegmentsFlagName) {
		// info: complex object realtimeSegments TableSubTypeSizeDetails is retrieved outside this Changed() block
	}
	realtimeSegmentsFlagValue := m.RealtimeSegments
	if swag.IsZero(realtimeSegmentsFlagValue) {
		realtimeSegmentsFlagValue = &models.TableSubTypeSizeDetails{}
	}

	err, realtimeSegmentsAdded := retrieveModelTableSubTypeSizeDetailsFlags(depth+1, realtimeSegmentsFlagValue, realtimeSegmentsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || realtimeSegmentsAdded
	if realtimeSegmentsAdded {
		m.RealtimeSegments = realtimeSegmentsFlagValue
	}

	return nil, retAdded
}

func retrieveTableSizeDetailsReportedSizeInBytesFlags(depth int, m *models.TableSizeDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	reportedSizeInBytesFlagName := fmt.Sprintf("%v.reportedSizeInBytes", cmdPrefix)
	if cmd.Flags().Changed(reportedSizeInBytesFlagName) {

		var reportedSizeInBytesFlagName string
		if cmdPrefix == "" {
			reportedSizeInBytesFlagName = "reportedSizeInBytes"
		} else {
			reportedSizeInBytesFlagName = fmt.Sprintf("%v.reportedSizeInBytes", cmdPrefix)
		}

		reportedSizeInBytesFlagValue, err := cmd.Flags().GetInt64(reportedSizeInBytesFlagName)
		if err != nil {
			return err, false
		}
		m.ReportedSizeInBytes = reportedSizeInBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTableSizeDetailsTableNameFlags(depth int, m *models.TableSizeDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableNameFlagName := fmt.Sprintf("%v.tableName", cmdPrefix)
	if cmd.Flags().Changed(tableNameFlagName) {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
