// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for RebalanceResult

// register flags to command
func registerModelRebalanceResultFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRebalanceResultDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRebalanceResultInstanceAssignment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRebalanceResultSegmentAssignment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRebalanceResultStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRebalanceResultDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerRebalanceResultInstanceAssignment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: instanceAssignment map[string]InstancePartitions map type is not supported by go-swagger cli yet

	return nil
}

func registerRebalanceResultSegmentAssignment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: segmentAssignment map[string]map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerRebalanceResultStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Enum: ["NO_OP","DONE","FAILED","IN_PROGRESS"]. `

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["NO_OP","DONE","FAILED","IN_PROGRESS"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRebalanceResultFlags(depth int, m *models.RebalanceResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, descriptionAdded := retrieveRebalanceResultDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, instanceAssignmentAdded := retrieveRebalanceResultInstanceAssignmentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || instanceAssignmentAdded

	err, segmentAssignmentAdded := retrieveRebalanceResultSegmentAssignmentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || segmentAssignmentAdded

	err, statusAdded := retrieveRebalanceResultStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrieveRebalanceResultDescriptionFlags(depth int, m *models.RebalanceResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRebalanceResultInstanceAssignmentFlags(depth int, m *models.RebalanceResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	instanceAssignmentFlagName := fmt.Sprintf("%v.instanceAssignment", cmdPrefix)
	if cmd.Flags().Changed(instanceAssignmentFlagName) {
		// warning: instanceAssignment map type map[string]InstancePartitions is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRebalanceResultSegmentAssignmentFlags(depth int, m *models.RebalanceResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	segmentAssignmentFlagName := fmt.Sprintf("%v.segmentAssignment", cmdPrefix)
	if cmd.Flags().Changed(segmentAssignmentFlagName) {
		// warning: segmentAssignment map type map[string]map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRebalanceResultStatusFlags(depth int, m *models.RebalanceResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
