// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/table"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTableRebalanceCmd returns a cmd to handle operation rebalance
func makeOperationTableRebalanceCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "rebalance",
		Short: `Rebalances a table (reassign instances and segments for a table)`,
		RunE:  runOperationTableRebalance,
	}

	if err := registerOperationTableRebalanceParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTableRebalance uses cmd flags to call endpoint api
func runOperationTableRebalance(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := table.NewRebalanceParams()
	if err, _ := retrieveOperationTableRebalanceBestEffortsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableRebalanceBootstrapFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableRebalanceDowntimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableRebalanceDryRunFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableRebalanceExternalViewCheckIntervalInMsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableRebalanceExternalViewStabilizationTimeoutInMsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableRebalanceIncludeConsumingFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableRebalanceMinAvailableReplicasFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableRebalanceReassignInstancesFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableRebalanceTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableRebalanceTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTableRebalanceResult(appCli.Table.Rebalance(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTableRebalanceParamFlags registers all flags needed to fill params
func registerOperationTableRebalanceParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTableRebalanceBestEffortsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableRebalanceBootstrapParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableRebalanceDowntimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableRebalanceDryRunParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableRebalanceExternalViewCheckIntervalInMsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableRebalanceExternalViewStabilizationTimeoutInMsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableRebalanceIncludeConsumingParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableRebalanceMinAvailableReplicasParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableRebalanceReassignInstancesParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableRebalanceTableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableRebalanceTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTableRebalanceBestEffortsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	bestEffortsDescription := `Whether to use best-efforts to rebalance (not fail the rebalance when the no-downtime contract cannot be achieved)`

	var bestEffortsFlagName string
	if cmdPrefix == "" {
		bestEffortsFlagName = "bestEfforts"
	} else {
		bestEffortsFlagName = fmt.Sprintf("%v.bestEfforts", cmdPrefix)
	}

	var bestEffortsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(bestEffortsFlagName, bestEffortsFlagDefault, bestEffortsDescription)

	return nil
}
func registerOperationTableRebalanceBootstrapParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	bootstrapDescription := `Whether to rebalance table in bootstrap mode (regardless of minimum segment movement, reassign all segments in a round-robin fashion as if adding new segments to an empty table)`

	var bootstrapFlagName string
	if cmdPrefix == "" {
		bootstrapFlagName = "bootstrap"
	} else {
		bootstrapFlagName = fmt.Sprintf("%v.bootstrap", cmdPrefix)
	}

	var bootstrapFlagDefault bool

	_ = cmd.PersistentFlags().Bool(bootstrapFlagName, bootstrapFlagDefault, bootstrapDescription)

	return nil
}
func registerOperationTableRebalanceDowntimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	downtimeDescription := `Whether to allow downtime for the rebalance`

	var downtimeFlagName string
	if cmdPrefix == "" {
		downtimeFlagName = "downtime"
	} else {
		downtimeFlagName = fmt.Sprintf("%v.downtime", cmdPrefix)
	}

	var downtimeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(downtimeFlagName, downtimeFlagDefault, downtimeDescription)

	return nil
}
func registerOperationTableRebalanceDryRunParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	dryRunDescription := `Whether to rebalance table in dry-run mode`

	var dryRunFlagName string
	if cmdPrefix == "" {
		dryRunFlagName = "dryRun"
	} else {
		dryRunFlagName = fmt.Sprintf("%v.dryRun", cmdPrefix)
	}

	var dryRunFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dryRunFlagName, dryRunFlagDefault, dryRunDescription)

	return nil
}
func registerOperationTableRebalanceExternalViewCheckIntervalInMsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	externalViewCheckIntervalInMsDescription := `How often to check if external view converges with ideal states`

	var externalViewCheckIntervalInMsFlagName string
	if cmdPrefix == "" {
		externalViewCheckIntervalInMsFlagName = "externalViewCheckIntervalInMs"
	} else {
		externalViewCheckIntervalInMsFlagName = fmt.Sprintf("%v.externalViewCheckIntervalInMs", cmdPrefix)
	}

	var externalViewCheckIntervalInMsFlagDefault int64 = 1000

	_ = cmd.PersistentFlags().Int64(externalViewCheckIntervalInMsFlagName, externalViewCheckIntervalInMsFlagDefault, externalViewCheckIntervalInMsDescription)

	return nil
}
func registerOperationTableRebalanceExternalViewStabilizationTimeoutInMsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	externalViewStabilizationTimeoutInMsDescription := `How long to wait till external view converges with ideal states`

	var externalViewStabilizationTimeoutInMsFlagName string
	if cmdPrefix == "" {
		externalViewStabilizationTimeoutInMsFlagName = "externalViewStabilizationTimeoutInMs"
	} else {
		externalViewStabilizationTimeoutInMsFlagName = fmt.Sprintf("%v.externalViewStabilizationTimeoutInMs", cmdPrefix)
	}

	var externalViewStabilizationTimeoutInMsFlagDefault int64 = 3.6e+06

	_ = cmd.PersistentFlags().Int64(externalViewStabilizationTimeoutInMsFlagName, externalViewStabilizationTimeoutInMsFlagDefault, externalViewStabilizationTimeoutInMsDescription)

	return nil
}
func registerOperationTableRebalanceIncludeConsumingParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	includeConsumingDescription := `Whether to reassign CONSUMING segments for real-time table`

	var includeConsumingFlagName string
	if cmdPrefix == "" {
		includeConsumingFlagName = "includeConsuming"
	} else {
		includeConsumingFlagName = fmt.Sprintf("%v.includeConsuming", cmdPrefix)
	}

	var includeConsumingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(includeConsumingFlagName, includeConsumingFlagDefault, includeConsumingDescription)

	return nil
}
func registerOperationTableRebalanceMinAvailableReplicasParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	minAvailableReplicasDescription := `For no-downtime rebalance, minimum number of replicas to keep alive during rebalance, or maximum number of replicas allowed to be unavailable if value is negative`

	var minAvailableReplicasFlagName string
	if cmdPrefix == "" {
		minAvailableReplicasFlagName = "minAvailableReplicas"
	} else {
		minAvailableReplicasFlagName = fmt.Sprintf("%v.minAvailableReplicas", cmdPrefix)
	}

	var minAvailableReplicasFlagDefault int32 = 1

	_ = cmd.PersistentFlags().Int32(minAvailableReplicasFlagName, minAvailableReplicasFlagDefault, minAvailableReplicasDescription)

	return nil
}
func registerOperationTableRebalanceReassignInstancesParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	reassignInstancesDescription := `Whether to reassign instances before reassigning segments`

	var reassignInstancesFlagName string
	if cmdPrefix == "" {
		reassignInstancesFlagName = "reassignInstances"
	} else {
		reassignInstancesFlagName = fmt.Sprintf("%v.reassignInstances", cmdPrefix)
	}

	var reassignInstancesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(reassignInstancesFlagName, reassignInstancesFlagDefault, reassignInstancesDescription)

	return nil
}
func registerOperationTableRebalanceTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Name of the table to rebalance`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}
func registerOperationTableRebalanceTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `Required. OFFLINE|REALTIME`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func retrieveOperationTableRebalanceBestEffortsFlag(m *table.RebalanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("bestEfforts") {

		var bestEffortsFlagName string
		if cmdPrefix == "" {
			bestEffortsFlagName = "bestEfforts"
		} else {
			bestEffortsFlagName = fmt.Sprintf("%v.bestEfforts", cmdPrefix)
		}

		bestEffortsFlagValue, err := cmd.Flags().GetBool(bestEffortsFlagName)
		if err != nil {
			return err, false
		}
		m.BestEfforts = &bestEffortsFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableRebalanceBootstrapFlag(m *table.RebalanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("bootstrap") {

		var bootstrapFlagName string
		if cmdPrefix == "" {
			bootstrapFlagName = "bootstrap"
		} else {
			bootstrapFlagName = fmt.Sprintf("%v.bootstrap", cmdPrefix)
		}

		bootstrapFlagValue, err := cmd.Flags().GetBool(bootstrapFlagName)
		if err != nil {
			return err, false
		}
		m.Bootstrap = &bootstrapFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableRebalanceDowntimeFlag(m *table.RebalanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("downtime") {

		var downtimeFlagName string
		if cmdPrefix == "" {
			downtimeFlagName = "downtime"
		} else {
			downtimeFlagName = fmt.Sprintf("%v.downtime", cmdPrefix)
		}

		downtimeFlagValue, err := cmd.Flags().GetBool(downtimeFlagName)
		if err != nil {
			return err, false
		}
		m.Downtime = &downtimeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableRebalanceDryRunFlag(m *table.RebalanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("dryRun") {

		var dryRunFlagName string
		if cmdPrefix == "" {
			dryRunFlagName = "dryRun"
		} else {
			dryRunFlagName = fmt.Sprintf("%v.dryRun", cmdPrefix)
		}

		dryRunFlagValue, err := cmd.Flags().GetBool(dryRunFlagName)
		if err != nil {
			return err, false
		}
		m.DryRun = &dryRunFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableRebalanceExternalViewCheckIntervalInMsFlag(m *table.RebalanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("externalViewCheckIntervalInMs") {

		var externalViewCheckIntervalInMsFlagName string
		if cmdPrefix == "" {
			externalViewCheckIntervalInMsFlagName = "externalViewCheckIntervalInMs"
		} else {
			externalViewCheckIntervalInMsFlagName = fmt.Sprintf("%v.externalViewCheckIntervalInMs", cmdPrefix)
		}

		externalViewCheckIntervalInMsFlagValue, err := cmd.Flags().GetInt64(externalViewCheckIntervalInMsFlagName)
		if err != nil {
			return err, false
		}
		m.ExternalViewCheckIntervalInMs = &externalViewCheckIntervalInMsFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableRebalanceExternalViewStabilizationTimeoutInMsFlag(m *table.RebalanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("externalViewStabilizationTimeoutInMs") {

		var externalViewStabilizationTimeoutInMsFlagName string
		if cmdPrefix == "" {
			externalViewStabilizationTimeoutInMsFlagName = "externalViewStabilizationTimeoutInMs"
		} else {
			externalViewStabilizationTimeoutInMsFlagName = fmt.Sprintf("%v.externalViewStabilizationTimeoutInMs", cmdPrefix)
		}

		externalViewStabilizationTimeoutInMsFlagValue, err := cmd.Flags().GetInt64(externalViewStabilizationTimeoutInMsFlagName)
		if err != nil {
			return err, false
		}
		m.ExternalViewStabilizationTimeoutInMs = &externalViewStabilizationTimeoutInMsFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableRebalanceIncludeConsumingFlag(m *table.RebalanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("includeConsuming") {

		var includeConsumingFlagName string
		if cmdPrefix == "" {
			includeConsumingFlagName = "includeConsuming"
		} else {
			includeConsumingFlagName = fmt.Sprintf("%v.includeConsuming", cmdPrefix)
		}

		includeConsumingFlagValue, err := cmd.Flags().GetBool(includeConsumingFlagName)
		if err != nil {
			return err, false
		}
		m.IncludeConsuming = &includeConsumingFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableRebalanceMinAvailableReplicasFlag(m *table.RebalanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("minAvailableReplicas") {

		var minAvailableReplicasFlagName string
		if cmdPrefix == "" {
			minAvailableReplicasFlagName = "minAvailableReplicas"
		} else {
			minAvailableReplicasFlagName = fmt.Sprintf("%v.minAvailableReplicas", cmdPrefix)
		}

		minAvailableReplicasFlagValue, err := cmd.Flags().GetInt32(minAvailableReplicasFlagName)
		if err != nil {
			return err, false
		}
		m.MinAvailableReplicas = &minAvailableReplicasFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableRebalanceReassignInstancesFlag(m *table.RebalanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("reassignInstances") {

		var reassignInstancesFlagName string
		if cmdPrefix == "" {
			reassignInstancesFlagName = "reassignInstances"
		} else {
			reassignInstancesFlagName = fmt.Sprintf("%v.reassignInstances", cmdPrefix)
		}

		reassignInstancesFlagValue, err := cmd.Flags().GetBool(reassignInstancesFlagName)
		if err != nil {
			return err, false
		}
		m.ReassignInstances = &reassignInstancesFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableRebalanceTableNameFlag(m *table.RebalanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableRebalanceTypeFlag(m *table.RebalanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

	}
	return nil, retAdded
}

// parseOperationTableRebalanceResult parses request result and return the string content
func parseOperationTableRebalanceResult(resp0 *table.RebalanceOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*table.RebalanceOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
