// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"startree.ai/cli/client/table"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTableGetExternalViewCmd returns a cmd to handle operation getExternalView
func makeOperationTableGetExternalViewCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getExternalView",
		Short: `Get table external view`,
		RunE:  runOperationTableGetExternalView,
	}

	if err := registerOperationTableGetExternalViewParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTableGetExternalView uses cmd flags to call endpoint api
func runOperationTableGetExternalView(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := table.NewGetExternalViewParams()
	if err, _ := retrieveOperationTableGetExternalViewTableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTableGetExternalViewTableTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTableGetExternalViewResult(appCli.Table.GetExternalView(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTableGetExternalViewParamFlags registers all flags needed to fill params
func registerOperationTableGetExternalViewParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTableGetExternalViewTableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTableGetExternalViewTableTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTableGetExternalViewTableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableNameDescription := `Required. Name of the table`

	var tableNameFlagName string
	if cmdPrefix == "" {
		tableNameFlagName = "tableName"
	} else {
		tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
	}

	var tableNameFlagDefault string

	_ = cmd.PersistentFlags().String(tableNameFlagName, tableNameFlagDefault, tableNameDescription)

	return nil
}
func registerOperationTableGetExternalViewTableTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tableTypeDescription := `realtime|offline`

	var tableTypeFlagName string
	if cmdPrefix == "" {
		tableTypeFlagName = "tableType"
	} else {
		tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
	}

	var tableTypeFlagDefault string

	_ = cmd.PersistentFlags().String(tableTypeFlagName, tableTypeFlagDefault, tableTypeDescription)

	return nil
}

func retrieveOperationTableGetExternalViewTableNameFlag(m *table.GetExternalViewParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableName") {

		var tableNameFlagName string
		if cmdPrefix == "" {
			tableNameFlagName = "tableName"
		} else {
			tableNameFlagName = fmt.Sprintf("%v.tableName", cmdPrefix)
		}

		tableNameFlagValue, err := cmd.Flags().GetString(tableNameFlagName)
		if err != nil {
			return err, false
		}
		m.TableName = tableNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTableGetExternalViewTableTypeFlag(m *table.GetExternalViewParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tableType") {

		var tableTypeFlagName string
		if cmdPrefix == "" {
			tableTypeFlagName = "tableType"
		} else {
			tableTypeFlagName = fmt.Sprintf("%v.tableType", cmdPrefix)
		}

		tableTypeFlagValue, err := cmd.Flags().GetString(tableTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TableType = &tableTypeFlagValue

	}
	return nil, retAdded
}

// parseOperationTableGetExternalViewResult parses request result and return the string content
func parseOperationTableGetExternalViewResult(resp0 *table.GetExternalViewOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*table.GetExternalViewOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
