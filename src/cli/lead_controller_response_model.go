// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"startree.ai/cli/models"
)

// Schema cli for LeadControllerResponse

// register flags to command
func registerModelLeadControllerResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLeadControllerResponseLeadControllerEntryMap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLeadControllerResponseLeadControllerResourceEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLeadControllerResponseLeadControllerEntryMap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: leadControllerEntryMap map[string]LeadControllerEntry map type is not supported by go-swagger cli yet

	return nil
}

func registerLeadControllerResponseLeadControllerResourceEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	leadControllerResourceEnabledDescription := ``

	var leadControllerResourceEnabledFlagName string
	if cmdPrefix == "" {
		leadControllerResourceEnabledFlagName = "leadControllerResourceEnabled"
	} else {
		leadControllerResourceEnabledFlagName = fmt.Sprintf("%v.leadControllerResourceEnabled", cmdPrefix)
	}

	var leadControllerResourceEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(leadControllerResourceEnabledFlagName, leadControllerResourceEnabledFlagDefault, leadControllerResourceEnabledDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLeadControllerResponseFlags(depth int, m *models.LeadControllerResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, leadControllerEntryMapAdded := retrieveLeadControllerResponseLeadControllerEntryMapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || leadControllerEntryMapAdded

	err, leadControllerResourceEnabledAdded := retrieveLeadControllerResponseLeadControllerResourceEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || leadControllerResourceEnabledAdded

	return nil, retAdded
}

func retrieveLeadControllerResponseLeadControllerEntryMapFlags(depth int, m *models.LeadControllerResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	leadControllerEntryMapFlagName := fmt.Sprintf("%v.leadControllerEntryMap", cmdPrefix)
	if cmd.Flags().Changed(leadControllerEntryMapFlagName) {
		// warning: leadControllerEntryMap map type map[string]LeadControllerEntry is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveLeadControllerResponseLeadControllerResourceEnabledFlags(depth int, m *models.LeadControllerResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	leadControllerResourceEnabledFlagName := fmt.Sprintf("%v.leadControllerResourceEnabled", cmdPrefix)
	if cmd.Flags().Changed(leadControllerResourceEnabledFlagName) {

		var leadControllerResourceEnabledFlagName string
		if cmdPrefix == "" {
			leadControllerResourceEnabledFlagName = "leadControllerResourceEnabled"
		} else {
			leadControllerResourceEnabledFlagName = fmt.Sprintf("%v.leadControllerResourceEnabled", cmdPrefix)
		}

		leadControllerResourceEnabledFlagValue, err := cmd.Flags().GetBool(leadControllerResourceEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.LeadControllerResourceEnabled = leadControllerResourceEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}
